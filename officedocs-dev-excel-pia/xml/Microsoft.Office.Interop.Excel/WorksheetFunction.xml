<Type Name="WorksheetFunction" FullName="Microsoft.Office.Interop.Excel.WorksheetFunction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0e8779a13b1ae831ceba99e1523c885328838f42" />
    <Meta Name="ms.sourcegitcommit" Value="e7d3480b6ad64431c29c74a1b422c662de0b511d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="09/24/2018" />
    <Meta Name="ms.locfileid" Value="20574611" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface WorksheetFunction" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract WorksheetFunction" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.WorksheetFunction" />
  <TypeSignature Language="VB.NET" Value="Public Interface WorksheetFunction" />
  <TypeSignature Language="C++ CLI" Value="public interface class WorksheetFunction" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00020845-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>用作可从 Visual Basic 中调用的 Excel 工作表函数的容器。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="_WSFunction">
      <MemberSignature Language="C#" Value="public object _WSFunction (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _WSFunction([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction._WSFunction(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _WSFunction (Optional Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(169)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>仅供内部使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrInt">
      <MemberSignature Language="C#" Value="public double AccrInt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrInt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrInt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrInt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16853)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Issue date - 债券的发行日期。</param>
        <param name="Arg2">First interest - 债券的首次计息日。</param>
        <param name="Arg3">Settlement - 债券的结算日。</param>
        <param name="Arg4">Rate - 债券的年息票利率。</param>
        <param name="Arg5">Par - 债券的票面价值。</param>
        <param name="Arg6">Frequency - 每年支付息票的次数。</param>
        <param name="Arg7">Basis - 要使用的日计数基准类型。</param>
        <summary>返回定期付息有价证券的应计利息。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <para>下表介绍可用于值<paramref name="Arg5" />。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrIntM">
      <MemberSignature Language="C#" Value="public double AccrIntM (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrIntM([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrIntM(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrIntM (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16854)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">债券的发行日。</param>
        <param name="Arg2">债券的到期日。</param>
        <param name="Arg3">债券的年息票利率。</param>
        <param name="Arg4">债券的票面价值。如果省略 par，ACCRINTM 则使用 $1000。</param>
        <param name="Arg5">要使用的日计数基准类型。</param>
        <summary>返回到期一次性付息有价证券的应计利息。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <para>下表介绍可用于值<paramref name="Arg5" />。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>以下列表包含使用 ACCRINTM 时应注意的信息：</para>
          <list type="bullet">
            <item>
              <description>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日是序列号 1，2008 年 1 月 1 日是序列号 39,448，这是因为它距 1900 年 1 月 1 日有 39,448 天。</description>
            </item>
            <item>
              <description>Issue、maturity 和 basis 将被截尾取整。</description>
            </item>
            <item>
              <description>如果 issue 或 maturity 是无效的日期，则 ACCRINTM 将生成一个错误。</description>
            </item>
            <item>
              <description>如果 rate ≤ 0 或 par ≤ 0，则 ACCRINTM 将产生一个错误。</description>
            </item>
            <item>
              <description>如果 basis &lt; 0 或者，如果基础&gt;4，则 ACCRINTM 将生成一个错误。 </description>
            </item>
            <item>
              <description>如果 issue ≥ maturity，则 ACCRINTM 将产生一个错误。</description>
            </item>
            <item>
              <description>ACCRINTM 的计算公式如下：

 </description>
            </item>
          </list>
          <para>其中：</para>
          <para>A = 的按月计算在内的应计天数。 对于在到期付息的感兴趣，将使用的从发行日与到期日的天数。</para>
          <para>D = 年基准。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public double Acos (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acos([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acos (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acos(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16483)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">所需角度的余弦值，必须介于 -1 到 1 之间。</param>
        <summary>返回的反余弦值或一个数的反余弦值。 反余弦值是的角度的余弦值<paramref name="Arg1" />。 返回的角度提供以弧度表示范围 0 （零） 到 pi。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果要将结果从弧度转换为度，则请将结果乘以 180/PI()，或者使用 Degrees 方法。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public double Acosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16617)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">等于或大于 1 的任意实数。</param>
        <summary>返回一个数的反双曲余弦值。 号码必须是大于或等于 1。 反双曲余弦值为的值为其双曲余弦值<paramref name="Arg1" />，因此 Acosh(Cosh(number)) 等于<paramref name="Arg1" />。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acot">
      <MemberSignature Language="C#" Value="public double Acot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16932)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">所需的角度的余切。</param>
        <summary>返回一个数反余切以弧度为单位范围为 0 到 Pi。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acoth">
      <MemberSignature Language="C#" Value="public double Acoth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acoth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acoth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acoth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acoth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16933)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">所需角度的双曲余切。</param>
        <summary>返回一个数反双曲余切。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Aggregate">
      <MemberSignature Language="C#" Value="public double Aggregate (double Arg1, double Arg2, Microsoft.Office.Interop.Excel.Range Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Aggregate([in]float64 Arg1, [in]float64 Arg2, [in]class Microsoft.Office.Interop.Excel.Range Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Aggregate(System.Double,System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Aggregate (Arg1 As Double, Arg2 As Double, Arg3 As Range, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16869)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Function_num - 一个介于 1 到 19 之间的数字，用于指定要使用的函数。</param>
        <param name="Arg2">选项 - 一个数值，用于确定要在函数的求值范围中忽略的值。</param>
        <param name="Arg3">Ref1 - 带有多个要对其计算聚合值的数值参数的函数的第一个数值参数。</param>
        <param name="Arg4">Ref2 - Ref30 - 要对其计算聚合值的 2 到 30 个数值参数。</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回列表或数据库中的一个聚合。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>以下约束将应用于 Ref 参数 (Arg3-Arg 30) 根据<b>Function_num</b>值。</para>
          <list type="table">
            <item>
              <term>1-13</term>
              <description>有效类型： 任意单元格引用联合相交的部分定义名称结构化 referencesInvalid 类型： 实际数据数组</description>
              <description>有效类型： 任意单元格引用联合相交的部分定义名称结构化 referencesInvalid 类型： 实际数据数组</description>
              <description>有效类型： 任意单元格引用联合相交的部分定义名称结构化 referencesInvalid 类型： 实际数据数组</description>
            </item>
            <item>
              <term>14 17</term>
              <description>有效类型： 联合相交的部分定义任何单元格引用名称结构化引用实际数据数组</description>
              <description>有效类型： 联合相交的部分定义任何单元格引用名称结构化引用实际数据数组</description>
              <description>不允许使用引用</description>
            </item>
          </list>
          <para>如果需要但未提供第二个 Ref 参数，AGGREGATE 将会返回错误 #VALUE!。</para>
          <para>如果有一个或多个引用为三维引用，AGGREGATE 将会返回错误值 #VALUE!。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorDegrc">
      <MemberSignature Language="C#" Value="public double AmorDegrc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorDegrc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorDegrc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorDegrc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16850)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">资产原值。</param>
        <param name="Arg2">资产的购买日。</param>
        <param name="Arg3">第一个结算期的结束日期。</param>
        <param name="Arg4">资产在寿命结束时的残值。</param>
        <param name="Arg5">结算期。</param>
        <param name="Arg6">折旧率。</param>
        <param name="Arg7">要使用的年基准数。</param>
        <summary>返回每个结算期的折旧值。此函数为法国会计系统提供。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果某项资产是在结算期的中期购入的，则应考虑按比例折旧。 方法类似于是<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />，只不过折旧系数应用资产的寿命根据计算中。下表描述中使用的值<paramref name="Arg7" />。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>360 天（NASD 方法）</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数</description>
            </item>
            <item>
              <term>3</term>
              <description>一年 365 天</description>
            </item>
            <item>
              <term>4</term>
              <description>一年 360 天（欧洲方法）</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>此函数将返回折旧值，截止到资产寿命的最后一个期间，或直到累积折旧值大于资产原值减去残值后所得的结果。</para>
          <para>折旧系数为：

</para>
          <list type="table">
            <item>
              <term>3 到 4 年</term>
              <description>1.5</description>
            </item>
            <item>
              <term>5 到 6 年</term>
              <description>2</description>
            </item>
            <item>
              <term>6 年以上</term>
              <description>2.5</description>
            </item>
          </list>
          <para>最后一个期间之前的那个期间的折旧率将增加到 50%，最后一个期间的折旧率将增加到 100%。</para>
          <para>如果资产的寿命在 0（零）到 1、1 到 2、2 到 3 或 4 到 5 之间，则将返回错误值 #NUM!。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorLinc">
      <MemberSignature Language="C#" Value="public double AmorLinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorLinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorLinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16851)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">资产原值。</param>
        <param name="Arg2">资产的购买日。</param>
        <param name="Arg3">第一个结算期的结束日期。</param>
        <param name="Arg4">资产在寿命结束时的残值。</param>
        <param name="Arg5">结算期。</param>
        <param name="Arg6">折旧率。</param>
        <param name="Arg7">要使用的年基准数。</param>
        <summary>返回每个结算期的折旧值。此函数为法国会计系统提供。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果某项资产在结算期的中期购入的则按比例的折旧考虑在内。下表介绍用于值<paramref name="Arg7" />。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>360 天（NASD 方法）</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数</description>
            </item>
            <item>
              <term>3</term>
              <description>一年 365 天</description>
            </item>
            <item>
              <term>4</term>
              <description>一年 360 天（欧洲方法）</description>
            </item>
          </list>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public bool And (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool And([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.And(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function And (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16420)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要测试的 1 到 30 个条件可以是<b>true</b>或<b>false</b>。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回<b>true</b>所有参数<b>，则返回 true</b>; 如果如果一个或多个参数为<b>false</b>，则返回<b>false</b> 。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数必须能计算为逻辑值，如<b>true</b>或<b>false</b>，或者参数必须包含逻辑值的数组或引用。 </para>
          <para>如果数组或引用参数中包含文本或空单元格，则这些值将被忽略。</para>
          <para>如果指定区域内不包含逻辑值，则此方法将生成一个错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当使用对象识别符，此属性返回<see cref="T:Microsoft.Office.Interop.Excel.Application" />对象代表 Microsoft Excel 应用程序。 如果使用对象识别符，此属性返回<see cref="T:Microsoft.Office.Interop.Excel.Application" />值，该值代表指定对象的创建者的对象。 您可以将此属性与 OLE 自动化对象一起使用以返回该对象的应用程序。 只读。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arabic">
      <MemberSignature Language="C#" Value="public double Arabic (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Arabic([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Arabic(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Arabic (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Arabic(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16967)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">要转换的罗马数字。</param>
        <summary>转换的阿拉伯数字罗马数字。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public string Asc (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Asc([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Asc(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16598)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">文本或对包含要更改的文本的单元格的引用。如果文本中不包含任何全角字母，则文本不会更改。</param>
        <summary>对于双字节字符集 (DBCS) 语言，将全角 （双字节） 字符更改为半角 （单字节） 字符。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public double Asin (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asin([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asin (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asin(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16482)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">所需角度的正弦值，必须介于 -1 到 1 之间。</param>
        <summary>返回的反正弦值或数的反正弦值。 反正弦值是的角度的正弦值为<paramref name="Arg1" />。 返回的角度给定以弧度表示范围-pi/2 到 pi/2。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>若要 express 以度表示反正弦值，将结果乘以 180/PI （） 或使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" />方法。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public double Asinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16616)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">任意实数。</param>
        <summary>返回一个数的反双曲正弦值。 反双曲正弦值为的值的双曲正弦值为<paramref name="Arg1" />，因此 Asinh(Sinh(number)) 等于<paramref name="Arg1" />。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public double Atan2 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atan2([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atan2 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atan2(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16481)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">点的 x 坐标。</param>
        <param name="Arg2">点的 y 坐标。</param>
        <summary>返回指定的 x 和 y 坐标值的反正切值。反正切值是角度，是从 x 轴到通过原点 (0, 0) 和坐标点 (x_num, y_num) 的直线之间的夹角。该角度用弧度给出，介于 -pi 和 pi 之间（不包括 -pi）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>结果为正表示从 x 轴逆时针旋转的角度；结果为负表示从 x 轴顺时针旋转的角度。</para>
          <para>
            <b>Atan2(a,b)</b>等于<b>Atan(b/a)</b>，只不过可等于 0<b>在于 Atan2</b>中的。 </para>
          <para>如果两个<paramref name="Arg1" />和<paramref name="Arg2" />0，则 Atan2 将返回错误值。 </para>
          <para>若要表示反正切值，请将结果乘以 180/PI （） 或使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" />方法。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public double Atanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16618)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">介于 1 和 -1 之间的任意实数。</param>
        <summary>返回数字的反双曲正切值。数字必须介于 -1 和 1 之间（不包括 -1 和 1）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>反双曲正切值为的值的双曲正切值为<b>Arg1</b>，因此<b>Atanh(Tanh(number))</b>等于<paramref name="Arg1" />。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AveDev">
      <MemberSignature Language="C#" Value="public double AveDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AveDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AveDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AveDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16653)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要计算其绝对偏差平均值的 1 到 30 个参数。也可以不使用这种用逗号分隔参数的形式，而使用一个数组或一个对数组的引用。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回多个数据点与其平均值的绝对偏差的平均值。AveDev 是对数据集中可变性的度量。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>AveDev</b>受输入数据中的度量单位。 </para>
          <para>参数要么是数字，要么是包含数字的名称、数组或引用。</para>
          <para>直接键入参数列表的逻辑值和数字的文本表示也包括在内。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>平均偏差的计算公式为：

</para>
          <para>图 1： 的平均偏差的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public double Average (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Average([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Average(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Average (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16389)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要求其平均值的 1 到 30 个数值参数。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回参数的平均值（算术平均值）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入参数列表的逻辑值和数字的文本表示也包括在内。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。 如果要对引用中的逻辑值和数字的文本表示进行计算，请使用 AVERAGEA 函数。 </para>
          <para>
            <b>平均</b>方法趋，这是一组数统计分布中的中心的位置。 三个趋大多数常用方法是：</para>
          <list type="bullet">
            <item>
              <description>算术平均值，并通过添加一组数，然后除以这些号码数计算的平均值。 例如，2、 3、 3、 5、 7 和 10 的平均值为 30 除以 6，这是 5。 </description>
            </item>
            <item>
              <description>这是一组数; 中间号的中间值即一半的号码的值都大于 median 和半号码的值都小于中间值。 例如，2、 3、 3、 5、 7 和 10 的中间值是 4。</description>
            </item>
            <item>
              <description>这是一组数中的出现频率最多号的模式。 例如，2、 3、 3、 5、 7 和 10 的模式为 3。</description>
            </item>
          </list>
          <para>对于对称分布的一组数字，这三种趋中性衡量方式完全相同。对于偏态分布的一组数字，这些衡量方式可能会不同。</para>
          <para>在内，请记住区别空单元格和包含值为零，尤其是在您清除零值复选框 （工具菜单中的选项命令） 中的视图选项卡上。 空单元格不计算在内，但零值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIf">
      <MemberSignature Language="C#" Value="public double AverageIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16867)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要求其平均值的一个或多个单元格。</param>
        <param name="Arg2">数字、 表达式、 单元格的引用或定义的单元格的平均值的文本的窗体中的条件。 例如，条件可表达为 32，"32"，"&gt;32"、"apples"或 B4。</param>
        <param name="Arg3">实际的平均的单元格集。 如果省略，则使用范围。</param>
        <summary>返回区域内满足给定条件的所有单元格的平均值（算术平均值）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>区域中包含<b>true</b>或<b>false</b>的单元格将被忽略。 </para>
          <para>如果 range 或 average_range 中的单元格为空单元格，<b>则 AverageIf</b>会将其忽略。 </para>
          <para>如果条件中的单元格为空，<b>则 AverageIf</b>会将其作为 0 值。 </para>
          <para>如果没有单元格区域满足的条件，<b>则 AverageIf</b>将生成一个错误值。 </para>
          <para>可以在条件中使用通配符，包括问号 (?) 和星号 (*)。问号可匹配任意的单个字符；星号可匹配任意一串字符。如果要查找实际的问号或星号，则请在该字符前键入一个波形符 (~)。</para>
          <para>Average_range 的大小和形状不必与 range 相同。求其平均值的实际单元格的确定方法如下：使用 average_range 中左上角的单元格作为起始单元格，然后将与 range 的大小和形状对应的所有单元格包含到其中。例如：</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>
            <b>则 AverageIf</b>方法趋，这是一组数统计分布中的中心的位置。 三个趋大多数常用方法是：</para>
          <list type="bullet">
            <item>
              <description>算术平均值，并通过添加一组数，然后除以这些号码数计算的平均值。 例如，2、 3、 3、 5、 7 和 10 的平均值为 30 除以 6，这是 5。 </description>
            </item>
            <item>
              <description>这是一组数; 中间号的中间值即一半的号码的值都大于 median 和半号码的值都小于中间值。 例如，2、 3、 3、 5、 7 和 10 的中间值是 4。</description>
            </item>
            <item>
              <description>这是一组数中的出现频率最多号的模式。 例如，2、 3、 3、 5、 7 和 10 的模式为 3。</description>
            </item>
          </list>
          <para>对于对称分布的一组数字，这三种趋中性衡量方式完全相同。对于偏态分布的一组数字，这些衡量方式可能会不同。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIfs">
      <MemberSignature Language="C#" Value="public double AverageIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16868)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">在其中计算相关条件的一个或多个区域。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>返回满足多个条件的所有单元格的平均值（算术平均值）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 average_range 中的单元格为空单元格，<b>则 AverageIfs</b>会将其忽略。 </para>
          <para>如果条件区域中的单元格为空，<b>则 AverageIfs</b>会将其作为 0 值。 </para>
          <para>区域中包含<b>true</b>的单元格作为 1; 计算区域中包含<b>false</b>的单元格作为 0 （零） 计算。 </para>
          <para>仅在每个单元格中指定的对应条件都为 True 时，才会在平均值计算过程中使用 average_range 中的该单元格。</para>
          <para>如果 average_range 中的单元格为空或包含无法转换为数字的文本值，<b>则 AverageIfs</b>将生成一个错误。 </para>
          <para>如果没有满足所有条件的单元格，<b>则 AverageIfs</b>将生成一个错误值。 </para>
          <para>可以在条件中使用通配符，包括问号 (?) 和星号 (*)。问号可匹配任意的单个字符；星号可匹配任意一串字符。如果要查找实际的问号或星号，则请在该字符前键入一个波形符 (~)。</para>
          <para>每个 criteria_range 的大小和形状不必与 average_range 相同。计算其平均值的实际单元格的确定方法如下：使用 criteria_range 中左上角的单元格作为起始单元格，然后将与 range 的大小和形状对应的所有单元格包含到其中。例如：</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>
            <b>AverageIfs</b>函数趋，这是一组数统计分布中的中心的位置。 三个趋大多数常用方法是：</para>
          <list type="bullet">
            <item>
              <description>算术平均值，并通过添加一组数，然后除以这些号码数计算的平均值。 例如，2、 3、 3、 5、 7 和 10 的平均值为 30 除以 6，这是 5。 </description>
            </item>
            <item>
              <description>这是一组数; 中间号的中间值即一半的号码的值都大于 median 和半号码的值都小于中间值。 例如，2、 3、 3、 5、 7 和 10 的中间值是 4。</description>
            </item>
            <item>
              <description>这是一组数中的出现频率最多号的模式。 例如，2、 3、 3、 5、 7 和 10 的模式为 3。</description>
            </item>
          </list>
          <para>对于对称分布的一组数字，这三种趋中性衡量方式完全相同。对于偏态分布的一组数字，这些衡量方式可能会不同。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BahtText">
      <MemberSignature Language="C#" Value="public string BahtText (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string BahtText([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BahtText(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function BahtText (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ BahtText(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16752)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">要转换成文本的数字、对包含数字的单元格的引用或计算结果为数字的公式。</param>
        <summary>将数字转换为泰语文本并添加后缀“泰铢”。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public string Base (double Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Base([in]float64 Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Base(System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Base (Arg1 As Double, Arg2 As Double, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16955)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要转换的号码。</param>
        <param name="Arg2">基本基数的要转换到的号码。</param>
        <param name="Arg3">返回字符串的最小长度。 如果没有添加省略前导零。</param>
        <summary>将数字转换成与给定基数 （基本） 的文本表示形式。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselI">
      <MemberSignature Language="C#" Value="public double BesselI (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselI([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselI(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselI (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselI(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16812)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">计算的函数值。</param>
        <param name="Arg2">Bessel 函数的阶。如果 n 不是整数，则将被截尾取整。</param>
        <summary>返回修正的 Bessel 函数，它等效于计算纯虚数参数值的 Bessel 函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 x 是非数值，BesselI 将返回错误值 #VALUE!。 </para>
          <para>如果 n 是非数值，BesselI 将生成一个错误值。 </para>
          <para>如果 n &lt; 0，BesselI 将生成一个错误值。 </para>
          <para>变量 x 的 n 阶修正 Bessel 函数为：

</para>
          <para>图 1： 变量 x 的贝赛耳函数</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselJ">
      <MemberSignature Language="C#" Value="public double BesselJ (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselJ([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselJ(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselJ (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselJ(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16809)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">计算的函数值。</param>
        <param name="Arg2">Bessel 函数的阶。如果 n 不是整数，则将被截尾取整。</param>
        <summary>返回 Bessel 函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 x 为非数值型，<b>则 BesselJ</b>将生成一个错误值。 </para>
          <para>如果 n 为非数值型，<b>则 besselj 将</b>返回将生成一个错误值。 </para>
          <para>如果 n &lt; 0，<b>则 BesselJ</b>将生成一个错误值。 </para>
          <para>变量 x 的 n 阶 Bessel 函数为：

 </para>
          <para>图 1： 变量 x 的贝赛耳函数</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>图 2： γ 函数</para>
          <para></para>
          <para></para>
          <para>为 γ 函数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselK">
      <MemberSignature Language="C#" Value="public double BesselK (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselK([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselK(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselK (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselK(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16810)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">计算的函数值。</param>
        <param name="Arg2">函数的阶。如果 n 不是整数，则将被截尾取整。</param>
        <summary>返回修正 Bessel 函数，它等效于根据纯虚数参数计算的 Bessel 函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 x 为非数值型，<b>则 BesselK</b>将生成一个错误值。 </para>
          <para>如果 n 为非数值型，<b>则 BesselK</b>将生成一个错误值。 </para>
          <para>如果 n &lt; 0，<b>则 BesselK</b>将生成一个错误值。 </para>
          <para>变量 x 的 n 阶修正 Bessel 函数为：

 </para>
          <para>图 1： 变量 x 的贝赛耳函数</para>
          <para></para>
          <para></para>
          <para>其中 Jn 和 Yn 分别为 J 和 Y 的 Bessel 函数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselY">
      <MemberSignature Language="C#" Value="public double BesselY (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselY([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselY(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselY (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselY(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16811)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">计算的函数值。</param>
        <param name="Arg2">函数的阶。如果 n 不是整数，则将被截尾取整。</param>
        <summary>返回 Bessel 函数，该函数也称为 Weber 函数或 Neumann 函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 x 为非数值型，<b>则 BesselY</b>将生成一个错误值。 </para>
          <para>如果 n 为非数值型，<b>则 BesselY</b>将生成一个错误值。 </para>
          <para>如果 n &lt; 0，<b>则 BesselY</b>将生成一个错误值。 </para>
          <para>变量 x 的 n 阶 Bessel 函数为：

 </para>
          <para>图 1： 变量 x 的贝赛耳函数</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Dist">
      <MemberSignature Language="C#" Value="public double Beta_Dist (double Arg1, double Arg2, double Arg3, bool Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16909)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">介于 A 和 B 之间的值，用来计算函数的值。</param>
        <param name="Arg2">该分布的 Alpha 参数。</param>
        <param name="Arg3">该分布的 Beta 参数。</param>
        <param name="Arg4">Cumulative-决定函数的形式一个逻辑值。 如果累积为<b>true</b>，BETA。分发返回累积分布函数;如果<b>false</b>，则将返回概率密度函数。</param>
        <param name="Arg5">x 所属区间的可选下界。</param>
        <param name="Arg6">x 所属区间的可选上界。</param>
        <summary>返回 Beta 累积分布函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Beta 分布通常用于研究样本中某些事物变化的百分比，例如人们一天中用来看电视的时间所占的比例：</para>
          <list type="bullet">
            <item>
              <description>如果任一参数为非数值型，<b>则 beta_dist 将</b>返回 #VALUE ！ 错误值。</description>
            </item>
            <item>
              <description>如果 alpha ≤ 0 或 beta ≤ 0，<b>则 Beta_Dist</b>将生成一个错误值。</description>
            </item>
            <item>
              <description>如果 x &lt; ，x &gt; B 或 A = B，<b>则 Beta_Dist</b>将生成一个错误值。</description>
            </item>
            <item>
              <description>如果忽略值 a 和 B （界和上界），<b>则 Beta_Dist</b>将使用标准累积 beta 分布，使 A = 0 且 B = 1。</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Inv">
      <MemberSignature Language="C#" Value="public double Beta_Inv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16910)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">与 Beta 分布相关的概率。</param>
        <param name="Arg2">该分布的 Alpha 参数。</param>
        <param name="Arg3">Beta 参数通讯组中。</param>
        <param name="Arg4">x 所属区间的可选下界。</param>
        <param name="Arg5">x 所属区间的可选上界。</param>
        <summary>返回指定的 Beta 分布的累积分布函数的反函数。即，如果 probability = Beta_Dist(x,...)，则 Beta_Inv(probability,...) = x。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>在项目计划中，如果给定预期完成时间和变化率，则可使用 Beta 分布来建立可能完成时间的模型：</para>
          <list type="bullet">
            <item>
              <description>如果任一参数为非数值型，<b>则 Beta_Inv</b>将生成一个错误值。</description>
            </item>
            <item>
              <description>如果 alpha ≤ 0 或 beta ≤ 0，<b>则 Beta_Inv</b>将生成一个错误值。</description>
            </item>
            <item>
              <description>如果 probability ≤ 0 或 probability &gt; 1，<b>则 Beta_Inv</b>将生成一个错误值。</description>
            </item>
            <item>
              <description>如果忽略值 a 和 B （界和上界），<b>则 Beta_Inv</b>将使用标准累积 beta 分布，使 A = 0 且 B = 1。</description>
            </item>
          </list>
          <para>概率给定一个值，<b>则 Beta_Inv</b>搜寻 x 满足该值，则 Beta_Dist (x、 alpha 或 beta，TRUE、 A、 B） = 概率。 因此，<b>则 Beta_Inv</b>精度取决精度<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />。 <b>Beta_Inv</b>使用迭代的搜索技术。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaDist">
      <MemberSignature Language="C#" Value="public double BetaDist (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16654)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">介于 A 和 B 之间的值，用来计算函数的值。</param>
        <param name="Arg2">分布参数。</param>
        <param name="Arg3">分布参数。</param>
        <param name="Arg4">x 所属区间的可选下界。</param>
        <param name="Arg5">x 所属区间的可选上界。</param>
        <summary>返回 Beta 累积分布函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />方法。</para>
          <para>Beta 分布通常用于研究样本中某些事物变化的百分比，例如人们一天中用来看电视的时间所占的比例。</para>
          <list type="bullet">
            <item>
              <description>如果任一参数为非数值型，<b>则 betadist 将</b>返回 #VALUE ！。 错误值。</description>
            </item>
            <item>
              <description>如果 alpha ≤ 0 或 beta ≤ 0，<b>则 BetaDist</b>将生成一个错误值。</description>
            </item>
            <item>
              <description>如果 x &lt; ，x &gt; B 或 A = B，<b>则 BetaDist</b>将生成一个错误值。</description>
            </item>
            <item>
              <description>如果忽略值 a 和 B，<b>则 betadist 将</b>使用标准累积 beta 分布，使 A = 0 且 B = 1。</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaInv">
      <MemberSignature Language="C#" Value="public double BetaInv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaInv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16656)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">与 Beta 分布相关的概率。</param>
        <param name="Arg2">该分布的 Alpha 参数。</param>
        <param name="Arg3">Beta 参数通讯组中。</param>
        <param name="Arg4">x 所属区间的可选下界。</param>
        <param name="Arg5">x 所属区间的可选上界。</param>
        <summary>返回指定的 Beta 分布的累积分布函数的反函数。即，如果 probability = BetaDist(x,...)，则 BetaInv(probability,...) = x。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" />方法。</para>
          <para>在项目计划中，如果已知预期完成时间和变化率，可以使用 beta 分布来建立可能完成时间的模型。</para>
          <list type="bullet">
            <item>
              <description>如果任一参数为非数值型， <b>betainv 就</b>会生成一个错误值。</description>
            </item>
            <item>
              <description>如果 alpha ≤ 0 或 beta ≤ <b>0,betainv</b>将生成一个错误值。 </description>
            </item>
            <item>
              <description>如果 probability ≤ 0 或 probability &gt; 1， <b>betainv 就</b>会生成一个错误值。 </description>
            </item>
            <item>
              <description>如果忽略值 a 和 B， <b>BetaInv</b>将使用标准累积 beta 分布，使 A = 0 且 B = 1。</description>
            </item>
          </list>
          <para>概率给定一个值， <b>BetaInv</b>搜寻 x 满足该值，则 betadist 将 (x、 alpha 或 beta，A，B） = 概率。 因此， <b>BetaInv</b>精度取决精度<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" />。 <b>BetaInv</b>使用迭代的搜索技术。 如果搜索不收敛 100 次迭代后，该函数将生成一个错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Dec">
      <MemberSignature Language="C#" Value="public string Bin2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Bin2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16777)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要转换的二进制数。Number 不能多于 10 个字符（10 位）。最高位为符号位，其余 9 位为数字位。负数用二进制数的补码表示。</param>
        <summary>将二进制数转换为十进制数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number 不是有效的二进制数或多于 10 个字符（10 位），则 Bin2Dec 将生成一个错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Hex">
      <MemberSignature Language="C#" Value="public string Bin2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16779)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要转换的二进制数。Number 不能多于 10 个字符（10 位）。最高位为符号位，其余 9 位为数字位。负数用二进制数的补码表示。</param>
        <param name="Arg2">要使用的字符数。 如果省略位置，<b>则 Bin2Hex</b>将使用的最小所需的字符数。 位置可用于填充带前导 0 （零） 的返回值。</param>
        <summary>将二进制数转换为十六进制数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number 不是有效的二进制数或多于 10 个字符 （10 位），<b>则 Bin2Hex</b>将生成一个错误。 </para>
          <para>如果 number 为负数，<b>则 Bin2Hex</b>将忽略 places 并返回一个以 10 个字符十六进制数。 </para>
          <para>如果<b>Bin2Hex</b>所需的字符数多于 places 指定的字符，它将生成一个错误。 </para>
          <para>如果 places 不是整数，则将被截尾取整。</para>
          <para>如果 places 为非数值型，<b>则 Bin2Hex</b>将生成一个错误。 </para>
          <para>如果 places 为负数，<b>则 Bin2Hex</b>将生成一个错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Oct">
      <MemberSignature Language="C#" Value="public string Bin2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16778)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要转换的二进制数。Number 不能多于 10 个字符（10 位）。最高位为符号位，其余 9 位为数字位。负数用二进制数的补码表示。</param>
        <param name="Arg2">要使用的字符数。 如果省略位置，<b>则 Bin2Oct</b>将使用的最小所需的字符数。 位置可用于填充带前导 0 （零） 的返回值。</param>
        <summary>将二进制数转换为八进制数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number 不是有效的二进制数或多于 10 个字符 （10 位），<b>则 Bin2Oct</b>将生成一个错误。 </para>
          <para>如果 number 为负数，<b>则 Bin2Oct</b>将忽略 places 并返回一个以 10 个字符表示的八进制数。 </para>
          <para>如果<b>Bin2Oct</b>所需的字符数多于 places 指定的字符，它将生成一个错误。 </para>
          <para>如果 places 不是整数，则将被截尾取整。</para>
          <para>如果 places 为非数值型，<b>则 Bin2Oct</b>将生成一个错误。 </para>
          <para>如果 places 为负数，<b>则 Bin2Oct</b>将生成一个错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist">
      <MemberSignature Language="C#" Value="public double Binom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16870)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number_s-试验成功的次数。</param>
        <param name="Arg2">Trials-独立试验的次数。</param>
        <param name="Arg3">Probability_s-每次试验成功的概率。</param>
        <param name="Arg4">Cumulative-决定函数的形式一个逻辑值。 如果累积为<b>True</b>，则<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />方法返回累积分布函数，它是在大多数 number_s 成功; 有的概率如果<b>False</b>，则将返回概率密度函数的即有 number_s 成功的概率。</param>
        <summary>返回一元二项式分布的概率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Binom_Dist</b>方法中固定数量的测试或试用版，问题时使用任何试验的结果是仅成功或失败，当试验是独立的并且整个试验成功的概率时。 例如，则<b>Binom_Dist</b>方法可以计算两个出生下面的三个孩子是男的概率。 </para>
          <list type="bullet">
            <item>
              <description>Number_s 和 trials 将被截尾取整。</description>
            </item>
            <item>
              <description>如果 number_s、 trials 或 probability_s 为非数值型，则<b>Binom_Dist</b>方法将生成一个错误。 </description>
            </item>
            <item>
              <description>如果 number_s &lt; 0 或 number_s &gt; trials，则<b>Binom_Dist</b>方法将生成一个错误。 </description>
            </item>
            <item>
              <description>如果 probability_s &lt; 0 或 probability_s &gt; 1，则<b>Binom_Dist</b>方法将生成一个错误。 二项式概率密度函数的计算公式为： 

 </description>
            </item>
          </list>
          <para>其中：</para>
          <para>图 2： 等式</para>
          <para></para>
          <para></para>
          <para>COMBIN(n,x)。</para>
          <para>累积二项式分布是：</para>
          <para>图 3： 累积二项式分布</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist_Range">
      <MemberSignature Language="C#" Value="public double Binom_Dist_Range (double Arg1, double Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist_Range([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist_Range(System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist_Range (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16958)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">独立试验的次数。</param>
        <param name="Arg2">每次试验成功的概率。</param>
        <param name="Arg3">试验成功的数。</param>
        <param name="Arg4">如果提供，此函数返回试验成功的次数应介于 Arg3 和 Arg4 的概率。</param>
        <summary>返回试用结果使用二项式分布的概率。</summary>
        <returns>双精度数</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Inv">
      <MemberSignature Language="C#" Value="public double Binom_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16871)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Trials-贝努利试验次数。</param>
        <param name="Arg2">Probability_s-每次试验成功的概率。</param>
        <param name="Arg3">Alpha-临界值。</param>
        <summary>返回一元二项式概率分布的反函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 Trials、 Probability_s 或 Alpha 为非数值型，则<b>Binom_Inv</b>方法将生成一个错误。 </para>
          <para>如果 Trials 不是整数，则截尾取整。</para>
          <para>如果 Trials &lt; 0，则<b>Binom_Inv</b>方法将生成一个错误。 </para>
          <para>如果 Probability_s &lt; 0 或 Probability_s &gt; 1，则<b>Binom_Inv</b>方法将生成一个错误。 </para>
          <para>如果 Alpha &lt; 0 或 Alpha &gt; 1，则<b>Binom_Inv</b>方法将生成一个错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BinomDist">
      <MemberSignature Language="C#" Value="public double BinomDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BinomDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BinomDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16657)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">试验成功的数。</param>
        <param name="Arg2">独立试验的次数。</param>
        <param name="Arg3">每次试验成功的概率。</param>
        <param name="Arg4">一个逻辑值，该值决定函数的形式。 如果累积为<b>true</b>，则<b>BinomDist</b>返回累积分布函数，它是最 number_s 成功; 的概率如果<b>false</b>，则将返回概率密度函数的即有 number_s 成功的概率。</param>
        <summary>返回一元二项式分布的概率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Binomdist 固定数量的测试或试用版，任何试验的结果仅成功或失败，当试验是独立的并且时是整个试验成功的概率。</b> 例如，<b>则 BinomDist</b>可以计算两个出生下面的三个孩子是男的概率。 </para>
          <para>Number_s 和 trials 将被截尾取整。</para>
          <para>如果 number_s、 trials 或 probability_s 为非数值型，<b>则 BinomDist</b>将生成一个错误。 </para>
          <para>如果 number_s &lt; 0 或 number_s &gt; trials，<b>则 BinomDist</b>将生成一个错误。 </para>
          <para>如果 probability_s &lt; 0 或 probability_s &gt; 1，<b>则 BinomDist</b>将生成一个错误。 </para>
          <para>二项式概率密度函数的计算公式为： 

 </para>
          <para>图 1： 二项式概率密度函数</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>图 2： 等式</para>
          <para></para>
          <para></para>
          <para>COMBIN(n,x)。</para>
          <para>累积二项式分布是：</para>
          <para>图 3： 累积二项式分布</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitand">
      <MemberSignature Language="C#" Value="public double Bitand (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitand([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitand(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitand (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitand(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16946)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">要计算的十进制表示形式的二进制数。</param>
        <param name="Arg2">要计算的十进制表示形式的二进制数。</param>
        <summary>返回两个数字或按位和。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitlshift">
      <MemberSignature Language="C#" Value="public double Bitlshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitlshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitlshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitlshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitlshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16949)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">要计算的十进制表示形式的二进制数。</param>
        <param name="Arg2">所需 shift Arg1 位数向左。</param>
        <summary>返回值由 shift_amount 位格向左移动。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitor">
      <MemberSignature Language="C#" Value="public double Bitor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16947)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">要计算的十进制表示形式的二进制数。</param>
        <param name="Arg2">要计算的十进制表示形式的二进制数。</param>
        <summary>返回 2 号码按位 OR。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitrshift">
      <MemberSignature Language="C#" Value="public double Bitrshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitrshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitrshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitrshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitrshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16950)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">要计算的十进制表示形式的二进制数。</param>
        <param name="Arg2">您想要 shift Arg1 右位数。</param>
        <summary>返回值右移 shift_amount 位。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitxor">
      <MemberSignature Language="C#" Value="public double Bitxor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitxor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitxor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitxor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitxor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16948)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">要计算的十进制表示形式的二进制数。</param>
        <param name="Arg2">要计算的十进制表示形式的二进制数。</param>
        <summary>返回两个数字的按位独占或者。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public double Ceiling (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ceiling(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16672)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要舍入的值。</param>
        <param name="Arg2">Significance - 用以进行舍入计算的倍数。</param>
        <summary>返回向上舍入（远离零）到最接近的 significance 的倍数的 number。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" />方法。</para>
          <para>例如，如果要避免在价格中使用“分”，而产品价格为 ￥4.42, 那么可使用公式 Ceiling(4.42,0.05) 将价格进位到最近的“角”。</para>
          <para>如果任一参数为非数值，<b>Ceiling</b> 将生成错误。</para>
          <para>不论 number 的符号如何，向远离零的方向调整时，值都会向上舍入。如果 number 正好是 significance 的倍数，则无需进行任何舍入处理。</para>
          <para>如果 number 和 significance 的符号不同，则 <b>Ceiling</b> 将生成错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Math">
      <MemberSignature Language="C#" Value="public double Ceiling_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16975)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要进行舍入的值。</param>
        <param name="Arg2">多个要进行舍入到。</param>
        <param name="Arg3">当给定和非零值时，此函数将远离零舍入。</param>
        <summary>向上、 最接近的整数或最接近 significance 的倍数，则舍入数字。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Precise">
      <MemberSignature Language="C#" Value="public double Ceiling_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16930)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要舍入的值。</param>
        <param name="Arg2">Significance - 用以进行舍入计算的倍数。</param>
        <summary>返回舍入到最接近的有效位倍数的指定数字。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>例如，如果要避免在价格中使用“分”，而产品价格为 ￥4.42, 那么可使用公式 Ceiling(4.42,0.05) 将价格进位到最近的“角”。</para>
          <para>根据 number 和 significance 参数的符号，<b>Ceiling_Precise</b> 方法离零舍入或向零舍入。</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>向零舍入。</description>
            </item>
            <item>
              <term>+/+</term>
              <description>离零舍入。</description>
            </item>
            <item>
              <term>-/+</term>
              <description>向零舍入。</description>
            </item>
            <item>
              <term>+/-</term>
              <description>离零舍入。</description>
            </item>
          </list>
          <para>如果任一参数为非数值，<b>Ceiling_Precise</b> 将生成错误。</para>
          <para>如果 number 正好是 significance 的倍数，则无需进行任何舍入处理。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiDist">
      <MemberSignature Language="C#" Value="public double ChiDist (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiDist([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiDist (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiDist(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16658)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">用来计算分布的值。</param>
        <param name="Arg2">自由度数。</param>
        <summary>返回 χ2 分布的单尾概率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" />方法。</para>
          <para>Χ2 分布相关联 χ2 测试。 使用 χ2 检验可以比较观察值和期望值。</para>
          <para>例如，某项遗传学实验可能假设下一代植物将呈现出某一组颜色。通过对观察到的结果和所期望的结果进行比较，可以判定初始假设是否有效。</para>
          <para>如果任一参数为非数值型，<b>则 ChiDist</b>将生成一个错误。 </para>
          <para>如果 x 为负数，<b>则 ChiDist</b>将生成一个错误。 </para>
          <para>如果 degrees_freedom 不是整数，则将被截尾取整。</para>
          <para>如果 degrees_freedom &lt; 1 或 degrees_freedom &gt; 10 ^10，<b>则 ChiDist</b>将生成一个错误。 </para>
          <para>
            <b>Chidist 按 ChiDist</b> = P (X&gt;x)，其中 X 为 χ2 随机变量。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiInv">
      <MemberSignature Language="C#" Value="public double ChiInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16659)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">与 χ2 分布相关的概率。</param>
        <param name="Arg2">自由度数。</param>
        <summary>返回 χ2 分布的单尾概率的反函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" />方法。</para>
          <para>如果 probability = ChiDist(x,...)，则 ChiInv(probability,...) = x。使用此函数可对观测到的结果和所期望的结果进行比较，以判定初始假设是否有效。</para>
          <para>如果任一参数为非数值型，<b>则 ChiInv</b>将生成一个错误。 </para>
          <para>如果 probability &lt; 0 或 probability &gt; 1，<b>则 ChiInv</b>将生成一个错误。 </para>
          <para>如果 degrees_freedom 不是整数，则将被截尾取整。</para>
          <para>如果 degrees_freedom &lt; 1 或 degrees_freedom ≥ 10 ^10，<b>则 ChiInv</b>将生成一个错误。</para>
          <para>概率给定一个值，<b>则 ChiInv</b>搜寻 x 满足该值，则 ChiDist （x，degrees_freedom） = 概率。 因此，<b>则 ChiInv</b>精度取决精度<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" />。 <b>ChiInv</b>使用迭代的搜索技术。 如果搜索不收敛 64 次迭代后，该函数将生成一个错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16911)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X-要用于计算分布的值。</param>
        <param name="Arg2">Deg_freedom-自由度数。</param>
        <param name="Arg3">Cumulative-决定函数的形式一个逻辑值。 如果累积为<b>true</b>时，则 chisq_dist 将返回累积分布函数;如果<b>false</b>，则将返回概率密度函数。</param>
        <summary>返回 χ2 分布。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，则 CHISQ_DIST 将返回错误值 #VALUE!。 </para>
          <para>如果 x 为负数，则 CHISQ_DIST 将返回错误值 #NUM!。 </para>
          <para>如果 deg_freedom 不是整数，则将被截尾取整。 </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16912)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">用来计算分布的值。</param>
        <param name="Arg2">自由度数。</param>
        <summary>返回 χ2 分布的右尾概率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Χ2 分布相关联 χ2 测试。 使用 χ2 检验可以比较观察值和期望值。</para>
          <para>例如，某项遗传学实验可能假设下一代植物将呈现出某一组颜色。通过对观察到的结果和所期望的结果进行比较，可以判定初始假设是否有效。</para>
          <para>如果任一参数为非数值型，<b>则 ChiSq_Dist_RT</b>将生成一个错误。 </para>
          <para>如果 x 为负数，<b>则 ChiSq_Dist_RT</b>将生成一个错误。 </para>
          <para>如果 degrees_freedom 不是整数，则将被截尾取整。</para>
          <para>如果 degrees_freedom &lt; 1 或 degrees_freedom &gt; 10 ^10，<b>则 ChiSq_Dist_RT</b>将生成一个错误。 <b>ChiSq_Dist_RT</b>的计算公式为 ChiSq_Dist_RT = P (X&gt;x)，其中 X 为 χ2 随机变量。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16913)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probability-与 χ 2 分布相关的概率。</param>
        <param name="Arg2">Deg_freedom-自由度数。</param>
        <summary>返回 χ2 分布的左尾概率的反函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 chisq_inv 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 probability &lt; 0 或 probability &gt; 1，<b>则 chisq_inv 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 deg_freedom 不是整数，则将被截尾取整。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16914)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">与 χ2 分布相关的概率。</param>
        <param name="Arg2">自由度数。</param>
        <summary>返回 χ2 分布的右尾概率的反函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 probability = ChiSq_Dist_RT(x,...)，则 ChiSq_Inv_RT(probability,...) = x。 使用此函数来确定是否有效初始假设比较观察的结果和期望值。</para>
          <para>如果任一参数为非数值型，<b>则 ChiSq_Inv_RT</b>将生成一个错误。 </para>
          <para>如果 probability &lt; 0 或 probability &gt; 1，<b>则 ChiSq_Inv_RT</b>将生成一个错误。 </para>
          <para>如果 degrees_freedom 不是整数，则将被截尾取整。</para>
          <para>如果 degrees_freedom &lt; 1 或 degrees_freedom ≥ 10 ^10，<b>则 ChiSq_Inv_RT</b>将生成一个错误。</para>
          <para>概率给定一个值，<b>则 ChiSq_Inv_RT</b>搜寻 x 满足该值 （x，degrees_freedom），则 ChiSq_Dist_RT = 概率。 因此，<b>则 ChiSq_Inv_RT</b>精度取决精度<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />。 <b>ChiSq_Inv_RT</b>使用迭代的搜索技术。 如果搜索不收敛 64 次迭代后，该函数将生成一个错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Test">
      <MemberSignature Language="C#" Value="public double ChiSq_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16874)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">包含观察值的数据区域，将根据期望值检验这些观察值。</param>
        <param name="Arg2">包含行汇总和列汇总的乘积与总计值之比率的数据区域。</param>
        <summary>返回独立性检验值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>ChiSq_Test</b>返回 χ 2 (χ2) 分布统计值和相应的自由度数从。 您可以使用 χ2 测试确定假设值是否被实验所证实。</para>
          <para>如果 actual_range 和 expected_range 数据点个数不同，则<b>ChiSq_Test</b>将返回错误值 # n/A。 </para>
          <para>Χ2 检验首先计算使用公式的 χ2 统计信息： </para>
          <para>X 平方检验图 1： 公式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <list type="bullet">
            <item>
              <description>Aij = 第 i 行，第 j 列中的实际频率</description>
            </item>
            <item>
              <description>Eij = 第 i 行，第 j 列中的期望的频率</description>
            </item>
            <item>
              <description>r = 行数</description>
            </item>
            <item>
              <description>c = 列数</description>
            </item>
          </list>
          <para>Χ2 的低值是独立的指示器。 从公式看出，χ2 总是正数或 0，并且为 0，仅当 Aij 时，为 = Eij j。</para>
          <para>
            <b>ChiSq_Test</b>返回在独立的假设下无法的可能性发生 χ2 统计至少高达值的值计算由上面的公式的概率。 在计算此概率<b>ChiSq_Test</b>使用与适当数量的自由度数，df χ2 分布。 如果 r &gt; 1 和 c &gt; 1，则 df = (r-1)(c-1)。 如果 r = 1 和 c &gt; 1，则 df = c-1 或 r &gt; 1 和 c = 1，则 df = r-1。 r = c = 1 不允许和将生成一个错误。</para>
          <para>Eij 的不太小时，可以最适合使用<b>ChiSq_Test</b> 。 某些统计人员建议每个 Eij 应该大于或等于 5。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiTest">
      <MemberSignature Language="C#" Value="public double ChiTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16690)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">包含观察值的数据区域，将根据期望值检验这些观察值。</param>
        <param name="Arg2">ImportantThis 函数已替换一个或多个新函数的可能提供提高的准确性，并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" />方法。 包含行汇总和列汇总的乘积与总计值之比率的数据区域。</param>
        <summary>返回独立性检验值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>ChiTest</b>返回 χ 2 (χ2) 分布统计值和相应的自由度数从。 您可以使用 χ2 测试确定假设值是否被实验所证实。</para>
          <para>如果 actual_range 和 expected_range 数据点个数不同，则<b>ChiTest</b>将返回错误值 # n/A。 </para>
          <para>Χ2 检验首先计算使用公式的 χ2 统计信息： </para>
          <para>X 平方检验图 1： 公式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <list type="bullet">
            <item>
              <description>Aij = 第 i 行，第 j 列中的实际频率</description>
            </item>
            <item>
              <description>Eij = 第 i 行，第 j 列中的期望的频率</description>
            </item>
            <item>
              <description>r = 行数</description>
            </item>
            <item>
              <description>c = 列数</description>
            </item>
          </list>
          <para></para>
          <para>Χ2 的低值是独立的指示器。 从公式看出，χ2 总是正数或 0，并且为 0，仅当 Aij 时，为 = Eij j。</para>
          <para>
            <b>ChiTest</b>返回在独立的假设下无法的可能性发生 χ2 统计至少高达值的值计算由上面的公式的概率。 在计算此概率<b>ChiTest</b>使用与适当数量的自由度数，df χ2 分布。 如果 r &gt; 1 和 c &gt; 1，则 df = (r-1)(c-1)。 如果 r = 1 和 c &gt; 1，则 df = c-1 或 r &gt; 1 和 c = 1，则 df = r-1。 r = c = 1 不允许和将生成一个错误。</para>
          <para>Eij 的不太小时，可以最适合使用<b>ChiTest</b> 。 某些统计人员建议每个 Eij 应该大于或等于 5。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public object Choose (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Choose([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Choose(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16484)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">指定所选定的值参数。Arg1 必须为 1 到 29 之间的数字，或者是包含 1 到 29 之间的一个数字的公式，或是对包含 1 到 29 之间的一个数字的单元格的引用。</param>
        <param name="Arg2">1 到 29 个值参数，Choose 将基于 Arg1 从中选择一个值或要执行的一项操作。这些参数可以为数字、单元格引用、定义的名称、公式、函数或文本。</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>使用<paramref name="Arg1" />作为索引从值参数列表中的返回值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果<paramref name="Arg1" />1，则<b>Choose</b>将返回 value1;如果为 2，则<b>Choose</b>将返回 value2;等等。 </para>
          <para>如果<paramref name="Arg1" />小于 1 或大于数的列表中的最后一个值，则<b>Choose</b>将生成一个错误。 </para>
          <para>如果<paramref name="Arg1" />是一个分数，在使用前将被截断为最小整数。 </para>
          <para>如果<paramref name="Arg1" />是一个数组时计算<b>Choose</b>的, 评估每个值。 </para>
          <para>
            <b>选择</b>的值参数可以为单个值或区域引用。 例如，公式：</para>
          <para>= 相加 (选择 (2，A1:A10，B1:B10，C1:C10))</para>
          <para>计算结果为：</para>
          <para>=SUM(B1:B10)</para>
          <para>该函数返回基于 B1:B10 范围中的值的值。</para>
          <para>
            <b>选择</b>函数返回引用 B1:B10 首先，计算。 SUM 函数然后计算作为其参数使用 B1:B10，<b>选择</b>函数的结果。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clean">
      <MemberSignature Language="C#" Value="public string Clean (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Clean([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Clean (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Clean(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16546)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">要从中删除非打印字符的任何工作表信息。</param>
        <summary>删除文本中的所有非打印字符。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<b>Clean</b>从其他应用程序导入包含与您的操作系统不打印字符的文本。 例如，您可以使用<b>Clean</b>删除某些低级计算机代码的开头和末尾数据文件通常、 不能打印。</para>
          <para>
            <b>重要说明</b>： 已设计<b>清理</b>函数从文本的 7 位 ASCII 码 （值 0 到 31） 中删除前 32 的非打印字符。 在 Unicode 字符集，有附加的非打印字符 （值 127、 129、 141、 143、 144 和 157）。 <b>清理</b>函数本身不删除这些额外的非打印字符。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Combin">
      <MemberSignature Language="C#" Value="public double Combin (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combin([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combin(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combin (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combin(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16660)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">项目数。</param>
        <param name="Arg2">每个组合中的项目数。</param>
        <summary>返回给定数量的项目组合数。 使用<b>Combin</b>确定可能的总的给定项目数的组数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>数值参数将被截尾取整。</para>
          <para>如果任一参数为非数值型，<b>则 Combin</b>将生成一个错误。 </para>
          <para>如果 number &lt; 0，number_chosen &lt; 0 或号码&lt;number_chosen，<b>则 Combin</b>将生成一个错误。 </para>
          <para>组合为任意项目集或项目子集，而不论其内部顺序如何。组合与排列不同，排列与内部顺序有关。</para>
          <para>组合数的计算公式如下，其中 number = n 而 number_chosen = k：

 </para>
          <para>图 1： 组合数</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>图 2： 等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Combina">
      <MemberSignature Language="C#" Value="public double Combina (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combina([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combina(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combina (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combina(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16952)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">总项目数。</param>
        <param name="Arg2">每个组合中的项目数。</param>
        <summary>返回组合用重复给定数量的项目数。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complex">
      <MemberSignature Language="C#" Value="public string Complex (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Complex([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Complex (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16795)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">复数的实系数。</param>
        <param name="Arg2">复数的虚系数。</param>
        <param name="Arg3">复数中虚部的后缀。如果省略，则假定后缀为“i”。</param>
        <summary>将实系数及虚系数转换为 x + yi 或 x + yj 形式的复数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>所有复数函数均接受“i”和“j”作为后缀，但不接受“I”和“J”。使用大写将生成一个错误。接受两个或更多个复数的所有函数均要求所有后缀一致。</para>
          <para>如果<paramref name="Arg1" />为非数值型，<b>复杂</b>将生成一个错误。 </para>
          <para>如果<paramref name="Arg2" />为非数值型，<b>复杂</b>将生成一个错误。 </para>
          <para>如果<paramref name="Arg3" />是"i"和"j"，都不<b>复杂</b>将生成一个错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public double Confidence (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16661)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">用于计算置信度的显著性水平。置信度等于 100*(1 - alpha)%，亦即，如果 alpha 为 0.05，则置信度为 95%。</param>
        <param name="Arg2">数据区域的总体标准偏差，假定为已知。</param>
        <param name="Arg3">样本大小。</param>
        <summary>返回一个值，可使用该值构造总体平均值的置信区间。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" />方法。</para>
          <para>置信区间是一系列值。 您样本平均值，x，是在此区域的中央，范围是 x ±<b>可信度</b>。 例如，如果 x 为样本平均值产品通过邮件订购的传递时间，x ±<b>可信度</b>为总体平均值的区域。 对于任何总体平均值 μ0，在此区域内，获取样本平均值从 μ0 比 x 的概率大于 alpha;对于任何总体平均值 μ0，不在此范围内，获取样本平均值从 μ0 比 x 的概率小于 alpha。 换句话说，假定，我们使用 x、 standard_dev 和大小来构造双尾处的假设总体平均值，而 μ0 的重要性级别 alpha 测试。 然后我们将不会否决该假设; 如果 μ0 正在置信区间中，如果 μ0 不置信区间中将否决该假设。 置信区间不允许我们可以推断存在概率 1 – alpha 下一份包裹需要置信区间中的传递时间。 </para>
          <para>如果任一参数为非数值型，则<b>Confidence</b>将生成一个错误。 </para>
          <para>如果 alpha ≤ 0 或 alpha ≥ 1，则<b>Confidence</b>将生成一个错误。 </para>
          <para>如果 standard_dev ≤ 0，则<b>Confidence</b>将生成一个错误。 </para>
          <para>如果 size 不是整数，则将被截尾取整。</para>
          <para>如果 size &lt; 1，则<b>Confidence</b>将生成一个错误。 </para>
          <para>如果假定 alpha 等于 0.05，则需要计算等于 (1 - alpha) 或 95% 的标准正态分布曲线之下的面积。此面积值为 ±1.96。因此置信区间为： 

</para>
          <para>图 1： 置信区间</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_Norm">
      <MemberSignature Language="C#" Value="public double Confidence_Norm (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_Norm([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_Norm (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_Norm(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16872)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">用于计算置信度的显著性水平。置信度等于 100*(1 - alpha)%，亦即，如果 alpha 为 0.05，则置信度为 95%。</param>
        <param name="Arg2">数据区域的总体标准偏差，假定为已知。</param>
        <param name="Arg3">样本大小。</param>
        <summary>返回一个值，可使用该值构造总体平均值的置信区间。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>置信区间是一系列值。 您样本平均值，x，是在此区域的中央，范围是 x ± <b>Confidence_Norm</b>。 例如，如果 x 为样本平均值产品通过邮件订购的传递时间，x ±<b>则 Confidence_Norm</b>将为总体平均值的区域。 对于任何总体平均值 μ0，在此区域内，获取样本平均值从 μ0 比 x 的概率大于 alpha;对于任何总体平均值 μ0，不在此范围内，获取样本平均值从 μ0 比 x 的概率小于 alpha。 换句话说，假定的 x、 standard_dev，并使用大小来构造双尾处的假设总体平均值，而 μ0 的重要性级别 alpha 测试。 然后我们将不会否决该假设; 如果 μ0 正在置信区间中，如果 μ0 不置信区间中将否决该假设。 置信区间不允许推断存在概率 1 – alpha 的下一个程序包，将采用置信区间中的传递时间。</para>
          <para>如果任一参数为非数值型，<b>则 Confidence_Norm</b>将生成一个错误。 </para>
          <para>如果 alpha ≤ 0 或 alpha ≥ 1，<b>则 Confidence_Norm</b>将生成一个错误。 </para>
          <para>如果 standard_dev ≤ 0，<b>则 Confidence_Norm</b>将生成一个错误。 </para>
          <para>如果 size 不是整数，则将被截尾取整。</para>
          <para>如果 size &lt; 1，<b>则 Confidence_Norm</b>将生成一个错误。 </para>
          <para>如果假定 alpha 等于 0.05，则需要计算等于 (1 - alpha) 或 95% 的标准正态分布曲线下的面积。此面积值为 ±1.96。因此置信区间为： 

</para>
          <para>图 1： 置信区间</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_T">
      <MemberSignature Language="C#" Value="public double Confidence_T (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_T([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_T (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_T(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16873)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Alpha-用来计算可信度级别的重要性级别。 可信度等于 100 *(1-alpha) %，或 alpha 为 0.05 换句话说，指示 95%可信度。</param>
        <param name="Arg2">Standard_dev-数据区域的总体标准偏差，假定为已知。</param>
        <param name="Arg3">大小-样本大小。</param>
        <summary>使用学生的分布返回总体平均值的置信区间。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 confidence_t 将</b>返回 #VALUE ！。 错误值。 </para>
          <para>如果 alpha ≤ 0 或 alpha ≥ 1，<b>则 confidence_t 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 standard_dev ≤ 0，<b>则 confidence_t 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 size 不是整数，则将被截尾取整。</para>
          <para>如果 size 等于 1，<b>则 confidence_t 将</b>返回 #DIV/0 ！ 错误值。 </para>
          <para>如果 size 等于 1，<b>则 confidence_t 将</b>返回 #DIV/0 ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public double Convert (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Convert([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Convert(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Convert (Arg1 As Object, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Convert(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16852)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要转换的以 from_units 为单位的值。</param>
        <param name="Arg2">数字的单位。</param>
        <param name="Arg3">结果单位。 <b>转换</b>from_unit 和 to_unit 之前在下面的备注部分中列出了接受 （在引号内） 的以下文本值。</param>
        <summary>将度量系统的数字转换为另一个。 例如，<b>转换</b>可以翻译以表格，以千米的距离英里的距离表。</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>克</term>
              <description>"g"</description>
            </item>
            <item>
              <term>斯勒格</term>
              <description>"sg"</description>
            </item>
            <item>
              <term>磅（常衡制）</term>
              <description>"lbm"</description>
            </item>
            <item>
              <term>U（原子质量单位）</term>
              <description>"u"</description>
            </item>
            <item>
              <term>盎司（常衡制）</term>
              <description>"ozm"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>米</term>
              <description>"m"</description>
            </item>
            <item>
              <term>法定英里</term>
              <description>"mi"</description>
            </item>
            <item>
              <term>海里</term>
              <description>"Nmi"</description>
            </item>
            <item>
              <term>英寸</term>
              <description>"in"</description>
            </item>
            <item>
              <term>英尺</term>
              <description>"ft"</description>
            </item>
            <item>
              <term>码</term>
              <description>"yd"</description>
            </item>
            <item>
              <term>埃</term>
              <description>"ang"</description>
            </item>
            <item>
              <term>皮卡（1/72 英寸）</term>
              <description>"Pica"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>年</term>
              <description>"yr"</description>
            </item>
            <item>
              <term>日</term>
              <description>"day"</description>
            </item>
            <item>
              <term>时</term>
              <description>"hr"</description>
            </item>
            <item>
              <term>分</term>
              <description>"mn"</description>
            </item>
            <item>
              <term>秒</term>
              <description>"sec"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>帕斯卡</term>
              <description>"Pa"（或 "p"）</description>
            </item>
            <item>
              <term>大气压</term>
              <description>"atm"（或 "at"）</description>
            </item>
            <item>
              <term>毫米汞柱</term>
              <description>"毫米汞柱"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>牛顿</term>
              <description>"N"</description>
            </item>
            <item>
              <term>达因</term>
              <description>"dyn"（或 "dy"）</description>
            </item>
            <item>
              <term>磅力</term>
              <description>"lbf"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>焦耳</term>
              <description>"J"</description>
            </item>
            <item>
              <term>尔格</term>
              <description>"e"</description>
            </item>
            <item>
              <term>热力学卡</term>
              <description>"c"</description>
            </item>
            <item>
              <term>IT 卡</term>
              <description>"cal"</description>
            </item>
            <item>
              <term>电子伏</term>
              <description>"eV"（或 "ev"）</description>
            </item>
            <item>
              <term>马力-小时</term>
              <description>"HPh"（或 "hh"）</description>
            </item>
            <item>
              <term>瓦特-小时</term>
              <description>"Wh"（或者"wh"）</description>
            </item>
            <item>
              <term>英尺磅</term>
              <description>"flb"</description>
            </item>
            <item>
              <term>BTU</term>
              <description>"BTU"（或 "btu"）</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>马力</term>
              <description>"HP"（或 "h"）</description>
            </item>
            <item>
              <term>瓦特</term>
              <description>"W"（或 "w")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>特斯拉</term>
              <description>"T"</description>
            </item>
            <item>
              <term>高斯</term>
              <description>"ga"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>摄氏度</term>
              <description>"C"（或 "cel"）</description>
            </item>
            <item>
              <term>华氏度</term>
              <description>"F"（或 "fah"）</description>
            </item>
            <item>
              <term>开尔文</term>
              <description>"K"（或 "kel"）</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>茶匙</term>
              <description>"tsp"</description>
            </item>
            <item>
              <term>汤匙</term>
              <description>"tbs"</description>
            </item>
            <item>
              <term>液量盎司</term>
              <description>"oz"</description>
            </item>
            <item>
              <term>杯</term>
              <description>"cup"</description>
            </item>
            <item>
              <term>U.S. 品脱</term>
              <description>"pt"（或 "us_pt"）</description>
            </item>
            <item>
              <term>U.K. 品脱</term>
              <description>"uk_pt"</description>
            </item>
            <item>
              <term>夸脱</term>
              <description>"qt"</description>
            </item>
            <item>
              <term>加仑</term>
              <description>"gal"</description>
            </item>
            <item>
              <term>升</term>
              <description>"l"（或 "lt"）</description>
            </item>
          </list>
          <para>下列缩写的单位前缀可以加在任何公制单位 from_unit 或 to_unit 之前。</para>
          <list type="table">
            <item>
              <term>exa</term>
              <description>1E+18</description>
              <description>"E"</description>
            </item>
            <item>
              <term>peta</term>
              <description>1E+15</description>
              <description>"P"</description>
            </item>
            <item>
              <term>tera</term>
              <description>1E+12</description>
              <description>"T"</description>
            </item>
            <item>
              <term>giga</term>
              <description>1E+09</description>
              <description>"G"</description>
            </item>
            <item>
              <term>mega</term>
              <description>1E+06</description>
              <description>"M"</description>
            </item>
            <item>
              <term>kilo</term>
              <description>1E+03</description>
              <description>"k"</description>
            </item>
            <item>
              <term>hecto</term>
              <description>1E+02</description>
              <description>"h"</description>
            </item>
            <item>
              <term>dekao</term>
              <description>1E+01</description>
              <description>"e"</description>
            </item>
            <item>
              <term>deci</term>
              <description>1E-01</description>
              <description>"d"</description>
            </item>
            <item>
              <term>centi</term>
              <description>1E-02</description>
              <description>"c"</description>
            </item>
            <item>
              <term>milli</term>
              <description>1E-03</description>
              <description>"m"</description>
            </item>
            <item>
              <term>micro</term>
              <description>1E-06</description>
              <description>"u"</description>
            </item>
            <item>
              <term>nano</term>
              <description>1E-09</description>
              <description>"n"</description>
            </item>
            <item>
              <term>pico</term>
              <description>1E-12</description>
              <description>"p"</description>
            </item>
            <item>
              <term>femto</term>
              <description>1E-15</description>
              <description>"f"</description>
            </item>
            <item>
              <term>atto</term>
              <description>1E-18</description>
              <description>"a"</description>
            </item>
          </list>
          <para>如果输入的数据类型不正确，则<b>转换</b>将生成一个错误。 </para>
          <para>如果单位不存在，则<b>Convert</b>将生成一个错误。 </para>
          <para>如果单位不支持缩写的单位前缀，则<b>Convert</b>将生成一个错误。 </para>
          <para>如果单位属于不同的组，则<b>Convert</b>将生成一个错误。 </para>
          <para>单位名称和前缀区分大小写。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Correl">
      <MemberSignature Language="C#" Value="public double Correl (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Correl([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Correl(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Correl (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Correl(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16691)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">一个值单元格区域。</param>
        <param name="Arg2">另一个值单元格区域。</param>
        <summary>返回的相关系数的<paramref name="Arg1" />和<paramref name="Arg2" />单元格区域。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用相关系数可以确定两种属性之间的关系。例如，可以研究某地的平均温度和空调使用情况之间的关系。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果<paramref name="Arg1" />和<paramref name="Arg2" />其数据点的个数不同，<b>则 Correl</b>将生成一个错误。 </para>
          <para>如果任一<paramref name="Arg1" />或<paramref name="Arg2" />为空，或如果其值的 s （标准偏差） 等于零，<b>则 Correl</b>将生成一个错误。 </para>
          <para>相关系数的计算公式为：

</para>
          <para>图 1： 相关系数的等式</para>
          <para></para>
          <para></para>
          <para>其中 x 和 y 是样本平均值 Average(Arg1) 和 Average(Arg2)。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public double Cosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16614)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">要计算其双曲余弦值的任意实数。</param>
        <summary>返回数字的双曲余弦值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>双曲余弦值的计算公式为： </para>
          <para>图 1： 公式的双曲余弦值</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cot">
      <MemberSignature Language="C#" Value="public double Cot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16934)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">角度的弧度您希望余切。</param>
        <summary>返回角度的余切。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coth">
      <MemberSignature Language="C#" Value="public double Coth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Coth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Coth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Coth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Coth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16935)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">要计算其双曲余切弧度角。</param>
        <summary>返回数字的双曲余切。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public double Count (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Count([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Count (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16384)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">可以包含或引用各种不同类型的数据的 1 到 30 个参数，但只有数字才计算在内。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>计算包含数字的单元格的个数，以及参数列表中的数字的个数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<b>Count</b>可以获取区域或数字数组中的数字字段中的条目数。 </para>
          <para>作为数字、日期或用文本表示的数字的参数会被计算在内。</para>
          <para>直接键入参数列表的逻辑值和数字的文本表示也包括在内。</para>
          <para>如果参数为错误值或无法转换为数字的文本，则将被忽略。</para>
          <para>如果参数为数组或引用，则只有该数组或引用中的数字将被计算在内。数组或引用中的空单元格、逻辑值、文本或错误值将被忽略。</para>
          <para>如果您想统计逻辑值、 文本或错误值，使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />函数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountA">
      <MemberSignature Language="C#" Value="public double CountA (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountA([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountA (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16553)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">代表要计算在内的值的 1 到 30 个参数。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>计算非空单元格及参数列表中值的个数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<b>CountA</b>可以计算区域或数组中包含数据的单元格的数目。</para>
          <para>值可以是任何信息类型，包括错误值和空文本 ("")，但不包括空单元格。</para>
          <para>如果参数为数组或引用，则只会使用该数组或引用中的值。数组或引用中的空单元格和文本值将被忽略。</para>
          <para>如果您不需要统计逻辑值、 文本或错误值，请使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />函数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountBlank">
      <MemberSignature Language="C#" Value="public double CountBlank (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountBlank([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountBlank(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountBlank (Arg1 As Range) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountBlank(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16731)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">要计算其中的空白单元格个数的区域。</param>
        <summary>计算指定单元格区域中空单元格的个数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>即使单元格中含有返回值为空文本 ("") 的公式，该单元格也会被计算在内，但包含零值的单元格不被计算在内。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIf">
      <MemberSignature Language="C#" Value="public double CountIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIf(Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIf (Arg1 As Range, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountIf(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16730)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要计算其中满足条件的单元格个数的单元格区域。</param>
        <param name="Arg2">数字、 表达式、 单元格的引用或定义的单元格将被计算在内的文本的窗体中的条件。 例如，条件可表达为 32，"32"，"&gt;32"、"apples"或 B4。</param>
        <summary>计算区域中满足给定条件的单元格的个数。</summary>
        <returns>返回<see cref="T:System.Double" />。</returns>
        <remarks>
          <para>可以在条件中使用通配符，包括问号 (?) 和星号 (*)。问号可匹配任意的单个字符；星号可匹配任意一串字符。如果要查找实际的问号或星号，则请在该字符前键入一个波形符 (~)。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIfs">
      <MemberSignature Language="C#" Value="public double CountIfs (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIfs(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIfs (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16865)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">在其中计算相关条件的一个或多个区域。</param>
        <param name="Arg2">一个或多个条件的数字、 表达式、 单元格引用或文本形式的定义的单元格将被计算在内。 例如，条件可表达为 32，"32"，"&gt;32"、"apples"或 B4。</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>计算区域中满足多个条件的单元格的个数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>仅在每个单元格中指定的对应条件都为 True 时，才会将区域内的每个单元格都计算在内。</para>
          <para>如果任一参数中的单元格为空单元格， <b>CountIfs</b>会将其作为 0 值。 </para>
          <para>可以在条件中使用通配符，包括问号 (?) 和星号 (*)。问号可匹配任意的单个字符；星号可匹配任意一串字符。如果要查找实际的问号或星号，则请在该字符前键入一个波形符 (~)。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDayBs">
      <MemberSignature Language="C#" Value="public double CoupDayBs (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDayBs([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDayBs(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDayBs (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16836)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">每年支付息票的次数。如果按年支付，frequency = 1；如果按半年期支付，frequency = 2；如果按季支付，frequency = 4。</param>
        <param name="Arg4">要使用的日计数基准类型。</param>
        <summary>返回从息票期开始到结算日的天数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>下表包含的值列表<paramref name="Arg4" />。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>结算日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，结算日为 2008 年 7 月 1 日，而到期日是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>所有参数都将被截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，<b>则 CoupDayBs</b>将生成一个错误。 </para>
          <para>如果 frequency 不为数字 1、 2 或 4，<b>则 CoupDayBs</b>将生成一个错误。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>则 CoupDayBs</b>将生成一个错误。 </para>
          <para>如果 settlement ≥ maturity，<b>则 CoupDayBs</b>将生成一个错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDays">
      <MemberSignature Language="C#" Value="public double CoupDays (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDays([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDays(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDays (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16837)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">每年支付息票的次数。如果按年支付，frequency = 1；如果按半年期支付，frequency = 2；如果按季支付，frequency = 4。</param>
        <param name="Arg4">要使用的日计数基准类型。</param>
        <summary>返回结算日所在的息票期的天数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <para>下表包含中使用的值<paramref name="Arg4" />。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>结算日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，结算日为 2008 年 7 月 1 日，而到期日是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>所有参数都将被截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，<b>则 CoupDays</b>将生成一个错误。 </para>
          <para>如果 frequency 不为数字 1、 2 或 4，<b>则 CoupDays</b>将生成一个错误。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>则 CoupDays</b>将生成一个错误。 </para>
          <para>如果 settlement ≥ maturity，<b>则 CoupDays</b>将生成一个错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDaysNc">
      <MemberSignature Language="C#" Value="public double CoupDaysNc (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDaysNc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDaysNc(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDaysNc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16838)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">每年支付息票的次数。如果按年支付，frequency = 1；如果按半年期支付，frequency = 2；如果按季支付，frequency = 4。</param>
        <param name="Arg4">要使用的日计数基准类型。</param>
        <summary>返回从结算日到下一个息票日之间的天数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <para>下表包含中使用的值<paramref name="Arg4" />。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>结算日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，结算日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>所有参数都将被截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，<b>则 CoupDaysNc</b>将生成一个错误。 </para>
          <para>如果 frequency 不为数字 1、 2 或 4，<b>则 CoupDaysNc</b>将生成一个错误。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>则 CoupDaysNc</b>将生成一个错误。 </para>
          <para>如果 settlement ≥ maturity，<b>则 CoupDaysNc</b>将生成一个错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNcd">
      <MemberSignature Language="C#" Value="public double CoupNcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16839)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">每年支付息票的次数。如果按年支付，frequency = 1；如果按半年期支付，frequency = 2；如果按季支付，frequency = 4。</param>
        <param name="Arg4">要使用的日计数基准类型。</param>
        <summary>返回一个代表结算日之后下一个息票日的数字。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <para>下表包含中使用的值<paramref name="Arg4" />。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>结算日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，结算日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>所有参数都将被截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，<b>则 CoupNcd</b>将生成一个错误。 </para>
          <para>如果 frequency 不为数字 1、 2 或 4，<b>则 CoupNcd</b>将生成一个错误。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>则 CoupNcd</b>将生成一个错误。 </para>
          <para>如果 settlement ≥ maturity，<b>则 CoupNcd</b>将生成一个错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNum">
      <MemberSignature Language="C#" Value="public double CoupNum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16840)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">每年支付息票的次数。如果按年支付，frequency = 1；如果按半年期支付，frequency = 2；如果按季支付，frequency = 4。</param>
        <param name="Arg4">要使用的日计数基准类型。</param>
        <summary>返回在结算日和到期日之间支付息票的次数，向上舍入到最接近的整数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <para>下表包含中使用的值<paramref name="Arg4" />。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>结算日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，结算日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>所有参数都将被截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，<b>则 CoupNum</b>将生成一个错误。 </para>
          <para>如果 frequency 不为数字 1、 2 或 4，<b>则 CoupNum</b>将生成一个错误。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>则 CoupNum</b>将生成一个错误。 </para>
          <para>如果 settlement ≥ maturity，<b>则 CoupNum</b>将生成一个错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupPcd">
      <MemberSignature Language="C#" Value="public double CoupPcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupPcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupPcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupPcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16841)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">每年支付息票的次数。如果按年支付，frequency = 1；如果按半年期支付，frequency = 2；如果按季支付，frequency = 4。</param>
        <param name="Arg4">要使用的日计数基准类型。</param>
        <summary>返回结算日之前的付息日。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <para>下表包含中使用的值<paramref name="Arg4" />。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>结算日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，结算日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>所有参数都将被截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，<b>则 CoupPcd</b>将生成一个错误。 </para>
          <para>如果 frequency 不为数字 1、 2 或 4，<b>则 CoupPcd</b>将生成一个错误。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>则 CoupPcd</b>将生成一个错误。 </para>
          <para>如果 settlement ≥ maturity，<b>则 CoupPcd</b>将生成一个错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Covar">
      <MemberSignature Language="C#" Value="public double Covar (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covar([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covar(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covar (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covar(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16692)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">第一个包含整数的单元格区域。</param>
        <param name="Arg2">第二个包含整数的单元格区域。</param>
        <summary>返回协方差，即每对数据点的偏差乘积的平均数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" />方法。</para>
          <para>使用协方差可以确定两个数据集之间的关系。例如，可利用它来检验收入与教育程度是否成正比。</para>
          <para>参数必须为数字，或者是包含数字的名称、数组或引用。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但包含零值的单元格将被计算在内。</para>
          <para>如果<paramref name="Arg1" />和<paramref name="Arg2" />个数不同的数据点，<b>则 Covar</b>将生成一个错误。 </para>
          <para>如果任一<paramref name="Arg1" />或<paramref name="Arg2" />为空，<b>则 Covar</b>将生成一个错误。 </para>
          <para>协方差的计算公式为： 

 </para>
          <para>图 1： 协方差等式</para>
          <para></para>
          <para></para>
          <para>其中 x 和 y 是样本平均值 AVERAGE(array1) 和 AVERAGE(array2)，n 是样本大小。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_P">
      <MemberSignature Language="C#" Value="public double Covariance_P (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_P([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_P (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_P(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16876)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">第一个包含整数的单元格区域。</param>
        <param name="Arg2">第二个包含整数的单元格区域。</param>
        <summary>返回总体协方差，即每对数据点的偏差乘积的平均数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Covariance_P</b>用于确定两个数据集之间的关系。 例如，您可以检查是否更多的收益附带教育程度。</para>
          <para>参数必须为数字，或者是包含数字的名称、数组或引用。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但包含零值的单元格将被计算在内。</para>
          <para>如果<paramref name="Arg1" />和<paramref name="Arg2" />个数不同的数据点，<b>则 Covariance_P</b>将生成一个错误。 </para>
          <para>如果任一<paramref name="Arg1" />或<paramref name="Arg2" />为空，<b>则 Covariance_P</b>将生成一个错误。 </para>
          <para>协方差的计算公式为： 

 </para>
          <para>图 1： 协方差等式</para>
          <para></para>
          <para></para>
          <para>其中 x 和 y 是样本平均值 AVERAGE(array1) 和 AVERAGE(array2)，n 是样本大小。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_S">
      <MemberSignature Language="C#" Value="public double Covariance_S (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_S([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_S (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_S(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16877)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1-第一个包含整数的单元格区域。</param>
        <param name="Arg2">Array2-第二个包含整数的单元格区域。</param>
        <summary>返回样本协方差，即两个数据集中每对数据点的偏差乘积的平均数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数必须为数字，或者是包含数字的名称、数组或引用。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但包含零值的单元格将被计算在内。</para>
          <para>如果 array1 和 array2 的个数不同数据点，<b>则 Covariance_S</b>将返回错误值 # n/A。 </para>
          <para>如果 array1 或 array2 为空或包含仅 1 个数据点每个，<b>则 Covariance_S</b>将返回 #DIV/0 ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一个 32 位整数，该整数指示在其中创建了此对象的应用程序。 只读的<b>整数</b>(C# 中 int)。</summary>
        <value>To be added.</value>
        <remarks>
          <para>如果在 Microsoft Excel 中创建对象，此属性返回的字符串 XCEL，这相当于十六进制数字 5843454c。 <b>Creator</b>属性用于在 Microsoft Excel 中用于的 Macintosh，其中每个应用程序具有四个字符的创建者代码。 例如，Microsoft Excel 具有 XCEL 的创建者代码。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CritBinom">
      <MemberSignature Language="C#" Value="public double CritBinom (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CritBinom([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CritBinom(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function CritBinom (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CritBinom(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16662)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">贝努利试验次数。</param>
        <param name="Arg2">每次试验成功的概率。</param>
        <param name="Arg3">临界值。</param>
        <summary>返回使累积二项式分布大于或等于临界值的最小值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>质量保证应用程序使用此函数。 例如，使用<b>CritBinom</b>来决定的最大有缺陷的部件允许离开整个批程序集行数。</para>
          <para>如果任一参数为非数值型，<b>则 CritBinom</b>将生成一个错误。 </para>
          <para>如果 trials 不是整数，则将被截尾取整。</para>
          <para>如果 trials &lt; 0，<b>则 CritBinom</b>将生成一个错误。 </para>
          <para>如果 probability_s &lt; 0 或 probability_s &gt; 1，<b>则 CritBinom</b>将生成一个错误。 </para>
          <para>如果 alpha &lt; 0 或 alpha &gt; 1，<b>则 CritBinom</b>将生成一个错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Csc">
      <MemberSignature Language="C#" Value="public double Csc (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csc([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csc(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csc (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csc(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16936)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">角度的弧度您希望余割。</param>
        <summary>返回角度的余割。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Csch">
      <MemberSignature Language="C#" Value="public double Csch (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csch([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csch(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csch (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csch(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16937)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">要计算其双曲余割弧度角。</param>
        <summary>返回一个角度的双曲余割。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CumIPmt">
      <MemberSignature Language="C#" Value="public double CumIPmt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumIPmt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumIPmt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumIPmt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumIPmt(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16832)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率。</param>
        <param name="Arg2">总付款期数。</param>
        <param name="Arg3">现值。</param>
        <param name="Arg4">计算中的首期。付款期数从 1 开始计数。</param>
        <param name="Arg5">计算中的末期。</param>
        <param name="Arg6">付款时间。</param>
        <summary>返回一笔贷款在 start_period 到 end_period 期间累积支付的利息。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>下表列出了值中使用<paramref name="Arg6" />。</para>
          <list type="table">
            <item>
              <term>0（零）</term>
              <description>期末付款</description>
            </item>
            <item>
              <term>1</term>
              <description>期初付款</description>
            </item>
          </list>
          <para>请确保您已一致有关用于指定率和 nper 之间使用的单位。 如果您按月支付四年贷款年利率为 12%，用于 12%/12 率和 4 * 12 的<paramref name="Arg2" />。 如果您的相同贷款，每年款，用于 12%率和 4 <paramref name="Arg2" />。 </para>
          <para>
            <paramref name="Arg2" />
            <paramref name="Arg4" />， <paramref name="Arg5" />，和类型会截尾取整。 </para>
          <para>如果速率 ≤ 0， <paramref name="Arg2" /> ≤ 0，或<paramref name="Arg3" />≤ 0，<b>则 CumIPmt</b>将生成一个错误。 </para>
          <para>如果<paramref name="Arg4" /> &lt; 1， <paramref name="Arg5" /> &lt; 1，或<paramref name="Arg4" /> &gt; <paramref name="Arg5" />，<b>则 CumIPmt</b>将生成一个错误。 </para>
          <para>如果<paramref name="Arg6" />是数字 0 或 1，<b>则 CumIPmt</b>将生成一个错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CumPrinc">
      <MemberSignature Language="C#" Value="public double CumPrinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumPrinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumPrinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumPrinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumPrinc(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16831)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率。</param>
        <param name="Arg2">总付款期数。</param>
        <param name="Arg3">现值。</param>
        <param name="Arg4">计算中的首期。付款期数从 1 开始计数。</param>
        <param name="Arg5">计算中的末期。</param>
        <param name="Arg6">计算中的末期。</param>
        <summary>返回一笔贷款在 start_period 到 end_period 期间累积支付的本金。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>下表列出了值中使用<paramref name="Arg6" />。</para>
          <list type="table">
            <item>
              <term>0（零）</term>
              <description>期末付款</description>
            </item>
            <item>
              <term>1</term>
              <description>期初付款</description>
            </item>
          </list>
          <para>请确保您已一致有关用于指定率和 nper 之间使用的单位。 如果您按月支付四年贷款年利率为 12%，用于 12%/12 率和 4 * 12 的<paramref name="Arg2" />。 如果您的相同贷款，每年款，用于 12%率和 4 <paramref name="Arg2" />。 </para>
          <para>
            <paramref name="Arg2" />
            <paramref name="Arg4" />， <paramref name="Arg5" />，和类型会截尾取整。 </para>
          <para>如果速率 ≤ 0， <paramref name="Arg2" /> ≤ 0，或<paramref name="Arg3" />≤ 0，<b>则 CumPrinc</b>将生成一个错误。 </para>
          <para>如果<paramref name="Arg4" /> &lt; 1， <paramref name="Arg5" /> &lt; 1，或<paramref name="Arg4" /> &gt; <paramref name="Arg5" />，<b>则 CumPrinc</b>将生成一个错误。 </para>
          <para>如果<paramref name="Arg6" />是数字 0 或 1，<b>则 CumPrinc</b>将生成一个错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DAverage">
      <MemberSignature Language="C#" Value="public double DAverage (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DAverage([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DAverage(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DAverage (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DAverage(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16426)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">构成列表或数据库的单元格区域。数据库是相关数据的列表，其中包含相关信息的行为记录，而包含数据的列为字段。列表的第一行包含每一列的标签。</param>
        <param name="Arg2">指示函数所使用的列。输入使用双引号括起来的列标签，如“使用年数”或“产量”，或者输入代表列表中列位置的数字（不带引号）：1 代表第一列，2 代表第二列，依此类推。</param>
        <param name="Arg3">包含指定条件的单元格区域。只要参数 criteria 至少包含一个列标签和列标签下方用于为该列指定条件的一个单元格，就可以为它使用任意区域。</param>
        <summary>计算列表或数据库的列中符合指定条件的值的平均值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>由于使用等号来表示一个公式的单元格中键入文本或值时，Microsoft Excel 计算您键入的内容;但是，这可能导致意外的筛选结果。 若要表示的文本或值相等比较运算符，键入作为字符串表达式条件区域中的相应单元格中的条件： </para>
          <para>= = 条目</para>
          <para>其中条目是您想要查找的文本或值。 例如：</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>筛选时文本数据，Excel 不区分大写和小写字符。 但是，您可以使用公式执行区分大小写的搜索。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public double Days (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Days(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16957)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">start_date(Arg2) 和 end_date (Arg1) 是两个日期之间的您想要了解的天数。</param>
        <param name="Arg2">start_date(Arg2) 和 end_date (Arg1) 是两个日期之间的您想要了解的天数。</param>
        <summary>返回两个日期之间的天数。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Days360">
      <MemberSignature Language="C#" Value="public double Days360 (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days360([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days360(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days360 (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16604)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要知道两个日期之间天数的起止日期。如果 start_date (Arg1) 发生在 end_date (Arg2) 之后，则 DAYS360 将返回一个负数。日期应使用 DATE 函数输入，或者作为其他公式或函数的结果输入。</param>
        <param name="Arg2">要知道两个日期之间天数的起止日期。如果 start_date (Arg1) 发生在 end_date (Arg2) 之后，则 DAYS360 将返回一个负数。日期应使用 DATE 函数输入，或者作为其他公式或函数的结果输入。</param>
        <param name="Arg3">一个布尔值，该值指定是否在计算中使用了美国或欧洲方法。</param>
        <summary>按一年 360 天的算法（一年 12 个月，每月 30 天）返回两个日期之间的天数，它用于某些会计计算中。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用此函数帮助计算支付款项，如果您的会计系统基于 12 个月 30 天。下表包含的值<paramref name="Arg3" />。</para>
          <list type="table">
            <item>
              <term>
                <b>false</b>或省略</term>
              <description>美国 (NASD) 方法。如果起始日期是一个月的 31 号，则会等于同月的 30 号。如果终止日期是一个月的 31 号，且起始日期早于 30 号，则终止日期等于下一个月的 1 号；否则，终止日期会等于同月的 30 号。</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>欧洲方法。发生在一个月的 31 号的起始日期和终止日期都将等于同月的 30 号。</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Db">
      <MemberSignature Language="C#" Value="public double Db (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Db([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Db(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Db (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16631)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cost - 资产的初始成本。</param>
        <param name="Arg2">Salvage - 资产在折旧期末的价值（有时也称为资产残值）。</param>
        <param name="Arg3">Life - 资产进行折旧计算的周期数（有时也称作资产的生命周期）。</param>
        <param name="Arg4">Period - 要为其计算折旧值的周期。Period 必须与 life 使用相同的单位。</param>
        <param name="Arg5">Month - 第一年的月份数。如果省略，则假定为 12。</param>
        <summary>使用固定余额递减法返回指定周期内某项资产的折旧值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>固定余额递减法计算折旧以固定速率。 DB 使用以下公式计算的期间的折旧额：</para>
          <para>（成本-前面阶段的总折旧） * 速率</para>
          <para>其中：</para>
          <para>速率 = 1-((salvage / cost) ^ (1 / 生命))、 圆角到三个小数位</para>
          <para>为第一个和最后一个期间的折旧是一种特殊情况。 对于第一个周期，DB 的计算公式为：</para>
          <para>成本 * 速率 * 月 / 12</para>
          <para>对于最后一个周期，DB 的计算公式为：</para>
          <para>(（成本-前面阶段的总折旧） * 速率 * (12-month)) / 12</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dbcs">
      <MemberSignature Language="C#" Value="public string Dbcs (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dbcs([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dbcs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dbcs (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Dbcs(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16599)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">文本或对包含要更改的文本的单元格的引用。</param>
        <summary>将字符串中的半角 （单字节） 字母转换为全角 （双字节） 字符。 该函数 （并将其转换的字符） 的名称取决于语言设置。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DCount">
      <MemberSignature Language="C#" Value="public double DCount (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCount([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCount(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCount (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCount(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16424)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Database - 构成列表或数据库的单元格区域。数据库是相关数据的列表，其中包含相关信息的行为记录，而包含数据的列为字段。列表的第一行包含每一列的标签。</param>
        <param name="Arg2">Field - 指示函数所使用的列。输入使用双引号括起来的列标签，如“使用年数”或“产量”，或者输入代表列表中列位置的数字（不带引号）：1 代表第一列，2 代表第二列，依此类推。</param>
        <param name="Arg3">Criteria - 包含指定条件的单元格区域。只要参数 criteria 至少包含一个列标签和列标签下方用于为该列指定条件的一个单元格，就可以为它使用任意区域。</param>
        <summary>计算列表或数据库的列中符合指定条件并且包含数字的单元格的个数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>由于使用等号来表示一个公式的单元格中键入文本或值时，Microsoft Excel 计算您键入的内容;但是，这可能导致意外的筛选结果。 若要表示的文本或值相等比较运算符，键入作为字符串表达式条件区域中的相应单元格中的条件： </para>
          <para>= = 条目</para>
          <para>其中条目是文本或要查找的值。 例如：</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>筛选时文本数据，Excel 不区分大写和小写字符。 但是，您可以使用公式执行区分大小写的搜索。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DCountA">
      <MemberSignature Language="C#" Value="public double DCountA (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCountA([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCountA(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCountA (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCountA(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16583)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Database - 构成列表或数据库的单元格区域。数据库是相关数据的列表，其中包含相关信息的行为记录，而包含数据的列为字段。列表的第一行包含每一列的标签。</param>
        <param name="Arg2">Field - 指示函数所使用的列。输入使用双引号括起来的列标签，如“使用年数”或“产量”，或者输入代表列表中列位置的数字（不带引号）：1 代表第一列，2 代表第二列，依此类推。</param>
        <param name="Arg3">Criteria - 包含指定条件的单元格区域。只要参数 criteria 至少包含一个列标签和列标签下方用于为该列指定条件的一个单元格，就可以为它使用任意区域。</param>
        <summary>计算列表或数据库的列中符合指定条件的非空单元格的个数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>由于使用等号来表示一个公式的单元格中键入文本或值时，Microsoft Excel 计算您键入的内容;但是，这可能导致意外的筛选结果。 若要表示的文本或值相等比较运算符，键入作为字符串表达式条件区域中的相应单元格中的条件： </para>
          <para>= = 条目</para>
          <para>其中条目是文本或要查找的值。 例如：</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>筛选时文本数据，Excel 不区分大写和小写字符。 但是，您可以使用公式执行区分大小写的搜索。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ddb">
      <MemberSignature Language="C#" Value="public double Ddb (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ddb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ddb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16528)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cost - 资产的初始成本。</param>
        <param name="Arg2">Salvage - 资产在折旧期末的价值（有时也称为资产残值）。此值可为 0。</param>
        <param name="Arg3">Life - 资产进行折旧计算的周期数（有时也称作资产的生命周期）。</param>
        <param name="Arg4">Period - 要为其计算折旧值的周期。Period 必须与 life 使用相同的单位。</param>
        <param name="Arg5">Factor - 余额递减速率。如果省略 factor，则假定其值为 2（双倍余额递减法）。</param>
        <summary>使用双倍余额递减法或其他指定方法返回某项资产在指定周期内的折旧值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 所有五个参数必须为正数。</para>
          <para>双倍余额递减法计算折旧以加速的速率。 折旧，最高的第一段中，在后续期间减小。 <b>Ddb</b>使用以下公式计算的期间的折旧额：</para>
          <code>Min( (cost - total depreciation from prior periods) * (factor/life), (cost - salvage -  total depreciation from prior periods) )
</code>
          <para>如果不想使用双倍余额递减法，则请改变 factor 的值。</para>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />如果您想要转用直线折旧法，当折旧值大于余额递减计算函数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Bin">
      <MemberSignature Language="C#" Value="public string Dec2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16771)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number-要转换的小数的整数。 如果 number 为负数，有效位置值将被忽略，<b>则 dec2bin 将</b>返回在其中最重要的位是符号位 10 个字符 （10 位） 二进制数。 其余 9 位为 magnitude 位。 使用两个的 10 表示负数。</param>
        <param name="Arg2">位置-要使用的字符数。 如果省略位置，<b>则 dec2bin 将</b>使用的最小所需的字符数。 位置可用于填充带前导 0 （零） 的返回值。</param>
        <summary>将十进制数转换为二进制数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number &lt; -512 或如果 number &gt; 511，<b>则 dec2bin 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 number 为非数值型，<b>则 dec2bin 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果<b>dec2bin 所</b>需的字符数多于 places 指定的字符，则将返回 #NUM ！ 错误值。 </para>
          <para>如果 places 不是整数，则将被截尾取整。</para>
          <para>如果 places 为非数值型，<b>则 dec2bin 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 places 为零或为负，<b>则 dec2bin 将</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Hex">
      <MemberSignature Language="C#" Value="public string Dec2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16772)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number-要转换的小数的整数。 如果 number 为负数，将忽略 places，并<b>则 dec2hex 将</b>返回在其中最重要的位是符号位 10 个字符 （40 位） 十六进制数。 其余的 39 位是 magnitude 位。 使用两个的 10 表示负数。</param>
        <param name="Arg2">位置-要使用的字符数。 如果省略位置，<b>则 dec2hex 将</b>使用的最小所需的字符数。 位置可用于填充带前导 0 （零） 的返回值。</param>
        <summary>将十进制数转换为十六进制数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number &lt; -549,755,813,888 或如果 number &gt; 549755813887，<b>则 dec2hex 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 number 为非数值型，<b>则 dec2hex 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果<b>dec2hex 所</b>需的字符数多于 places 指定的字符，则将返回 #NUM ！ 错误值。 </para>
          <para>如果 places 不是整数，则将被截尾取整。</para>
          <para>如果 places 为非数值型，<b>则 dec2hex 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 places 为负数，<b>则 dec2hex 将</b>返回 #NUM ！。 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Oct">
      <MemberSignature Language="C#" Value="public string Dec2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16773)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number-要转换的小数的整数。 如果 number 为负数，将忽略 places，并<b>则 dec2oct 将</b>返回在其中为登录位，最重要的位是 10 个字符 （30 位） 八进制数。 其余 29 位为 magnitude 位。 使用两个的 10 表示负数。</param>
        <param name="Arg2">位置-要使用的字符数。 如果省略位置，<b>则 dec2oct 将</b>使用的最小所需的字符数。 位置可用于填充带前导 0 （零） 的返回值。</param>
        <summary>将十进制数转换为八进制数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number &lt; -536,870,912 或如果 number &gt; 536870911，<b>则 dec2oct 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 number 为非数值型，<b>则 dec2oct 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果<b>dec2oct 所</b>需的字符数多于 places 指定的字符，则将返回 #NUM ！ 错误值。 </para>
          <para>如果 places 不是整数，则将被截尾取整。</para>
          <para>如果 places 为非数值型，<b>则 dec2oct 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 places 为负数，<b>则 dec2oct 将</b>返回 #NUM ！。 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decimal">
      <MemberSignature Language="C#" Value="public double Decimal (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Decimal([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Decimal(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decimal (Arg1 As String, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Decimal(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16956)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">要转换的号码。</param>
        <param name="Arg2">您正在转换号码的基本基数。</param>
        <summary>给定基数的数字的文本表示形式转换为十进制数。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Degrees">
      <MemberSignature Language="C#" Value="public double Degrees (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Degrees([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Degrees (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Degrees(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16727)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Angle - 要转换的以弧度表示的角度。</param>
        <summary>将弧度转换为度。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public double Delta (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Delta([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Delta(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delta (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16802)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1 - 第一个数。</param>
        <param name="Arg2">Number2 - 第二个数。如果省略，则假定 number2 为零。</param>
        <summary>检验两个值是否相等。如果 number1 = number2，则返回 1；否则返回 0。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用此函数筛选一组值。 例如，通过对求和几个<b>Delta</b>函数计算等于对数目。 此函数也称为是 Kronecker 增量函数。</para>
          <para>如果 number1 为非数值型，<b>则 Delta</b>将返回 #VALUE ！ 错误值。 </para>
          <para>如果 number2 为非数值型，<b>则 Delta</b>将返回 #VALUE ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DevSq">
      <MemberSignature Language="C#" Value="public double DevSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DevSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DevSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DevSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16702)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 为 1 到 30 个要为其计算偏差平方和的参数。也可以不使用这种用逗号分隔参数的形式，而使用一个数组或一个对数组的引用。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回数据点与其样本平均值的偏差的平方和。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。 </para>
          <para>直接键入参数列表的逻辑值和数字的文本表示也包括在内。 </para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。 </para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。 </para>
          <para>偏差平方和的计算公式为：

 </para>
          <para>图 1： 的方差总和的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DGet">
      <MemberSignature Language="C#" Value="public object DGet (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DGet([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DGet(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DGet (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DGet(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16619)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Database - 构成列表或数据库的单元格区域。数据库是相关数据的列表，其中包含相关信息的行为记录，而包含数据的列为字段。列表的第一行包含每一列的标签。</param>
        <param name="Arg2">Field - 指示函数所使用的列。输入使用双引号括起来的列标签，如“使用年数”或“产量”，或者输入代表列表中列位置的数字（不带引号）：1 代表第一列，2 代表第二列，依此类推。</param>
        <param name="Arg3">Criteria - 包含指定条件的单元格区域。只要参数 criteria 至少包含一个列标签和列标签下方用于为该列指定条件的一个单元格，就可以为它使用任意区域。</param>
        <summary>从列表或数据库的列中提取符合指定条件的单个值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>由于使用等号来表示一个公式的单元格中键入文本或值时，Microsoft Excel 计算您键入的内容;但是，这可能导致意外的筛选结果。 若要表示的文本或值相等比较运算符，键入作为字符串表达式条件区域中的相应单元格中的条件： </para>
          <para>= = 条目</para>
          <para>其中条目是文本或要查找的值。 例如：</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>筛选时文本数据，Excel 不区分大写和小写字符。 但是，您可以使用公式执行区分大小写的搜索。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disc">
      <MemberSignature Language="C#" Value="public double Disc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Disc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Disc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Disc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16819)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">Pr - 面值 ￥100 的债券的现价。</param>
        <param name="Arg4">Redemption - 面值 ￥100 的债券的赎回值。</param>
        <param name="Arg5">Basis - 要使用的日计数基准类型。</param>
        <summary>返回债券的贴现率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。 </para>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>结算日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，结算日为 2008 年 7 月 1 日，而到期日是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>Settlement、maturity 和 basis 将被截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期数，<b>则 Disc</b>将返回 #VALUE ！ 错误值。 </para>
          <para>如果 pr ≤ 0 或 redemption ≤ 0，<b>则 Disc</b>将返回 #NUM ！ 错误值。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>则 Disc</b>将返回 #NUM ！ 错误值。 </para>
          <para>如果 settlement ≥ maturity，<b>则 Disc</b>将返回 #NUM ！。 错误值。 </para>
          <para>
            <b>Disc</b>的计算公式如下： </para>
          <para>图 1： 用于计算 Disc 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>B = 一年，具体取决于年基准中的天数。</para>
          <para>DSM = 结算日与到期日之间的天数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DMax">
      <MemberSignature Language="C#" Value="public double DMax (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMax([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMax(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMax (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMax(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16428)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Database - 构成列表或数据库的单元格区域。数据库是相关数据的列表，其中包含相关信息的行为记录，而包含数据的列为字段。列表的第一行包含每一列的标签。</param>
        <param name="Arg2">Field - 指示函数所使用的列。输入使用双引号括起来的列标签，如“使用年数”或“产量”，或者输入代表列表中列位置的数字（不带引号）：1 代表第一列，2 代表第二列，依此类推。</param>
        <param name="Arg3">Criteria - 包含指定条件的单元格区域。只要参数 criteria 至少包含一个列标签和列标签下方用于为该列指定条件的一个单元格，就可以为它使用任意区域。</param>
        <summary>返回列表或数据库的列中符合指定条件的最大数字。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>由于使用等号来表示一个公式的单元格中键入文本或值时，Microsoft Excel 计算您键入的内容;但是，这可能导致意外的筛选结果。 若要表示的文本或值相等比较运算符，键入作为字符串表达式条件区域中的相应单元格中的条件： </para>
          <para>= = 条目</para>
          <para>其中条目是文本或要查找的值。 例如：</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>筛选时文本数据，Excel 不区分大写和小写字符。 但是，您可以使用公式执行区分大小写的搜索。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DMin">
      <MemberSignature Language="C#" Value="public double DMin (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMin([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMin(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMin (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMin(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16427)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Database - 构成列表或数据库的单元格区域。数据库是相关数据的列表，其中包含相关信息的行为记录，而包含数据的列为字段。列表的第一行包含每一列的标签。</param>
        <param name="Arg2">Field - 指示函数所使用的列。输入使用双引号括起来的列标签，如“使用年数”或“产量”，或者输入代表列表中列位置的数字（不带引号）：1 代表第一列，2 代表第二列，依此类推。</param>
        <param name="Arg3">Criteria - 包含指定条件的单元格区域。只要参数 criteria 至少包含一个列标签和列标签下方用于为该列指定条件的一个单元格，就可以为它使用任意区域。</param>
        <summary>返回列表或数据库的列中符合指定条件的最小数字。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>由于使用等号来表示一个公式的单元格中键入文本或值时，Microsoft Excel 计算您键入的内容;但是，这可能导致意外的筛选结果。 若要表示的文本或值相等比较运算符，键入作为字符串表达式条件区域中的相应单元格中的条件： </para>
          <para>= = 条目</para>
          <para>其中条目是文本或要查找的值。 例如：</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>筛选时文本数据，Excel 不区分大写和小写字符。 但是，您可以使用公式执行区分大小写的搜索。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dollar">
      <MemberSignature Language="C#" Value="public string Dollar (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dollar([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dollar (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16397)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 数字、对包含数字的单元格的引用或计算结果为数字的公式。</param>
        <param name="Arg2">Decimals - 小数点右边的位数。如果 decimals 为负数，则 number 向小数点的左边舍入。如果省略 decimals，则假定其值为 2。</param>
        <summary>本“帮助”主题中描述的函数可将数字转换为文本格式，并应用货币符号。函数的名称及其应用的货币符号取决于您的语言设置。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>包含带单元格命令 （格式菜单） 的数字的单元格和格式的号码直接与<b>Dollar</b>函数的主要区别是<b>美元</b>将其结果转换为文本。 使用单元格命令设置格式的数字仍是一个数字。 您可以继续使用的数字格式以<b>美元</b>，在公式中，因为 Microsoft Excel 转换到号码输入作为文本值，则在计算的号码。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarDe">
      <MemberSignature Language="C#" Value="public double DollarDe (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarDe([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarDe(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarDe (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarDe(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16827)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fractional_dollar - 以分数表示的数字。</param>
        <param name="Arg2">Fraction - 分数中的分母，为一个整数。</param>
        <summary>将按分数表示的价格转换为按小数表示的价格，使用函数 DOLLARDE 可以将分数表示的金额数字，如证券价格，转换为小数表示的数字。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 fraction 不是整数，则将被截尾取整。</para>
          <para>如果 fraction 小于 0，<b>则 dollarde 将</b>返回 #NUM ！。 错误值。 </para>
          <para>如果 fraction 为 0，<b>则 dollarde 将</b>返回错误值 #DIV/0 ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarFr">
      <MemberSignature Language="C#" Value="public double DollarFr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarFr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarFr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarFr (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarFr(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16828)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Decimal_dollar - 为小数。</param>
        <param name="Arg2">Fraction - 分数中的分母，为一个整数。</param>
        <summary>将按小数表示的价格转换为按分数表示的价格。使用函数 DOLLARFR 可以将小数表示的金额数字，如证券价格，转换为分数型数字。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 fraction 不是整数，则将被截尾取整。</para>
          <para>如果 fraction 小于 0，<b>则 dollarfr 将</b>返回 #NUM ！。 错误值。 </para>
          <para>如果 fraction 为 0，<b>则 dollarfr 将</b>返回错误值 #DIV/0 ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DProduct">
      <MemberSignature Language="C#" Value="public double DProduct (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DProduct([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DProduct(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DProduct (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DProduct(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16573)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Database 为构成列表或数据库的单元格区域。数据库是相关数据的列表，其中包含相关信息的行为记录，而包含数据的列为字段。列表的第一行包含每一列的标签。</param>
        <param name="Arg2">Field 指示函数所使用的列。输入使用双引号括起来的列标签，如“使用年数”或“产量”，或者输入代表列表中列位置的数字（不带引号）：1 代表第一列，2 代表第二列，依此类推。</param>
        <param name="Arg3">Criteria 为包含指定条件的单元格区域。只要参数 criteria 至少包含一个列标签和列标签下方用于为该列指定条件的一个单元格，就可以为它使用任意区域。</param>
        <summary>计算列表或数据库的列中符合指定条件的值的乘积。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>由于使用等号来表示一个公式的单元格中键入文本或值时，Microsoft Excel 计算您键入的内容;但是，这可能导致意外的筛选结果。 若要表示的文本或值相等比较运算符，键入作为字符串表达式条件区域中的相应单元格中的条件： </para>
          <para>= = 条目</para>
          <para>其中条目是文本或要查找的值。 例如：</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>筛选时文本数据，Excel 不区分大写和小写字符。 但是，您可以使用公式执行区分大小写的搜索。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDev">
      <MemberSignature Language="C#" Value="public double DStDev (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDev([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDev(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDev (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDev(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16429)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Database - 构成列表或数据库的单元格区域。数据库是相关数据的列表，其中包含相关信息的行为记录，而包含数据的列为字段。列表的第一行包含每一列的标签。</param>
        <param name="Arg2">Field - 指示函数所使用的列。输入使用双引号括起来的列标签，如“使用年数”或“产量”，或者输入代表列表中列位置的数字（不带引号）：1 代表第一列，2 代表第二列，依此类推。</param>
        <param name="Arg3">Criteria - 包含指定条件的单元格区域。只要参数 criteria 至少包含一个列标签和列标签下方用于为该列指定条件的一个单元格，就可以为它使用任意区域。</param>
        <summary>将列表或数据库的列中符合指定条件的数字作为样本，估算总体的标准偏差。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>由于使用等号来表示一个公式的单元格中键入文本或值时，Microsoft Excel 计算您键入的内容;但是，这可能导致意外的筛选结果。 若要表示的文本或值相等比较运算符，键入作为字符串表达式条件区域中的相应单元格中的条件： </para>
          <para>= = 条目</para>
          <para>其中条目是文本或要查找的值。 例如：</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>筛选时文本数据，Excel 不区分大写和小写字符。 但是，您可以使用公式执行区分大小写的搜索。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDevP">
      <MemberSignature Language="C#" Value="public double DStDevP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDevP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDevP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDevP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDevP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16579)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Database - 是构成列表或数据库的单元格区域。数据库是相关数据的列表，其中包含相关信息的行为记录，而包含数据的列为字段。列表的第一行包含每一列的标签。</param>
        <param name="Arg2">Field - 指示函数所使用的列。输入使用双引号括起来的列标签，如“使用年数”或“产量”，或者输入代表列表中列位置的数字（不带引号）：1 代表第一列，2 代表第二列，依此类推。</param>
        <param name="Arg3">Criteria - 包含指定条件的单元格区域。只要参数 criteria 至少包含一个列标签和列标签下方用于为该列指定条件的一个单元格，就可以为它使用任意区域。</param>
        <summary>将列表或数据库的列中符合指定条件的数字作为整个总体，计算总体的标准偏差。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>由于使用等号来表示一个公式的单元格中键入文本或值时，Microsoft Excel 计算您键入的内容;但是，这可能导致意外的筛选结果。 若要表示的文本或值相等比较运算符，键入作为字符串表达式条件区域中的相应单元格中的条件： </para>
          <para>= = 条目</para>
          <para>其中条目是文本或要查找的值。 例如：</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>筛选时文本数据，Excel 不区分大写和小写字符。 但是，您可以使用公式执行区分大小写的搜索。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DSum">
      <MemberSignature Language="C#" Value="public double DSum (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DSum([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DSum(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DSum (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DSum(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16425)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Database - 构成列表或数据库的单元格区域。数据库是相关数据的列表，其中包含相关信息的行为记录，而包含数据的列为字段。列表的第一行包含每一列的标签。</param>
        <param name="Arg2">Field - 指示函数所使用的列。输入使用双引号括起来的列标签，如“使用年数”或“产量”，或者输入代表列表中列位置的数字（不带引号）：1 代表第一列，2 代表第二列，依此类推。</param>
        <param name="Arg3">Criteria - 包含指定条件的单元格区域。只要参数 criteria 至少包含一个列标签和列标签下方用于为该列指定条件的一个单元格，就可以为它使用任意区域。</param>
        <summary>计算列表或数据库的列中符合指定条件的数字之和。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>由于使用等号来表示一个公式的单元格中键入文本或值时，Microsoft Excel 计算您键入的内容;但是，这可能导致意外的筛选结果。 若要表示的文本或值相等比较运算符，键入作为字符串表达式条件区域中的相应单元格中的条件： </para>
          <para>= = 条目</para>
          <para>其中条目是文本或要查找的值。 例如：</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>筛选时文本数据，Excel 不区分大写和小写字符。 但是，您可以使用公式执行区分大小写的搜索。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy19">
      <MemberSignature Language="C#" Value="public object Dummy19 (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Dummy19([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy19(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy19 (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2827)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>仅供内部使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy21">
      <MemberSignature Language="C#" Value="public double Dummy21 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Dummy21([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy21(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy21 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Dummy21(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2826)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <summary>仅供内部使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public double Duration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Duration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Duration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Duration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16842)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">Coupon - 债券的年息票利率。</param>
        <param name="Arg4">Yld - 债券的年收益。</param>
        <param name="Arg5">Frequency - 每年支付息票的次数。如果按年支付，frequency = 1；如果按半年期支付，frequency = 2；如果按季支付，frequency = 4。</param>
        <param name="Arg6">Basis - 要使用的日计数基准类型。</param>
        <summary>返回假设面值 ￥100 的定期付息有价证券的修正期限。期限定义为一系列现金流现值的加权平均值，用于计量债券价格对于收益率变化的敏感程度。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>结算日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，结算日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>Settlement、maturity、frequency 和 basis 将被截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，则<b>Duration</b>将返回 #VALUE ！ 错误值。 </para>
          <para>如果息票&lt;0 或者，如果 yld &lt; 0，则<b>Duration</b>将返回 #NUM ！ 错误值。 </para>
          <para>如果 frequency 不为数字 1、 2 或 4，则<b>Duration</b>将返回 #NUM ！ 错误值。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，则<b>Duration</b>将返回 #NUM ！ 错误值。 </para>
          <para>如果 settlement ≥ maturity，<b>持续时间</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DVar">
      <MemberSignature Language="C#" Value="public double DVar (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVar([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVar(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVar (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVar(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16431)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Database - 构成列表或数据库的单元格区域。数据库是相关数据的列表，其中包含相关信息的行为记录，而包含数据的列为字段。列表的第一行包含每一列的标签。</param>
        <param name="Arg2">Field - 指示函数所使用的列。输入使用双引号括起来的列标签，如“使用年数”或“产量”，或者输入代表列表中列位置的数字（不带引号）：1 代表第一列，2 代表第二列，依此类推。</param>
        <param name="Arg3">Criteria - 包含指定条件的单元格区域。只要参数 criteria 至少包含一个列标签和列标签下方用于为该列指定条件的一个单元格，就可以为它使用任意区域。</param>
        <summary>将列表或数据库的列中符合指定条件的数字作为一个样本，估算总体的方差。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>由于使用等号来表示一个公式的单元格中键入文本或值时，Microsoft Excel 计算您键入的内容;但是，这可能导致意外的筛选结果。 若要表示的文本或值相等比较运算符，键入作为字符串表达式条件区域中的相应单元格中的条件： </para>
          <para>= = 条目</para>
          <para>其中条目是文本或要查找的值。 例如：</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>筛选时文本数据，Excel 不区分大写和小写字符。 但是，您可以使用公式执行区分大小写的搜索。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DVarP">
      <MemberSignature Language="C#" Value="public double DVarP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVarP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVarP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVarP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVarP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16580)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Database - 构成列表或数据库的单元格区域。数据库是相关数据的列表，其中包含相关信息的行为记录，而包含数据的列为字段。列表的第一行包含每一列的标签。</param>
        <param name="Arg2">Field - 指示函数所使用的列。输入使用双引号括起来的列标签，如“使用年数”或“产量”，或者输入代表列表中列位置的数字（不带引号）：1 代表第一列，2 代表第二列，依此类推。</param>
        <param name="Arg3">Criteria - 包含指定条件的单元格区域。只要参数 criteria 至少包含一个列标签和列标签下方用于为该列指定条件的一个单元格，就可以为它使用任意区域。</param>
        <summary>将列表或数据库的列中符合指定条件的数字作为整个总体，计算总体的方差。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>由于使用等号来表示一个公式的单元格中键入文本或值时，Microsoft Excel 计算您键入的内容;但是，这可能导致意外的筛选结果。 若要表示的文本或值相等比较运算符，键入作为字符串表达式条件区域中的相应单元格中的条件： </para>
          <para>= = 条目</para>
          <para>其中条目是文本或要查找的值。 例如：</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>筛选时文本数据，Excel 不区分大写和小写字符。 但是，您可以使用公式执行区分大小写的搜索。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EDate">
      <MemberSignature Language="C#" Value="public double EDate (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EDate([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EDate(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EDate (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EDate(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16833)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date - 代表开始日期的日期。日期应使用 DATE 函数输入，或者作为其他公式或函数的结果输入。例如，使用 DATE(2008,5,23) 输入 2008 年 5 月 23 日。如果日期以文本形式输入，将会出现问题。</param>
        <param name="Arg2">Months - start_date 之前或之后的月数。months 为正值将产生未来日期，为负值将产生过去日期。</param>
        <summary>返回表示某个数据的序列号，该数据代表指定日期 (start_date) 之前或之后的月份数。使用函数 EDATE 可以计算与发行日处于一月中同一天的到期日的日期。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>如果 start_date 不是有效日期，<b>则 edate 将</b>返回 #VALUE ！。 错误值。 </para>
          <para>如果 months 不是整数，则将被截尾取整。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public double Effect (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Effect([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Effect (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Effect(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16830)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nominal_rate - 名义利率。</param>
        <param name="Arg2">Npery - 每年的复利期数。</param>
        <summary>利用给定的名义年利率和每年的复利期数，返回有效的年利率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Npery 将被截尾取整。</para>
          <para>如果任一参数为非数值型，则<b>Effect</b>将返回 #VALUE ！ 错误值。 </para>
          <para>如果 nominal_rate ≤ 0 或 npery &lt; 1，则<b>Effect</b>将返回 #NUM ！ 错误值。 </para>
          <para>
            <b>Effect</b>的计算公式如下： </para>
          <para>图 1： 用于计算 Effect 方法的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeURL">
      <MemberSignature Language="C#" Value="public object EncodeURL (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EncodeURL([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EncodeURL(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeURL (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EncodeURL(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16981)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">要编码的文本。</param>
        <summary>URL 对参数进行编码。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EoMonth">
      <MemberSignature Language="C#" Value="public double EoMonth (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EoMonth([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EoMonth(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EoMonth (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EoMonth(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16834)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date - 代表开始日期的日期。日期应使用 DATE 函数输入，或者作为其他公式或函数的结果输入。例如，使用 DATE(2008,5,23) 输入 2008 年 5 月 23 日。如果日期以文本形式输入，将会出现问题。</param>
        <param name="Arg2">Months - start_date 之前或之后的月数。months 为正值将产生未来日期，为负值将产生过去日期。</param>
        <summary>返回 start_date 的指定月数之前或之后的月份的最后一天的序列号。用函数 EOMONTH 可计算正好在特定月份中最后一天内的到期日或发行日。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>如果 start_date 不是有效日期，<b>则 eomonth 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 start_date 加 months 产生无效日期，<b>则 eomonth 将</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public double Erf (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16807)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lower_limit- <b>Erf</b>的积分下限。</param>
        <param name="Arg2">Upper_limit-用于计算<b>Erf</b>的积分上限。 如果省略，则 Erf 将 0 和 lower_limit 之间。</param>
        <summary>返回误差函数在 lower_limit 和 upper_limit 之间的积分。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" />方法。</para>
          <para>如果 lower_limit 为非数值型，<b>则 erf 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 lower_limit 是负数，<b>则 erf 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 upper_limit 是非数值型，<b>则 erf 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 upper_limit 是负数，<b>则 erf 将</b>返回 #NUM ！ 错误值。 </para>
          <para>图 1： 用于计算 Erf 方法的等式</para>
          <para></para>
          <para></para>
          <para>图 2： 用于计算 Erf 方法的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf_Precise">
      <MemberSignature Language="C#" Value="public double Erf_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Erf_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16927)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lower_limit - ERF 的积分下限。</param>
        <summary>返回误差函数在 0 和 lower_limit 之间的积分。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 lower_limit 为非数值，<b>Erf_Precise</b> 将生成错误。 如果 lower_limit 为负，<b>Erf_Precise</b> 将生成错误。</para>
          <para>图 1： 用于计算 Erf_Precise 方法的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC">
      <MemberSignature Language="C#" Value="public double ErfC (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16808)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">第一个参数。</param>
        <summary>返回从指定参数到无穷积分的 ERF 函数的余误差函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" />方法。</para>
          <para>如果该函数不可用，并返回 #NAME? 错误，则需要安装并加载“分析工具库”加载宏。</para>
          <para>如果该参数为非数值型，则<b>ErfC</b>返回 #VALUE ！。 错误值。</para>
          <para>如果该参数为负数，<b>则 ErfC</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC_Precise">
      <MemberSignature Language="C#" Value="public double ErfC_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16928)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要作为计算依据的值。</param>
        <summary>返回从指定值到无穷积分的余误差函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果指定值为非数值，<b>ErfC_Precise</b> 将生成错误。</para>
          <para>如果指定值为负，<b>ErfC_Precise</b> 将生成错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Even">
      <MemberSignature Language="C#" Value="public double Even (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Even([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Even(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Even (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Even(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16663)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 是要进行舍入的值。</param>
        <summary>返回向上舍入到最接近的偶数的数字。可以使用此函数处理成对出现的项目。例如，一个包装箱一行可容纳一宗或两宗货物。只有当这些货物的数目向上舍入到最接近的偶数，与包装箱的容量相匹配时，包装箱才会装满。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number 为非数值型，则<b>Even</b>将返回 #VALUE ！ 错误值。 </para>
          <para>不论 number 的符号如何，向远离零的方向调整时，值都会向上舍入。如果 number 是偶数，则不会进行任何舍入处理。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Expon_Dist">
      <MemberSignature Language="C#" Value="public double Expon_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Expon_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Expon_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Expon_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16878)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 函数的值。</param>
        <param name="Arg2">lambda - 参数值。</param>
        <param name="Arg3">Cumulative-一个逻辑值，指示哪种形式指数的函数，以提供。 如果累积为<b>true</b>，<b>则 expon_dist 将</b>返回累积分布函数;如果<b>false</b>，则将返回概率密度函数。</param>
        <summary>返回指数分布。使用 EXPON_DIST 可以建立事件之间的时间间隔模型，如银行自动提款机支付一次现金所花费的时间。例如，可以使用 EXPON_DIST 来确定这一过程最长持续 1 分钟的发生概率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 x 或 lambda 为非数值型，<b>则 expon_dist 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 x &lt; 0，<b>则 expon_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 lambda ≤ 0，<b>则 expon_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>概率密度函数的计算公式为： 

 </para>
          <para>图 1： 概率密度函数的等式</para>
          <para></para>
          <para></para>
          <para>累积分布函数的计算公式为： 

</para>
          <para>图 2： 累积分布函数的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponDist">
      <MemberSignature Language="C#" Value="public double ExponDist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ExponDist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ExponDist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExponDist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ExponDist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16664)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 函数的值。</param>
        <param name="Arg2">lambda - 参数值。</param>
        <param name="Arg3">Cumulative-一个逻辑值，指示哪种形式指数的函数，以提供。 如果累积为<b>true</b>，<b>则 expondist 将</b>返回累积分布函数;如果<b>false</b>，则将返回概率密度函数。</param>
        <summary>以下公式返回指数分布。 使用<b>ExponDist</b>模拟事件，如银行自动所需的时间提供现金之间的时间。 例如，<b>则 expondist 将</b>可用于确定过程所需的最多 1 分钟的概率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" />方法。</para>
          <para>如果 x 或 lambda 为非数值型，<b>则 expondist 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 x &lt; 0，<b>则 expondist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 lambda ≤ 0，<b>则 expondist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>概率密度函数的计算公式为： 

 </para>
          <para>图 1： 概率密度函数的等式</para>
          <para></para>
          <para></para>
          <para>累积分布函数的计算公式为： 

</para>
          <para>图 2： 累积分布函数的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist">
      <MemberSignature Language="C#" Value="public double F_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16915)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 用于计算函数的值。</param>
        <param name="Arg2">Deg_freedom1-分子的自由度。</param>
        <param name="Arg3">Deg_freedom2-分母的自由度。</param>
        <param name="Arg4">Cumulative-决定函数的形式一个逻辑值。 如果累积为<b>true</b>时，<b>则 f_dist 将</b>返回累积分布函数;如果<b>false</b>，则将返回概率密度函数。</param>
        <summary>返回 F 概率分布。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 f_dist 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 x 为负数，<b>则 f_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 deg_freedom1 或 deg_freedom2 不是整数，则将被截尾取整。</para>
          <para>如果 deg_freedom1 &lt; 1，<b>则 f_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 deg_freedom &lt; 1，<b>则 f_dist 将</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist_RT">
      <MemberSignature Language="C#" Value="public double F_Dist_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16916)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 用于计算函数的值。</param>
        <param name="Arg2">degrees_freedom1 - 分子的自由度。</param>
        <param name="Arg3">degrees_freedom2 - 分母的自由度。</param>
        <summary>返回右尾 F 概率分布。可以使用此函数确定两个数据集是否存在变化程度上的不同。例如，可以分析进入高校的男生、女生的考试分数，确定女生分数的变化程度是否与男生不同。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 f_dist_rt 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 x 为负数，<b>则 f_dist_rt 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 degrees_freedom1 或 degrees_freedom2 不是整数，则将被截尾取整。</para>
          <para>如果 degrees_freedom1 &lt; 1 或 degrees_freedom1 ≥ 10 ^10，<b>则 f_dist_rt 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 degrees_freedom2 &lt; 1 或 degrees_freedom2 ≥ 10 ^10，<b>则 f_dist_rt 将</b>返回 #NUM ！ 错误值。 </para>
          <para>
            <b>F_Dist_RT</b>的计算公式为 F_DIST_RT = P (F&gt;x)，其中 F 为呈 F 分布自由度为 degrees_freedom1 和 degrees_freedom2 的随机变量。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv">
      <MemberSignature Language="C#" Value="public double F_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16917)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probability-与 F 累积分布相关的概率。</param>
        <param name="Arg2">Deg_freedom1-分子的自由度。</param>
        <param name="Arg3">Deg_freedom2-分母的自由度。</param>
        <summary>返回 F 概率分布的反函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 f_inv 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 probability &lt; 0 或 probability &gt; 1，<b>则 f_inv 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 deg_freedom1 或 deg_freedom2 不是整数，则将被截尾取整。</para>
          <para>如果 deg_freedom1 &lt; 1 或 deg_freedom2 &lt; 1，<b>则 f_inv 将</b>返回 #NUM ！ 错误值。 </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv_RT">
      <MemberSignature Language="C#" Value="public double F_Inv_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16918)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">probability - 与 F 累积分布相关联的概率。</param>
        <param name="Arg2">degrees_freedom1 - 分子的自由度。</param>
        <param name="Arg3">degrees_freedom2 - 分母的自由度。</param>
        <summary>返回右尾 F 概率分布的反函数。如果 p = F_DIST_RT(x,...)，则 F_INV_RT(p,...) = x。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>在 F 检验中，可以使用 F 分布比较两个数据集的变化程度。例如，可以分析美国、加拿大的收入分布，判断这两个国家的收入变化程度是否相似。</para>
          <para>如果任一参数为非数值型，<b>则 f_inv_rt 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 probability &lt; 0 或 probability &gt; 1，<b>则 f_inv_rt 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 degrees_freedom1 或 degrees_freedom2 不是整数，则将被截尾取整。</para>
          <para>如果 degrees_freedom1 &lt; 1 或 degrees_freedom1 ≥ 10 ^10，<b>则 f_inv_rt 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 degrees_freedom2 &lt; 1 或 degrees_freedom2 ≥ 10 ^10，<b>则 f_inv_rt 将</b>返回 #NUM ！ 错误值。</para>
          <para>
            <b>则 f_inv_rt 将</b>可以用于从 F 分布返回临界值。 例如，通常差计算的输出包括 F 统计、 F 概率和水平参数为 0.05 F 临界值的数据。 若要返回 F 临界值，请使用用作<b>F_Inv_RT</b>的概率参数的重要性级别。</para>
          <para>概率给定一个值，<b>则 f_inv_rt 将</b>搜寻 x 满足该值，则 f_dist_rt 将 （x、 degrees_freedom1 或 degrees_freedom2） = 概率。 因此，<b>则 f_inv_rt 将</b>精度取决精度<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />。 <b>则 f_inv_rt 将</b>使用的迭代搜索方法。 如果搜索不收敛 64 次迭代后，该函数将返回 # n/A 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Test">
      <MemberSignature Language="C#" Value="public double F_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16875)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">array1 - 第一个数据数组或数据区域。</param>
        <param name="Arg2">array2 - 第二个数据数组或数据区域。</param>
        <summary>返回 F 检验的结果。F 检验返回的是当 array1 和 array2 的方差无明显不同时的双尾概率。可以使用此函数来确定两个样本的方差是否不同。例如，给定公立和私立学校的测试成绩，可以检验各学校间测试成绩的差别程度。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数必须是数字，或是包含数字的名称、数组或引用。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果 array1 或 array2 中数据点的个数小于 2，或者 array1 或 array2 的方差为零，<b>则 F_Test</b>将返回 #DIV/0 ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fact">
      <MemberSignature Language="C#" Value="public double Fact (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fact([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fact(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fact (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fact(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16568)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要计算其阶乘的非负数。如果 number 不是整数，则将被截尾取整。</param>
        <summary>返回数字的阶乘。 一个数的阶乘是等于 1*2*3 *...* 号码。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FactDouble">
      <MemberSignature Language="C#" Value="public double FactDouble (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FactDouble([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FactDouble(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FactDouble (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FactDouble(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16799)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要返回其双倍阶乘的值。如果 number 不是整数，则将被截尾取整。</param>
        <summary>返回数字的双倍阶乘。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number 为非数值型，<b>则 factdouble 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 number 为负数，<b>则 factdouble 将</b>返回 #NUM ！。 错误值。 </para>
          <para>如果 number 为偶数：

 </para>
          <para>图 1： 偶数的等式</para>
          <para></para>
          <para></para>
          <para>如果 number 为奇数：

</para>
          <para>图 2： 奇数的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FDist">
      <MemberSignature Language="C#" Value="public double FDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16665)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 用于计算函数的值。</param>
        <param name="Arg2">degrees_freedom1 - 分子的自由度。</param>
        <param name="Arg3">degrees_freedom2 - 分母的自由度。</param>
        <summary>返回 F 概率分布。可以使用此函数确定两个数据集是否存在变化程度上的不同。例如，可以分析进入高校的男生、女生的考试分数，确定女生分数的变化程度是否与男生不同。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" />方法。</para>
          <para>如果任一参数为非数值型，<b>则 fdist 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 x 为负数，<b>则 fdist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 degrees_freedom1 或 degrees_freedom2 不是整数，则将被截尾取整。</para>
          <para>如果 degrees_freedom1 &lt; 1 或 degrees_freedom1 ≥ 10 ^10，<b>则 fdist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 degrees_freedom2 &lt; 1 或 degrees_freedom2 ≥ 10 ^10，<b>则 fdist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>
            <b>FDist</b>的计算公式为 FDIST = P (F&gt;x)，其中 F 为呈 F 分布自由度为 degrees_freedom1 和 degrees_freedom2 的随机变量。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterXML">
      <MemberSignature Language="C#" Value="public object FilterXML (string Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FilterXML([in]string Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FilterXML(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterXML (Arg1 As String, Arg2 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FilterXML(System::String ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16979)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">有效的 xml 字符串。</param>
        <param name="Arg2">XPath 查询字符串。</param>
        <summary>从返回的 XML，通常是从<b>WebService</b>函数调用获取特定的数据。</summary>
        <returns>
          <b>VARIANT</b>
        </returns>
        <remarks>
          <para>XPath 参数仅限于 1024年个字符。</para>
          <para>
            <b>FILTERXML</b>函数返回的用户指定的数据区域设置通过分析的结果。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public double Find (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Find([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16508)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">工作表名称。</param>
        <param name="Arg2">区域名称。</param>
        <param name="Arg3">精确限制查询的参数名称。</param>
        <summary>在工作表中查找特定信息。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindB">
      <MemberSignature Language="C#" Value="public double FindB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FindB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16589)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Find_text - 要查找的文本。</param>
        <param name="Arg2">Within_text - 包含要查找的文本的文本。</param>
        <param name="Arg3">Start_num - 指定要从其开始搜索的字符。within_text 中的第一个字符是编号为 1 的字符。如果省略 start_num，则假定其值为 1。</param>
        <summary>
          <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />和<b>findb 将</b>定位一个文本字符串中的第二个文本字符串，并从第二个文本字符串的第一个字符返回的第一个文本字符串的起始位置数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>：<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />用于用于使用单字节字符的语言设置 (SBC)，而<b>FindB</b>旨在用于使用双字节字符集 (DBCS) 的语言。 您的计算机上的默认语言设置影响采用以下方式的返回值：</para>
          <list type="bullet">
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />无论是单字节还是双字节，作为 1，无论默认语言设置，始终将每个字符，计数。</description>
            </item>
            <item>
              <description>已启用的编辑支持 DBCS 的语言，然后将其设置为默认语言时， 
                <b>findb 将</b>作为 2 计算每个双字节字符。 否则， <b>findb 将</b>作为 1 计算每个字符。</description>
            </item>
          </list>
          <para>支持 DBCS 的语言包括日语、中文（简体）、中文（繁体）和朝鲜语。</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />和<b>findb 将</b>区分大小写，并不允许使用通配符。 如果您不希望执行区分大小写的搜索或使用通配符字符，则可以使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />。 </para>
          <para>如果 find_text 为""（空文本），<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />将匹配搜索字符串中的第一个字符 （即，字符编号为 start_num 或 1）。 </para>
          <para>Find_text 不能包含任何通配符。</para>
          <para>如果 find_text 不会显示在 within_text 中，<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />和<b>findb 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 start_num 不大于零，<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />和<b>findb 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 start_num 大于 within_text 的长度，<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />和<b>findb 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>使用 start_num 跳过指定的数量的字符。 使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />作为示例，假设您正在使用的文本字符串"AYF0093。YoungMensApparel"。 若要查找的文本字符串的说明部分中的第一个"Y"数，将 start_num 设置为 8，因此不搜索文本的序列号部分。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />8 字符开头、 查找 find_text 处的下一个字符，并返回数字 9。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />始终在 within_text，计数如果 start_num 大于 1 则跳过的字符的开始返回字符的数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FInv">
      <MemberSignature Language="C#" Value="public double FInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16666)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">probability - 与 F 累积分布相关联的概率。</param>
        <param name="Arg2">degrees_freedom1 - 分子的自由度。</param>
        <param name="Arg3">degrees_freedom2 - 分母的自由度。</param>
        <summary>返回 F 概率分布的反函数。如果 p = FDIST(x,...)，则 FINV(p,...) = x。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" />方法。</para>
          <para>在 F 检验中，可以使用 F 分布比较两个数据集的变化程度。例如，可以分析美国、加拿大的收入分布，判断这两个国家的收入变化程度是否相似。</para>
          <para>如果任一参数为非数值型，<b>则 finv 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 probability &lt; 0 或 probability &gt; 1，<b>则 finv 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 degrees_freedom1 或 degrees_freedom2 不是整数，则将被截尾取整。</para>
          <para>如果 degrees_freedom1 &lt; 1 或 degrees_freedom1 ≥ 10 ^10，<b>则 finv 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 degrees_freedom2 &lt; 1 或 degrees_freedom2 ≥ 10 ^10，<b>则 finv 将</b>返回 #NUM ！ 错误值。</para>
          <para>
            <b>则 finv 将</b>可以用于从 F 分布返回临界值。 例如，通常差计算的输出包括 F 统计、 F 概率和水平参数为 0.05 F 临界值的数据。 若要返回 F 临界值，请使用用作<b>FInv</b>的概率参数的重要性级别。</para>
          <para>概率给定一个值，<b>则 finv 将</b>搜寻 x 满足该值，则 fdist 将 （x、 degrees_freedom1 或 degrees_freedom2） = 概率。 因此，<b>则 finv 将</b>精度取决精度<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" />。 <b>则 finv 将</b>使用的迭代搜索方法。 如果搜索不收敛 64 次迭代后，该函数将返回 # n/A 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fisher">
      <MemberSignature Language="C#" Value="public double Fisher (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fisher([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fisher(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fisher (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fisher(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16667)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 要对其进行变换的数值。</param>
        <summary>返回点 x 的 Fisher 变换。该变换生成一个正态分布而非偏斜的函数。使用此函数可以完成相关系数的假设检验。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 x 为非数值型，<b>则 Fisher</b>将返回 #VALUE ！ 错误值。 </para>
          <para>如果 x ≤-1 或 x ≥ 1，<b>则 Fisher</b>将返回 #NUM ！ 错误值。 </para>
          <para>Fisher 变换的计算公式为：</para>
          <para>图 1: Fisher 变换值的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FisherInv">
      <MemberSignature Language="C#" Value="public double FisherInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FisherInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FisherInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FisherInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FisherInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16668)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">y - 要对其执行逆变换的值。</param>
        <summary>返回 Fisher 变换的反函数值。使用此变换可以分析数据区域或数组之间的相关性。如果 y = FISHER(x)，则 FISHERINV(y) = x。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 y 为非数值型，<b>则 fisherinv 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>Fisher 变换反函数的计算公式为：</para>
          <para>图 1： 的 Fisher 逆变换值的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixed">
      <MemberSignature Language="C#" Value="public string Fixed (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Fixed([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fixed(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fixed (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16398)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要进行舍入并转换为文本的数字。</param>
        <param name="Arg2">Decimals - 小数点右边的位数。</param>
        <param name="Arg3">No_commas-逻辑值，如果<b>，则返回 true</b>，会阻止<b>Fixed</b>在返回的文本中包含逗号。</param>
        <summary>将数字舍入到指定的小数位数，使用句点和逗号，以十进制数格式对该数进行格式设置，并以文本形式返回结果。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>在 Microsoft Excel 中，Numbers 的最大有效位数不能超过 15 位，但 decimals 可达到 127 位。</para>
          <para>如果 decimals 为负数，则 number 向小数点的左边舍入。</para>
          <para>如果省略 decimals，则假定其值为 2。</para>
          <para>如果 no_commas 为<b>false</b>或被省略，然后返回的文本一样包含逗号。 </para>
          <para>主要差异之间格式的单元格包含数字的单元格命令 （格式菜单） 和格式的号码直接与固定函数是<b>固定</b>将其结果转换为文本。 使用单元格命令设置格式的数字仍是一个数字。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public double Floor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Floor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16669)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要进行舍入的数值。</param>
        <param name="Arg2">Significance - 用以进行舍入计算的倍数。</param>
        <summary>将 number 向下舍入（向零的方向），使其等于最接近的 significance 的倍数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" />方法。</para>
          <para>如果任一参数为非数值型，则<b>Floor</b>将返回 #VALUE ！ 错误值。 </para>
          <para>如果 number 和 significance 不同，则<b>Floor</b>将返回 #NUM ！ 错误值。 </para>
          <para>不论 number 的符号如何，向远离零的方向调整时，值都会向下舍入。如果 number 正好是 significance 的倍数，则无需进行任何舍入处理。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Math">
      <MemberSignature Language="C#" Value="public double Floor_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16976)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要进行舍入的值。</param>
        <param name="Arg2">多个要进行舍入到。</param>
        <param name="Arg3">在给定非零值，此函数将数字向零舍入。</param>
        <summary>向下、 最接近的整数或最接近 significance 的倍数，则舍入数字。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Precise">
      <MemberSignature Language="C#" Value="public double Floor_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16931)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要进行舍入的数值。</param>
        <param name="Arg2">Significance - 用以进行舍入计算的倍数。</param>
        <summary>将指定的数字舍入为最接近的有效位倍数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>根据 number 和 significance 参数的符号，<b>Floor_Precise</b> 方法离零舍入或向零舍入。</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>离零舍入。</description>
            </item>
            <item>
              <term>+/+</term>
              <description>向零舍入。</description>
            </item>
            <item>
              <term>-/+</term>
              <description>离零舍入。</description>
            </item>
            <item>
              <term>+/-</term>
              <description>向零舍入。</description>
            </item>
          </list>
          <para>如果任一参数为非数值型， <b>Floor_Precise</b>方法将生成一个错误。 </para>
          <para>如果 number 正好是 significance 的倍数，则无需进行任何舍入处理。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Forecast">
      <MemberSignature Language="C#" Value="public double Forecast (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Forecast([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Forecast(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Forecast (Arg1 As Double, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Forecast(double Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16693)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - 要预测其值的数据点。</param>
        <param name="Arg2">Known_y's - 相关数据数组或数据区域。</param>
        <param name="Arg3">Known_x's - 独立数据数组或数据区域。</param>
        <summary>根据已有的数值计算或预测未来值。此预测值为基于给定的 x 值推导出的 y 值。已知的数值为已有的 x 值和 y 值，再利用线性回归对新值进行预测。可以使用该函数对未来销售额、库存需求或消费趋势进行预测。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 x 为非数值型，则<b>Forecast</b>将返回 #VALUE ！。 错误值。 </para>
          <para>如果 known_y's 和 known_x's 为空或包含的数据点个数不同，则<b>Forecast</b>将返回 # n/A 错误值。 </para>
          <para>如果 known_x's 的方差等于零，则<b>Forecast</b>将返回 #DIV/0 ！ 错误值。 </para>
          <para>
            <b>Forecast</b>的计算公式为 a + bx，其中： </para>
          <para>图 1： 的 Forecast 方法的等式</para>
          <para></para>
          <para></para>
          <para>和：</para>
          <para>图 2： 的 Forecast 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中 x 和 y 为样本平均数 AVERAGE(known_x's) 和 AVERAGE(known y's)。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public object Frequency (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Frequency([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Frequency(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Frequency (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Frequency(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16636)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Data_array-的数组或引用一组您要为其计算频率的值。 如果 data_array 不包含任何值，<b>频率</b>将返回零的数组。</param>
        <param name="Arg2">列的数组或引用要向其中组 data_array 的时间间隔。 如果列不包含任何值，<b>频率</b>data_array 中返回元素的数。</param>
        <summary>频率计算值、 和数字的垂直数组，则返回的范围内出现值。 例如，使用<b>频率</b>来计算考试成绩的分数的范围内的数目。 因为<b>频率</b>返回数组，它必须以数组公式的形式输入。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>选择要用于显示返回的分布到其中的相邻单元格区域后， 
            <b>frequency</b>应以数组公式的形式输入。 </para>
          <para>在返回的数组的元素数是一个大于中列的元素数。 返回的数组中的额外元素返回任何值上方的最高的时间间隔的计数。 例如时计数的值 （间隔） 的三个单元格中输入的三个范围，请确保输入四个单元格中的<b>频率</b>的结果。 额外的单元格在 data_array 超过第三个间隔值的返回值的数目。 </para>
          <para>
            <b>Frequency</b>将忽略空白单元格和文本。 </para>
          <para>对于返回结果为数组的公式，必须以数组公式的形式输入。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FTest">
      <MemberSignature Language="C#" Value="public double FTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16694)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">array1 - 第一个数据数组或数据区域。</param>
        <param name="Arg2">array2 - 第二个数据数组或数据区域。</param>
        <summary>返回 F 检验的结果。F 检验返回的是当 array1 和 array2 的方差无明显不同时的双尾概率。可以使用此函数来确定两个样本的方差是否不同。例如，给定公立和私立学校的测试成绩，可以检验各学校间测试成绩的差别程度。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" />方法。</para>
          <para>参数必须是数字，或是包含数字的名称、数组或引用。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果 array1 或 array2 中数据点的个数小于 2，或者 array1 或 array2 的方差为零，<b>则 FTest</b>将返回 #DIV/0 ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fv">
      <MemberSignature Language="C#" Value="public double Fv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate - 各期利率。</param>
        <param name="Arg2">Nper - 年金中的总付款期数。</param>
        <param name="Arg3">Pmt - 各期所应支付的金额；其数值在整个年金期间保持不变。通常 pmt 包括本金和利息，但不包括其他费用及税款。如果省略 pmt，则必须包括 pv 参数。</param>
        <param name="Arg4">Pv - 现值，或一系列未来付款当前所值的累积和。如果省略 pv，则假定其值为 0（零），并且必须包括 pmt 参数。</param>
        <param name="Arg5">Type - 数字 0 或 1，用以指示付款时间。如果省略 type，则假定其值为 0。</param>
        <summary>基于固定利率和等额分期付款方式，返回某项投资的未来值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>有关<b>Fv</b>中各参数的详细说明及年金函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />。</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>期末</description>
            </item>
            <item>
              <term>1</term>
              <description>期初</description>
            </item>
          </list>
          <para>请确保用于指定 rate 和 nper 的单位的一致性。例如，同样是四年期年利率为 12% 的贷款，如果按月支付，rate 应为 12%/12，nper 应为 4*12；如果按年支付，rate 应为 12%，nper 为 4。</para>
          <para>在所有参数中，支出的款项，如银行存款，表示为负数；收入的款项，如股息支票，表示为正数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FVSchedule">
      <MemberSignature Language="C#" Value="public double FVSchedule (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FVSchedule([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FVSchedule(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FVSchedule (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FVSchedule(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16860)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Principal - 现值。</param>
        <param name="Arg2">Schedule - 要应用的利率数组。</param>
        <summary>基于一系列复利返回本金的未来值。函数 FVSCHEDULE 用于计算某项投资在变动或可调利率下的未来值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>计划中的值可以是数字或空白单元格;任何其他值产生 #VALUE ！ <b>FVSchedule</b>的错误值。 空白单元格被认为是 0 （无意义）。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma">
      <MemberSignature Language="C#" Value="public double Gamma (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16959)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">要为其计算伽玛值。</param>
        <summary>返回 γ 函数值。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Dist">
      <MemberSignature Language="C#" Value="public double Gamma_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16879)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 用于计算分布的值。</param>
        <param name="Arg2">alpha - 分布参数。</param>
        <param name="Arg3">beta - 分布参数。 如果 beta = 1，<b>则 gamma_dist 将</b>返回标准 γ 分布。</param>
        <param name="Arg4">Cumulative-决定函数的形式一个逻辑值。 如果累积为<b>true</b>，<b>则 gamma_dist 将</b>返回累积分布函数;如果<b>false</b>，则将返回概率密度函数。</param>
        <summary>返回 γ 分布函数值。可以使用此函数来研究具有偏态分布的变量。γ 分布通常用于队列分析。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果，x、 alpha 或 beta 为非数值型，<b>则 gamma_dist 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 x &lt; 0，<b>则 gamma_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 alpha ≤ 0 或 beta ≤ 0，<b>则 gamma_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>伽玛概率密度函数的计算公式为： 

 </para>
          <para>图 1： 伽玛概率密度函数</para>
          <para></para>
          <para></para>
          <para>标准伽玛概率密度函数为：</para>
          <para>图 2： 标准伽玛概率密度函数</para>
          <para></para>
          <para></para>
          <para>当 alpha = 1，<b>则 gamma_dist 将</b>返回指数分布：</para>
          <para>图 3： 等式</para>
          <para></para>
          <para></para>
          <para>对于正整数 n，当 alpha = n/2，beta = 2 且 cumulative = <b>true</b>，<b>则 gamma_dist 将</b>返回 (1-CHIDIST(x)) 自由度为 n。 </para>
          <para>如果 alpha 为正整数，<b>则 gamma_dist 将</b>是也称为 Erlang 分布。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Inv">
      <MemberSignature Language="C#" Value="public double Gamma_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16880)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">probability - 与 γ 分布相关联的概率。</param>
        <param name="Arg2">alpha - 分布参数。</param>
        <param name="Arg3">beta - 分布参数。 如果 beta = 1，<b>则 gamma_inv 将</b>返回标准 γ 分布。</param>
        <summary>返回 γ 累积分布函数的反函数。如果 p = GAMMA_DIST(x,...)，则 GAMMA_INV(p,...) = x。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>可以使用此函数研究可能出现偏态分布的变量。</para>
          <para>如果任一参数为文本，<b>则 gamma_inv 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 probability &lt; 0 或 probability &gt; 1，<b>则 gamma_inv 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 alpha ≤ 0 或 beta ≤ 0，<b>则 gamma_inv 将</b>返回 #NUM ！ 错误值。</para>
          <para>概率给定一个值，<b>则 gamma_inv 将</b>搜寻 x 满足该值 （x、 alpha 或 beta，TRUE），则 gamma_dist 将 = 概率。 因此，<b>则 gamma_inv 将</b>精度取决精度<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />。 <b>则 gamma_inv 将</b>使用的迭代搜索方法。 如果搜索不收敛 100 次迭代后，该函数将返回 # n/A 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaDist">
      <MemberSignature Language="C#" Value="public double GammaDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16670)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 用于计算分布的值。</param>
        <param name="Arg2">alpha - 分布参数。</param>
        <param name="Arg3">beta - 分布参数。 如果 beta = 1，<b>则 gammadist 将</b>返回标准 γ 分布。</param>
        <param name="Arg4">Cumulative-决定函数的形式一个逻辑值。 如果累积为<b>true</b>，<b>则 gammadist 将</b>返回累积分布函数;如果<b>false</b>，则将返回概率密度函数。</param>
        <summary>返回 γ 分布函数值。可以使用此函数来研究具有偏态分布的变量。γ 分布通常用于队列分析。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />方法。</para>
          <para>如果，x、 alpha 或 beta 为非数值型，<b>则 gammadist 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 x &lt; 0，<b>则 gammadist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 alpha ≤ 0 或 beta ≤ 0，<b>则 gammadist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>伽玛概率密度函数的计算公式为： 

 </para>
          <para>图 1： 伽玛概率密度函数</para>
          <para></para>
          <para></para>
          <para>标准伽玛概率密度函数为：</para>
          <para>图 2： 标准伽玛概率密度函数</para>
          <para></para>
          <para></para>
          <para>当 alpha = 1，<b>则 gammadist 将</b>返回指数分布：</para>
          <para>图 3： 等式</para>
          <para></para>
          <para></para>
          <para>对于正整数 n，当 alpha = n/2，beta = 2 且 cumulative = <b>true</b>，<b>则 gammadist 将</b>返回 (1-CHIDIST(x)) 自由度为 n。 </para>
          <para>如果 alpha 为正整数，<b>则 gammadist 将</b>是也称为 Erlang 分布。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaInv">
      <MemberSignature Language="C#" Value="public double GammaInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16671)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">probability - 与 γ 分布相关联的概率。</param>
        <param name="Arg2">alpha - 分布参数。</param>
        <param name="Arg3">beta - 分布参数。 如果 beta = 1，<b>则 gammainv 将</b>返回标准 γ 分布。</param>
        <summary>返回 γ 累积分布函数的反函数。如果 p = GAMMADIST(x,...)，则 GAMMAINV(p,...) = x。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" />方法。</para>
          <para>可以使用此函数研究可能出现偏态分布的变量。</para>
          <para>如果任一参数为文本，<b>则 gammainv 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 probability &lt; 0 或 probability &gt; 1，<b>则 gammainv 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 alpha ≤ 0 或 beta ≤ 0，<b>则 gammainv 将</b>返回 #NUM ！ 错误值。</para>
          <para>概率给定一个值，<b>则 gammainv 将</b>搜寻 x 满足该值 （x、 alpha 或 beta，TRUE），则 gammadist 将 = 概率。 因此，<b>则 gammainv 将</b>精度取决精度<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" />。 <b>则 gammainv 将</b>使用的迭代搜索方法。 如果搜索不收敛 64 次迭代后，该函数将返回 # n/A 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn">
      <MemberSignature Language="C#" Value="public double GammaLn (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16655)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - 要计算其 GAMMALN 的值。</param>
        <summary>返回 γ 函数的自然对数 Γ(x)。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" />方法。</para>
          <para>如果 x 为非数值型，<b>则 GammaLn</b>将返回 #VALUE ！ 错误值。 </para>
          <para>如果 x ≤ 0，<b>则 GammaLn</b>将返回 #NUM ！ 错误值。 </para>
          <para>数字 e 的 GAMMALN(i)（i 为整数）次幂的返回值与 (i - 1)! 的结果相同。</para>
          <para>
            <b>GammaLn</b>的计算公式如下： </para>
          <para>图 1： 的 GammaLn 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>图 2： 等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn_Precise">
      <MemberSignature Language="C#" Value="public double GammaLn_Precise (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn_Precise([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn_Precise (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn_Precise(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16929)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - 要计算其 GAMMALN 的值。</param>
        <summary>返回 γ 函数的自然对数 Γ(x)。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 x 为非数值，<b>GammaLn_Precise</b> 方法将返回错误。</para>
          <para>如果 x ≤ 0，<b>GammaLn_Precise</b> 方法将返回错误。</para>
          <para>数字 e 的 GAMMALN(i)（i 为整数）次幂的返回值与 (i - 1)! 的结果相同。</para>
          <para>GAMMALN 的计算公式如下： 

 </para>
          <para>图 1： 的 GammaLn_Precise 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>图 2： 等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Gauss">
      <MemberSignature Language="C#" Value="public double Gauss (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gauss([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gauss(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gauss (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gauss(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16961)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">要计算其分布的值。</param>
        <summary>返回 0.5 小于标准的正态累积分布。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gcd">
      <MemberSignature Language="C#" Value="public double Gcd (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gcd(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gcd (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16857)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 为 1 到 29 个值，如果任一值不是整数，则将被截尾取整。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回两个或多个整数的最大公约数，最大公约数是能分别将 Number1 和 Number2 除尽的最大整数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 gcd 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果任一参数小于零，<b>则 gcd 将</b>返回 #NUM ！。 错误值。 </para>
          <para>任何值都能被 1 整除。</para>
          <para>素数只能被其本身和 1 整除。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GeoMean">
      <MemberSignature Language="C#" Value="public double GeoMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeoMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeoMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeoMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16703)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 要计算其平均值的 1 到 30 个参数。也可以不使用这种用逗号分隔参数的形式，而使用一个数组或一个对数组的引用。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回正数数组或区域的几何平均值。例如，可以使用函数 GEOMEAN 计算可变复利的平均增长率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入参数列表的逻辑值和数字的文本表示也包括在内。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>如果任一数据点 ≤ 0，<b>则 geomean 将</b>返回 #NUM ！ 错误值。 </para>
          <para>几何平均值的计算公式为：

 </para>
          <para>图 1： 的几何平均数的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GeStep">
      <MemberSignature Language="C#" Value="public double GeStep (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeStep([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeStep(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeStep (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16803)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要依据 step 检验的值。</param>
        <param name="Arg2">步骤-阈值。 如果省略步骤的值，<b>则 gestep 将</b>使用零。</param>
        <summary>返回 1 号 ≥ 步骤; 如果否则将返回 0 （零）。 使用此函数筛选一组值。 例如，通过对求和个<b>GeStep</b>函数计算超过了阈值的值的计数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 gestep 将</b>返回 #VALUE ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Growth">
      <MemberSignature Language="C#" Value="public object Growth (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Growth([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Growth (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16436)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y's - 关系表达式 y=b*m^x 中一组已知的 y 值。</param>
        <param name="Arg2">Known_x's - 关系表达式 y=b*m^x 中一组已知的 x 值，为可选参数。</param>
        <param name="Arg3">New_x's-的新 x 值要为其返回对应 y 值的<b>增长</b>。</param>
        <param name="Arg4">Const - 一个逻辑值，用于指定是否强制常量 b 等于 1。</param>
        <summary>通过使用现有数据计算预测指数增长。 <b>Growth</b>将返回为一系列使用现有的 x 值和 y 值指定的新 x 值的 y 值。 您可以使用<b>增长</b>工作表函数以适应指数曲线到现有的 x 值和 y 值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
				如果数组 known_y's 在单独一列中，则 known_x's 的每一列被解释为一个独立的变量。
</para>
          <para>
				如果数组 known_y's 在单独一行中，则 known_x's 的每一行被解释为一个独立的变量。
</para>
          <para>如果 known_y's 中数字的任何为零或为负数，则<b>Growth</b>将返回 #NUM ！ 错误值。 </para>
          <para>
				数组 known_x's 可以包含一组或多组变量。如果只用到一个变量，只要 known_y's 和 known_x's 维数相同，它们就可以是任何形状的区域。如果用到多个变量，则 known_y's 必须为向量（即必须为一行或一列）。
</para>
          <para>
				如果省略 known_x's，则假定该数组为 {1,2,3,...}，其大小与 known_y's 相同。
</para>
          <para>
				New_x's 与 known_x's 一样，每个独立变量必须为单独的一列（或一行）。因此，如果 known_y's 是单列的，known_x's 和 new_x's 就必须有同样的列数。如果 known_y's 是单行的，known_x's 和 new_x's 就必须有同样的行数。
</para>
          <para>
				如果省略 new_x's，则假定它和 known_x's 相同。
</para>
          <para>
				如果 known_x's 与 new_x's 都被省略，则假定它们为数组 array {1,2,3,...}，其大小与 known_y's 相同。
</para>
          <para>如果 const 为<b>true</b>或被省略，b 将按正常方式计算。 </para>
          <para>如果 const 为<b>false</b>，b 将被设置为 1 和调整 m 值使 y = m ^ x。 </para>
          <para>对于返回结果为数组的公式，在选择正确的单元格个数后，必须以数组公式的形式输入。</para>
          <para>当为参数（如 known_x's）输入数组常量时，应当使用逗号分隔同一行中的各个值，用分号分隔不同行中的值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HarMean">
      <MemberSignature Language="C#" Value="public double HarMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HarMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HarMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HarMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16704)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 要计算其平均值的 1 到 30 个参数。也可以不使用这种用逗号分隔参数的形式，而使用一个数组或一个对数组的引用。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回一组数据的调和平均值。调和平均值与倒数的算术平均值互为倒数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>调和平均值总小于几何平均值，而几何平均值总小于算术平均值。</para>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入参数列表的逻辑值和数字的文本表示也包括在内。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>如果任一数据点 ≤ 0，<b>则 harmean 将</b>返回 #NUM ！ 错误值。 调和平均值的计算公式为：

 </para>
          <para>图 1： 调和平均值的计算公式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Bin">
      <MemberSignature Language="C#" Value="public string Hex2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16768)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要转换的十六进制数。Number 不能多于 10 个字符。最高位为符号位（从右算起第 40 位），其余 9 位是数字位。负数用二进制数的补码表示。</param>
        <param name="Arg2">位置-要使用的字符数。 如果省略位置，<b>则 hex2bin 将</b>使用的最小所需的字符数。 位置可用于填充带前导 0 （零） 的返回值。</param>
        <summary>将十六进制数转换为二进制数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number 为负数，则<b>Hex2Bin</b>将忽略 places，并返回 10 个字符的二进制数。 </para>
          <para>如果 number 为负数，则不能小于 FFFFFFFE00；如果 number 为正数，则不能大于 1FF。</para>
          <para>如果 number 不是有效的十六进制数，<b>则 hex2bin 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果<b>Hex2Bin</b>所需的字符数多于 places 指定的字符，则将返回 #NUM ！ 错误值。 如果 places 不是整数，则将被截尾取整。 </para>
          <para>如果 places 为非数值型，<b>则 hex2bin 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 places 为负数，<b>则 hex2bin 将</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Dec">
      <MemberSignature Language="C#" Value="public string Hex2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Hex2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16769)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要转换的十六进制数。Number 不能多于 10 个字符（40 位）。最高位为符号位，其余 39 位为数字位。负数用二进制数的补码表示。</param>
        <summary>将十六进制数转换为十进制数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number 不是有效的十六进制数，<b>则 hex2dec 将</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Oct">
      <MemberSignature Language="C#" Value="public string Hex2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16770)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要转换的十六进制数。Number 不能多于 10 个字符。最高位为符号位，其余 39 位为数字位。负数用二进制数的补码表示。</param>
        <param name="Arg2">位置-要使用的字符数。 如果省略位置，<b>则 hex2oct 将</b>使用的最小所需的字符数。 位置可用于填充带前导 0 （零） 的返回值。</param>
        <summary>将十六进制数转换为八进制数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number 为负数，则<b>Hex2Oct</b>将忽略 places，并返回 10 个字符表示的八进制数。 </para>
          <para>如果 number 为负数，则不能小于 FFE0000000；如果 number 为正数，则不能大于 1FFFFFFF。</para>
          <para>如果 number 不是有效的十六进制数，<b>则 hex2oct 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果<b>Hex2Oct</b>所需的字符数多于 places 指定的字符，则将返回 #NUM ！ 错误值。 </para>
          <para>如果 places 不是整数，则将被截尾取整。</para>
          <para>如果 places 为非数值型，<b>则 hex2oct 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 places 为负数，<b>则 hex2oct 将</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HLookup">
      <MemberSignature Language="C#" Value="public object HLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object HLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16485)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value - 要在表格首行中进行查找的值。Lookup_value 可以为值、引用或文本字符串。</param>
        <param name="Arg2">Table_array - 要在其中查找数据的信息表。可以使用对区域或区域名称的引用。</param>
        <param name="Arg3">Row_index_num-将从中返回的匹配值 table_array 中的行号。 1 row_index_num table_array 中返回的第一个行值，共 2 row_index_num 返回第二个行值中 table_array，依此类推。 如果 row_index_num 小于 1，则<b>HLookup</b>将返回 #VALUE ！ 错误值;如果 row_index_num 大于 table_array 上的行数，则<b>HLookup</b>将返回 #REF ！。 错误值。</param>
        <param name="Arg4">Range_lookup-一个逻辑值，指定是否希望<b>HLookup</b>查找完全匹配或近似匹配。 如果<b>，则返回 true</b>或被省略，则返回近似匹配。 换句话说，如果找不到完全匹配，则返回下一个小于 lookup_value 的最大值。 如果<b>false</b>， <b>HLookup</b>将查找完全匹配。 如果未找到一个对象，则返回错误值 # n/A。</param>
        <summary>搜索中首行的表或值的数组的值，并指定表或数组中的行的同一列中返回一个值。 比较值位于行中顶部的表的数据，并且您想要查看其指定数量的行时，请使用 HLookup。 使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />时要查找的数据的左侧列中位于比较值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果<b>hlookup 找</b>不到 lookup_value 且 range_lookup 为<b>true</b>，则使用小于 lookup_value 的最大值。 </para>
          <para>如果 lookup_value 小于 table_array 第一行中的最小值，则<b>HLookup</b>将返回错误值 # n/A。 </para>
          <para>如果 range_lookup 为 FALSE 且 lookup_value 为文本，则可在 lookup_value 中使用通配符，包括问号 (?) 和星号 (*)。问号可匹配任意的单个字符；星号可匹配任意一串字符。如果要查找实际的问号或星号，则请在该字符前键入一个波形符 (~)。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeom_Dist">
      <MemberSignature Language="C#" Value="public double HypGeom_Dist (double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]bool Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeom_Dist(double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16919)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">sample_s - 样本中成功的次数。</param>
        <param name="Arg2">number_sample - 样本的大小。</param>
        <param name="Arg3">population_s - 总体中成功的次数。</param>
        <param name="Arg4">number_population - 总体大小。</param>
        <param name="Arg5">Cumulative-决定函数的形式一个逻辑值。 如果累积为<b>true</b>，<b>则 hypgeom_dist 将</b>返回累积分布函数; 然后如果<b>false</b>，则将返回概率密度函数的。</param>
        <summary>返回超几何分布。 <b>则 hypgeom_dist 将</b>返回给定数量的示例成功，给定样本大小、 总体成功和总体大小的概率。 其中每个观察值或为成功或失败，且每个子集给定大小选择等可能，<b>则 hypgeom_dist 将</b>使用的有限总体，问题。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>所有参数都将被截尾取整。</para>
          <para>如果任一参数为非数值型，<b>则 hypgeom_dist 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 sample_s &lt; 0 或 sample_s 大于较小者 number_sample 或 population_s，<b>则 hypgeom_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 sample_s 小于较大的 0 或 (number_sample-number_population + population_s)，<b>则 hypgeom_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 number_sample ≤ 0 或 number_sample &gt; number_population，<b>则 hypgeom_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 population_s ≤ 0 或 population_s &gt; number_population，<b>则 hypgeom_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 number_population ≤ 0，<b>则 hypgeom_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>超几何分布的计算公式为： 

 </para>
          <para>图 1： 超几何分布的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>则 hypgeom_dist 将</b>进行不有限总体中使用。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeomDist">
      <MemberSignature Language="C#" Value="public double HypGeomDist (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeomDist(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeomDist(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16673)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">sample_s - 样本中成功的次数。</param>
        <param name="Arg2">number_sample - 样本的大小。</param>
        <param name="Arg3">population_s - 总体中成功的次数。</param>
        <param name="Arg4">number_population - 总体大小。</param>
        <summary>返回超几何分布。 <b>则 hypgeomdist 将</b>返回给定数量的示例成功，给定样本大小、 总体成功和总体大小的概率。 其中每个观察值或为成功或失败，且每个子集给定大小选择等可能，<b>则 hypgeomdist 将</b>使用的有限总体，问题。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" />方法。</para>
          <para>所有参数都将被截尾取整。</para>
          <para>如果任一参数为非数值型，<b>则 hypgeomdist 将</b>返回 #VALUE ！。 错误值。 </para>
          <para>如果 sample_s &lt; 0 或 sample_s 大于较小者 number_sample 或 population_s，<b>则 hypgeomdist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 sample_s 小于较大的 0 或 (number_sample-number_population + population_s)，<b>则 hypgeomdist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 number_sample ≤ 0 或 number_sample &gt; number_population，则 hypgeomdist 将返回 #NUM ！ 错误值。 </para>
          <para>如果 population_s ≤ 0 或 population_s &gt; number_population，<b>则 hypgeomdist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 number_population ≤ 0，<b>则 hypgeomdist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>超几何分布的计算公式为： 

 </para>
          <para>图 1： 超几何分布的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>则 hypgeomdist 将</b>进行不有限总体中使用。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfError">
      <MemberSignature Language="C#" Value="public object IfError (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfError([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfError(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfError (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfError(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16864)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - 检查是否有错误的参数。</param>
        <param name="Arg2">Value_if_error - 公式的计算结果为错误时要返回的值。将计算下列错误类型：#N/A、#VALUE!、#REF!、#DIV/0!、#NUM!、#NAME? 或 #NULL!。</param>
        <summary>返回一个值，该值指定是否公式计算结果为错误。否则，返回的公式的结果。 使用<b>IfError</b>函数可捕获并处理在公式中的错误。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果值或 value_if_error 是空单元格， <b>IfError</b>会将其视为空字符串 ("")。 </para>
          <para>如果值为数组公式， <b>IfError</b>将返回值中指定范围中的每个单元格的结果的数组。 请参阅下面的第二个示例。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfNa">
      <MemberSignature Language="C#" Value="public object IfNa (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfNa([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfNa(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfNa (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfNa(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16974)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">值： 任何值或表达式或引用。</param>
        <param name="Arg2">value_if_na： 任何值或表达式或引用。</param>
        <summary>返回指定是否表达式解析为 # n/A，将其否则为的值返回表达式的结果。</summary>
        <returns>
          <b>VARIANT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImAbs">
      <MemberSignature Language="C#" Value="public string ImAbs (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImAbs([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImAbs(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImAbs (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImAbs(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16783)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - 要计算其绝对值的复数。</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的复数的绝对值（模）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。 </para>
          <para>复数绝对值的计算公式为：

 </para>
          <para>复数的图 1： 的绝对值的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>z = x + yi</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Imaginary">
      <MemberSignature Language="C#" Value="public double Imaginary (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Imaginary([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Imaginary(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imaginary (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Imaginary(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16793)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - 要计算其虚系数的复数。</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的复数的虚系数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImArgument">
      <MemberSignature Language="C#" Value="public string ImArgument (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImArgument([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImArgument(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImArgument (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImArgument(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16791)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber 是您希望参数 theta 的复数。</param>
        <summary>返回参数 (theta)，以弧度表示的角以便：</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。 </para>
          <para>
            <b>ImArgument</b>的计算公式如下： </para>
          <para>图 1: ImArgument 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>图 2： 等式</para>
          <para></para>
          <para></para>
          <para>和</para>
          <para>z = x + yi</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImConjugate">
      <MemberSignature Language="C#" Value="public string ImConjugate (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImConjugate([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImConjugate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImConjugate (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImConjugate(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16792)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - 要计算其共轭复数的复数。</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的复数的共轭复数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。 </para>
          <para>复数的共轭复数的计算公式为： </para>
          <para>共轭复数的图 1： 等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCos">
      <MemberSignature Language="C#" Value="public string ImCos (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCos([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCos(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCos (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCos(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16789)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - 要计算其余弦值的复数。</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的复数的余弦值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。 </para>
          <para>Inumber 是一个逻辑值，如果<b>ImCos</b>将返回 #VALUE ！。 错误值。 </para>
          <para>复数余弦的计算公式为：

 </para>
          <para>图 1： 的复数的余弦值</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCosh">
      <MemberSignature Language="C#" Value="public string ImCosh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCosh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCosh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCosh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCosh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16978)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要为其双曲余弦值的复数。</param>
        <summary>返回一个复杂的数字的双曲余弦值。</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCot">
      <MemberSignature Language="C#" Value="public string ImCot (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCot([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCot(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCot (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCot(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16941)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要为其余切的复数。</param>
        <summary>返回一个复杂的数字的余切。</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsc">
      <MemberSignature Language="C#" Value="public string ImCsc (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsc([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsc(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsc (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsc(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16942)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要为其余割的复数。</param>
        <summary>返回的复数的余割。</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsch">
      <MemberSignature Language="C#" Value="public string ImCsch (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsch([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsch(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsch (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsch(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16943)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要为其双曲余割的复数。</param>
        <summary>返回一个复杂的数字的双曲余割。</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImDiv">
      <MemberSignature Language="C#" Value="public string ImDiv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImDiv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImDiv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImDiv (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImDiv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16781)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1 - 作为分子或被除数的复数。</param>
        <param name="Arg2">Inumber2 - 作为分母或除数的复数。</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的两个复数的商。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。 </para>
          <para>两个复数的商的计算公式为：

 </para>
          <para>图 1： 个复数的两个复数的商</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImExp">
      <MemberSignature Language="C#" Value="public string ImExp (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImExp([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImExp(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImExp (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImExp(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16790)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - 要计算其指数的复数。</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的复数的指数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。 </para>
          <para>复数的指数的计算公式为：

 </para>
          <para>图 1： 的复数的指数</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLn">
      <MemberSignature Language="C#" Value="public string ImLn (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLn([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLn(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLn (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLn(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16785)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - 要计算其自然对数的复数。</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的复数的自然对数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。 </para>
          <para>复数的自然对数的计算公式为：

 </para>
          <para>图 1： 自然对数的复数的</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>图 2： 等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog10">
      <MemberSignature Language="C#" Value="public string ImLog10 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog10([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog10(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog10 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog10(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16787)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - 要计算其常用对数的复数。</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的复数的常用对数（以 10 为底数）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。 </para>
          <para>复数的常用对数可按以下公式通过自然对数计算得出：

 </para>
          <para>复数的图 1： 的常用对数的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog2">
      <MemberSignature Language="C#" Value="public string ImLog2 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog2([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog2(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog2 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog2(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16786)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - 要计算其以 2 为底数的对数的复数。</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的复数的以 2 为底数的对数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。 </para>
          <para>复数的以 2 为底数的对数可按以下公式通过自然对数计算得出：

 </para>
          <para>复数的图 1： 的基本 2 对数的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImPower">
      <MemberSignature Language="C#" Value="public string ImPower (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImPower([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImPower(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImPower (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImPower(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16782)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - 要计算其乘幂的复数。</param>
        <param name="Arg2">Number - 要对复数计算的幂次。</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的复数的乘幂。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。 </para>
          <para>如果 number 为非数值型，<b>则 ImPower</b>将返回 #VALUE ！ 错误值。 </para>
          <para>Number 可以为整数、分数或负数。</para>
          <para>复数乘幂的计算公式为: 

 </para>
          <para>图 1： 公式复数乘幂</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>图 2： 等式</para>
          <para></para>
          <para></para>
          <para>和：</para>
          <para>图 3： 等式</para>
          <para></para>
          <para></para>
          <para>和：</para>
          <para>图 4： 等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImProduct">
      <MemberSignature Language="C#" Value="public string ImProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16797)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1, inumber2,... - 要相乘的 1 到 29 个复数。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的 2 到 29 个复数的乘积。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。 </para>
          <para>两个复数的乘积的计算公式为：</para>
          <para>图 1： 乘积的两个复数的乘积</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImReal">
      <MemberSignature Language="C#" Value="public double ImReal (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ImReal([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImReal(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImReal (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ImReal(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16794)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - 要计算其实系数的复数。</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的复数的实系数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSec">
      <MemberSignature Language="C#" Value="public string ImSec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16944)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要为其双曲余割的复数。</param>
        <summary>返回一个复杂的数字的双曲余割。</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSech">
      <MemberSignature Language="C#" Value="public string ImSech (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSech([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSech(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSech (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSech(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16945)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要为其双曲正割的复数。</param>
        <summary>返回的复数的正割。</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSin">
      <MemberSignature Language="C#" Value="public string ImSin (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSin([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSin(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSin (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSin(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16788)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - 要计算其正弦值的复数。</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的复数的正弦值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。 </para>
          <para>复数的正弦值的计算公式为：

 </para>
          <para>图 1： 的复数的正弦值</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSinh">
      <MemberSignature Language="C#" Value="public string ImSinh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSinh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSinh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSinh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSinh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16977)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要为其双曲正弦值的复数。</param>
        <summary>返回一个复杂的数字的双曲正弦值。</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSqrt">
      <MemberSignature Language="C#" Value="public string ImSqrt (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSqrt([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSqrt(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSqrt (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSqrt(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16784)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - 要计算其平方根的复数。</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的复数的平方根。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。 复数平方根的计算公式为：

 </para>
          <para>图 1： 平方根的复数</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>图 2： 等式</para>
          <para></para>
          <para></para>
          <para>和：</para>
          <para>图 3： 等式</para>
          <para></para>
          <para></para>
          <para>和：</para>
          <para>图 4： 等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSub">
      <MemberSignature Language="C#" Value="public string ImSub (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSub([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSub(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSub (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSub(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16780)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1 - 作为被减数的复数。</param>
        <param name="Arg2">Inumber2 - 作为减数的复数。</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的两个复数的差。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。</para>
          <para>两个复数的差的计算公式为：

</para>
          <para>两个复数的图 1： 差</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSum">
      <MemberSignature Language="C#" Value="public string ImSum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16796)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1,inumber2,... - 1 到 29 个需要相加的复数。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回以 x + yi 或 x + yj 文本格式表示的两个或更多个复数的和。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />将实系数和虚系数转换为复数。 </para>
          <para>两个复数的和的计算公式为：

</para>
          <para>图 1： 总和的两个复数的乘积</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImTan">
      <MemberSignature Language="C#" Value="public string ImTan (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImTan([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImTan(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImTan (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImTan(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16940)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要为其正切值的复数。</param>
        <summary>返回的复数的正切值。</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public object Index (object Arg1, double Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Index([in]object Arg1, [in]float64 Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Index(System.Object,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Index (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16413)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array 或 Reference - 一个单元格区域或一个数组常量。对引用来说，是对一个或多个单元格区域的引用。</param>
        <param name="Arg2">Row_num - 数组中某行的行号，函数从该行返回值。如果 row_num 省略，则 column_num 必选。对引用来说，row_num 为引用中某行的行号，函数从该行返回一个引用</param>
        <param name="Arg3">Column_num - 数组中某列的列号，函数从该列返回值。如果 column_num 省略，则 row_num 必选。对引用来说，column_num 为引用中某列的列号，函数从该列返回一个引用。</param>
        <param name="Arg4">Area_num-返回引用时才使用。 选择要从中返回 row_num 和 column_num 交叉引用中的范围。 选择或输入的第一个区域为编号的 1，第二个为 2，依此类推。 如果省略 area_num，<b>索引</b>使用区域 1。</param>
        <summary>返回一个值或从表或范围内的值的引用。 有两种形式的<b>Index</b>函数： 数组形式和引用形式。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>数组形式</para>
          <para>返回表元素或数组元素的值，该元素是通过行号和列号索引选定的。</para>
          <para>如果<b>Index</b>的第一个参数为数组常量，请使用数组形式。</para>
          <para>如果使用的 row_num 和 column_num 参数， <b>Index</b>将返回 row_num 和 column_num 交叉处单元格中的值。 </para>
          <para>如果将 row_num 或 column_num 设置为 0 （零）， <b>Index</b>将分别返回的行或整列的值的数组。 若要使用以数组形式返回的值，<b>索引</b>函数作为输入数组公式和垂直列单元格区域中水平行的单元格区域。 若要输入数组公式，请按 CTRL + SHIFT + ENTER。 </para>
          <para>Row_num 和 column_num 必须指向 array; 中的单元格否则， <b>Index</b>将返回 #REF ！ 错误值。 </para>
          <para>引用形式</para>
          <para>返回特定的行列交叉处单元格的引用。如果该引用由非相邻的选定区域组成，则可以选择要查看的选定区域。 如果 reference 中的每个区域只包含一行或一列，则参数 row_num 或 column_num 分别为可选项。例如，对于一行的引用，可以使用 INDEX(reference,,column_num)。</para>
          <para>Row_num 和 column_num 交叉引用和 area_num 选择特定范围后，选择一个特定的单元格： row_num 1 是范围中的第一行，column_num 1 是第一列，等等。 返回按<b>索引</b>引用是 row_num 和 column_num 交叉交集。 </para>
          <para>如果将 row_num 或 column_num 设置为 0 （零）， <b>Index</b>将分别返回整列或行的引用。</para>
          <para>Row_num 和 column_num，area_num 必须指向引用; 内的单元格否则， <b>Index</b>将返回 #REF ！ 错误值。 如果省略 row_num 和 column_num 交叉，<b>索引</b>引用指定 area_num 中返回的区域。 </para>
          <para>
            <b>索引</b>函数的结果是的引用，并在其他公式中也被解释为。 公式中，根据索引的返回值可能用作一个引用或作为值。 例如，公式的单元格 （"宽度"，索引 (A1:B2，1，2)） 等于 CELL("width",B1)。 单元格函数将返回的索引值用作单元格引用。 另一方面，如 2*INDEX(A1:B2,1,2) 公式转换成单元格 B1 中<b>索引</b>的返回值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intercept">
      <MemberSignature Language="C#" Value="public double Intercept (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Intercept([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intercept (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Intercept(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16695)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y's - 相关观察值或数据的集合。</param>
        <param name="Arg2">Known_x's - 独立观察值或数据的集合。</param>
        <summary>计算行将使用现有的 x 值和 y 值的 y 轴相交的点。 Intercept 点是基于绘制通过已知的 x 值最佳位置的回归线，已知的 y 值。 当您希望自变量为 0 （零） 时确定因变量的值时，请使用<b>Intercept</b>函数。 例如，可以使用<b>Intercept</b>函数预测金属的电源愿意在 0 ° C 时数据点拍摄会议室温度在或更高。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数应为数字，或者是包含数字的名称、数组或引用。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果 known_y's 和 known_x's 包含的数据点个数不同，或不包含数据点， <b>Intercept</b>将返回 # n/A 错误值。 </para>
          <para>回归线 a 的截距的计算公式为：

</para>
          <para>回归直线的图 1： 的截距的等式</para>
          <para></para>
          <para></para>
          <para>其中，斜率 b 的计算公式为：</para>
          <para>图 2： 斜率的等式</para>
          <para></para>
          <para></para>
          <para>其中 x 和 y 为样本平均数 AVERAGE(known_x's) 和 AVERAGE(known_y's)。</para>
          <para>
            <b>Intercept</b>中使用的基础算法和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />功能时使用的基础算法以外的其他<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />函数。 确定，并且已共线数据时，这些算法之间的差异可能导致不同的结果。 例如，如果 known_y's 参数的数据点是 0 和 known_x's 参数的数据点，1: </para>
          <list type="bullet">
            <item>
              <description>
                <b>截获</b>和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />返回 #DIV/0 ！ 错误。 <b>截获</b>和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />算法旨在查找且只有一个回答，并在这种情况下可以有多个答案。 </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />返回值为 0。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />算法旨在返回合理数据的结果共线，并在这种情况下可以找到至少一个答案。</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntRate">
      <MemberSignature Language="C#" Value="public double IntRate (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IntRate([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IntRate(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IntRate (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16817)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">Investment - 债券的投资额。</param>
        <param name="Arg4">Redemption - 到期时要收回的金额。</param>
        <param name="Arg5">Basis - 要使用的日计数基准类型。</param>
        <summary>返回完全投资型债券的利率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>结算日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，结算日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>Settlement、maturity 和 basis 将被截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，<b>则 intrate 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 investment ≤ 0 或 redemption ≤ 0，<b>则 intrate 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>则 intrate 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 settlement ≥ maturity，<b>则 intrate 将</b>返回 #NUM ！ 错误值。 </para>
          <para>
            <b>IntRate</b>的计算公式如下： </para>
          <para>图 1： 的 IntRate 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>B = 一年，具体取决于年基准中的天数。</para>
          <para>DIM = 的从结算日与到期日的天数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ipmt">
      <MemberSignature Language="C#" Value="public double Ipmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ipmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ipmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ipmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16551)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate - 各期利率。</param>
        <param name="Arg2">Per - 要计算其利息数额的期数，必须在 1 到 nper 范围内。</param>
        <param name="Arg3">Nper - 年金中的总付款期数。</param>
        <param name="Arg4">Pv - 现值，或一系列未来付款当前所值的累积和。</param>
        <param name="Arg5">Fv - 未来值，或在最后一次付款后希望得到的现金余额。如果省略 fv，则假定其值为 0（例如，一笔贷款的未来值为 0）。</param>
        <param name="Arg6">Type - 数字 0 或 1，用以指示付款时间。如果省略 type，则假定其值为 0。</param>
        <summary>基于固定利率和等额分期付款方式，返回给定期数内对某项投资支付的利息。</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0</term>
              <description>期末</description>
            </item>
            <item>
              <term>1</term>
              <description>期初</description>
            </item>
          </list>
          <para>请确保用于指定 rate 和 nper 的单位的一致性。例如，同样是四年期年利率为 12% 的贷款，如果按月支付，rate 应为 12%/12，nper 应为 4*12；如果按年支付，rate 应为 12%，nper 为 4。 </para>
          <para>在所有参数中，支出的款项，如银行存款，表示为负数；收入的款项，如股息支票，表示为正数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Irr">
      <MemberSignature Language="C#" Value="public double Irr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Irr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Irr (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16446)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Values - 一个数组，或者是对包含用来计算内部报酬率的数字的单元格的引用。</param>
        <param name="Arg2">Guess - 一个认为接近 IRR 结果的数字。</param>
        <summary>返回由数值代表的一组现金流的内部收益率。这些现金流不必为均衡的，但作为年金，它们必须按固定的间隔产生，如按月或按年。内部收益率为投资的回收利率，其中包含定期支付（负值）和定期收入（正值）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Values 必须至少包含一个正值和一个负值，以计算内部报酬率。</para>
          <para>IRR 根据值的顺序来解释现金流的顺序。请确保按照所需的顺序输入了支出和收入值。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略。</para>
          <para>Microsoft Excel 使用用于计算<b>Irr</b>迭代的技术。 从 guess 开始， <b>Irr</b>进行循环计算，直到结果精确度 0.00001%。 如果<b>Irr</b>找不到适用于后的结果 20 次，#NUM ！。 将返回错误值。 </para>
          <para>在大多数情况下不需要提供 guess <b>Irr</b>计算结果。 如果省略 guess，则假定为 0.1 （10%)。 </para>
          <para>如果<b>irr 给</b>出 #NUM ！ 错误值，或如果结果并不接近您的预期，重试的值不同的 guess。</para>
          <para>
            <b>Irr</b>紧密相关到<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />、 净现值函数。 由<b>Irr</b>计算率是回报的对应于 0 （零） 的净现值的利率。 下面的公式演示如何<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />和<b>Irr</b>相关：</para>
          <para>NPV(IRR(B1:B6),B1:B6 等于 3.60E-08 [在<b>Irr</b>计算，数值的精度内-08 实际上是 0 （零）。]</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsErr">
      <MemberSignature Language="C#" Value="public bool IsErr (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsErr([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsErr(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsErr (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsErr(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16510)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - 要检验的值。可以是空白（空单元格）、错误值、逻辑值、文本值、数字、引用值或对以上任意要检验的值进行引用的名称。</param>
        <summary>检查值类型，并返回<b>true</b>或<b>false</b>并根据值引用任何错误值 # n/A 除外。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>IS 函数的值参数不会转换。 例如，在其他大多数函数需要数字的文本值"19"转换成数字 19。 但是，在公式 ISNUMBER("19")，"19"不从转换的文本值，并将<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />函数返回<b>false</b>。 </para>
          <para>IS 函数很有用的测试结果的计算公式中。 与 IF 函数结合时，它们提供了用于在公式中查找错误的方法。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public bool IsError (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsError([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsError(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16387)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - 要检验的值。可以是空白（空单元格）、错误值、逻辑值、文本值、数字、引用值或对以上任意要检验的值进行引用的名称。</param>
        <summary>检查值类型而返回<b>true</b>或<b>false</b>根据值是否引用任何错误值 (# n/A，#VALUE ！，#REF ！，#DIV/0 ！，#NUM ！，#NAME? 或 #NULL ！)。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>IS 函数的值参数不会转换。 例如，在其他大多数函数需要数字的文本值"19"转换成数字 19。 但是，在公式 ISNUMBER("19")，"19"不从转换的文本值，并将<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />函数返回<b>false</b>。 </para>
          <para>IS 函数很有用的测试结果的计算公式中。 与 IF 函数结合时，它们提供了用于在公式中查找错误的方法。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEven([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsEven(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEven (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEven(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16804)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - 要检验的值。可以是空白（空单元格）、错误值、逻辑值、文本值、数字、引用值或对以上任意要检验的值进行引用的名称。</param>
        <summary>检查值类型，并返回<b>true</b>或<b>false</b>并根据值为偶数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>IS 函数的值参数不会转换。 例如，在其他大多数函数需要数字的文本值"19"转换成数字 19。 但是，在公式 ISNUMBER("19")，"19"不从转换的文本值，并将<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />函数返回<b>false</b>。 </para>
          <para>IS 函数很有用的测试结果的计算公式中。 与 IF 函数结合时，它们提供了用于在公式中查找错误的方法。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFormula">
      <MemberSignature Language="C#" Value="public bool IsFormula (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsFormula([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsFormula(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsFormula (Arg1 As Range) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsFormula(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16973)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">对要测试的单元格的引用。 引用可以是单元格引用、 公式或引用的单元格的名称。</param>
        <summary>检查是否引用到包含公式的单元格并返回<b>TRUE</b>或<b>FALSE</b>。</summary>
        <returns>
          <b>BOOL</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLogical">
      <MemberSignature Language="C#" Value="public bool IsLogical (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsLogical([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsLogical(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLogical (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsLogical(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16582)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - 要检验的值。可以是空白（空单元格）、错误值、逻辑值、文本值、数字、引用值或对以上任意要检验的值进行引用的名称。</param>
        <summary>检查值类型，并返回<b>true</b>或<b>false</b>并根据值引用逻辑值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>IS 函数的值参数不会转换。 例如，在其他大多数函数需要数字的文本值"19"转换成数字 19。 但是，在公式 ISNUMBER("19")，"19"不从转换的文本值，并将<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />函数返回<b>false</b>。 </para>
          <para>IS 函数很有用的测试结果的计算公式中。 与 IF 函数结合时，它们提供了用于在公式中查找错误的方法。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNA">
      <MemberSignature Language="C#" Value="public bool IsNA (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNA([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNA(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNA (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNA(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16386)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - 要检验的值。可以是空白（空单元格）、错误值、逻辑值、文本值、数字、引用值或对以上任意要检验的值进行引用的名称。</param>
        <summary>检查值类型而返回<b>true</b>或<b>false</b>根据值引用错误值 # n/A （值不可用）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>IS 函数的值参数不会转换。 例如，在其他大多数函数需要数字的文本值"19"转换成数字 19。 但是，在公式 ISNUMBER("19")，"19"不从转换的文本值，并将<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />函数返回<b>false</b>。 </para>
          <para>IS 函数很有用的测试结果的计算公式中。 与 IF 函数结合时，它们提供了用于在公式中查找错误的方法。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNonText">
      <MemberSignature Language="C#" Value="public bool IsNonText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNonText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNonText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNonText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNonText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16574)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - 要检验的值。可以是空白（空单元格）、错误值、逻辑值、文本值、数字、引用值或对以上任意要检验的值进行引用的名称。</param>
        <summary>检查值类型，并返回<b>true</b>或<b>false</b>并根据值引用任何项目不是文本。 （请注意，此函数返回<b>true</b> ，是否值引用空单元格）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>IS 函数的值参数不会转换。 例如，在其他大多数函数需要数字的文本值"19"转换成数字 19。 但是，在公式 ISNUMBER("19")，"19"不从转换的文本值，并将<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />函数返回<b>false</b>。 </para>
          <para>IS 函数很有用的测试结果的计算公式中。 与 IF 函数结合时，它们提供了用于在公式中查找错误的方法。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public bool IsNumber (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNumber([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumber (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNumber(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - 要检验的值。可以是空白（空单元格）、错误值、逻辑值、文本值、数字、引用值或对以上任意要检验的值进行引用的名称。</param>
        <summary>检查值类型，并返回<b>true</b>或<b>false</b>并根据值引用数字。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>IS 函数的值参数不会转换。 例如，在其他大多数函数需要数字的文本值"19"转换成数字 19。 但是，在公式 ISNUMBER("19")，"19"不从转换的文本值，并将<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />函数返回<b>false</b>。 </para>
          <para>IS 函数很有用的测试结果的计算公式中。 与 IF 函数结合时，它们提供了用于在公式中查找错误的方法。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ISO_Ceiling">
      <MemberSignature Language="C#" Value="public double ISO_Ceiling (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ISO_Ceiling([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ISO_Ceiling(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ISO_Ceiling (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16907)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number-要舍入的值。</param>
        <param name="Arg2">Significance-可选倍数到哪个号码是要舍入。 如果省略倍数，则其默认值为 1。</param>
        <summary>返回一个数字，该数字已向上舍入到最接近的整数或最接近的 significance 的倍数。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOdd">
      <MemberSignature Language="C#" Value="public bool IsOdd (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsOdd([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsOdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOdd (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOdd(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16805)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - 要检验的值。可以是空白（空单元格）、错误值、逻辑值、文本值、数字、引用值或对以上任意要检验的值进行引用的名称。</param>
        <summary>检查值类型，并返回<b>true</b>或<b>false</b>根据值为奇数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>IS 函数的值参数不会转换。 例如，在其他大多数函数需要数字的文本值"19"转换成数字 19。 但是，在公式 ISNUMBER("19")，"19"不从转换的文本值，并将<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />函数返回<b>false</b>。 </para>
          <para>IS 函数很有用的测试结果的计算公式中。 与 IF 函数结合时，它们提供了用于在公式中查找错误的方法。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoWeekNum">
      <MemberSignature Language="C#" Value="public double IsoWeekNum (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IsoWeekNum([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsoWeekNum(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsoWeekNum (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16968)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">使用 Excel 日期和时间的计算的日期时间代码。</param>
        <param name="Arg2">此参数不是函数中可用。</param>
        <summary>返回给定日期在一年的 ISO 周数。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>
          <para>返回给定日期的年中的 [ISO8601] 日历周序号。 ISO 8601 定义从星期一开始的七个日历天的时间间隔为日历周和与一个包含该年的第一个星期四一年的第一个日历周。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ispmt">
      <MemberSignature Language="C#" Value="public double Ispmt (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ispmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ispmt(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ispmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ispmt(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16734)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate - 投资的利率。</param>
        <param name="Arg2">Per - 要计算其利息的期数，必须介于 1 和 nper 之间。</param>
        <param name="Arg3">Nper - 投资的付款期总数。</param>
        <param name="Arg4">Pv - 投资的现值。对于贷款，pv 是贷款金额。</param>
        <summary>计算特定投资期内要支付的利息。提供此函数是为了与 Lotus 1-2-3 兼容。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>请确保用于指定 rate 和 nper 的单位的一致性。例如，同样是四年期年利率为 12% 的贷款，如果按月支付，rate 应为 12%/12，nper 应为 4*12；如果按年支付，rate 应为 12%，nper 应为 4。</para>
          <para>在所有参数中，支出的金额（如银行存款或其他取款）表示为负数；接收的金额（如股息支票和其他存款）表示为正数。</para>
          <para>有关财务函数的其他信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />函数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsText">
      <MemberSignature Language="C#" Value="public bool IsText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16511)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - 要检验的值。可以是空白（空单元格）、错误值、逻辑值、文本值、数字、引用值或对以上任意要检验的值进行引用的名称。</param>
        <summary>检查值类型，并返回<b>true</b>或<b>false</b>并根据值引用文本。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>IS 函数的值参数不会转换。 例如，在其他大多数函数需要数字的文本值"19"转换成数字 19。 但是，在公式 ISNUMBER("19")，"19"不从转换的文本值，并将<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />函数返回<b>false</b>。 </para>
          <para>IS 函数很有用的测试结果的计算公式中。 与 IF 函数结合时，它们提供了用于在公式中查找错误的方法。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThaiDigit">
      <MemberSignature Language="C#" Value="public bool IsThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsThaiDigit (Arg1 As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16759)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>仅供内部使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kurt">
      <MemberSignature Language="C#" Value="public double Kurt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Kurt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Kurt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Kurt (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16706)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 要计算其峰值的 1 到 30 个参数。也可以不使用这种用逗号分隔参数的形式，而使用一个数组或一个对数组的引用。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回一组数据的峰值。峰值反映与正态分布相比某一分布的尖锐度或平坦度。正峰值表示相对尖锐的分布。负峰值表示相对平坦的分布。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入参数列表的逻辑值和数字的文本表示也包括在内。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>如果有四个数据点，或样本标准偏差等于零，<b>则 Kurt</b>返回 #DIV/0 ！ 错误值。 </para>
          <para>峰值的计算公式如下：

 </para>
          <para>图 1： 峰值等式</para>
          <para></para>
          <para></para>
          <para>s 为样本的标准偏差。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Large">
      <MemberSignature Language="C#" Value="public double Large (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Large([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Large(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Large (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Large(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16709)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - 要确定第 k 个最大值的数组或数据区域。</param>
        <param name="Arg2">K - 要返回的数据在数组或单元格区域中的位置（从最大值开始）。</param>
        <summary>返回数据集中的第 k 个最大值。 您可以使用此函数选择基于其相对位置的值。 例如，您可以使用<b>大型</b>返回最高、 runner-up 或第三就地分数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 array 为空，<b>函数 Large</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 k ≤ 0 或 k 是否大于的数据点，<b>函数 Large</b>返回 #NUM ！ 错误值。</para>
          <para>如果区域中数据点的个数为 n，则函数 LARGE(array,1) 返回最大值，函数 LARGE(array,n) 返回最小值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lcm">
      <MemberSignature Language="C#" Value="public double Lcm (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Lcm([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lcm(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lcm (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16859)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2,... - 要计算最小公倍数的 1 到 29 个值。如果值不是整数，则截尾取整。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回整数的最小公倍数。最小公倍数是所有整数参数 number1、number2 等等的最小正整数倍数。用函数 LCM 可以将分母不同的分数相加。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>函数 Lcm</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果任一参数小于零，<b>函数 Lcm</b>返回 #NUM ！。 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinEst">
      <MemberSignature Language="C#" Value="public object LinEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LinEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16433)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y's - 关系表达式 y = mx + b 中已知的 y 值集合。</param>
        <param name="Arg2">Known_x's - 关系表达式 y = mx + b 中可能已知的可选 x 值集合。</param>
        <param name="Arg3">Const - 一个逻辑值，用于指定是否强制常量 b 等于 0。</param>
        <param name="Arg4">Stats - 一个逻辑值，指定是否返回附加回归统计值。</param>
        <summary>使用最小二乘法对已知数据进行最佳直线拟合，并返回描述此直线的数组。因为此函数返回数值数组，所以必须以数组公式的形式输入。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>直线的公式为：</para>
          <para>y = mx + b 或者</para>
          <para>y = m1x1 + m2x2 + ... + b（如果有多个区域的 x 值）</para>
          <para>其中相关的 y 值是独立的 x 值的一项功能。 M 值是系数对应于每个 x 值和 b 是以常量值。 请注意 y 和 x m 可以是向量。 <b>Linest 函数</b>返回的数组 {mn，mn-1，...、 m1、 b}。 <b>LinEst</b>也可以返回附加回归统计值。</para>
          <para>
				如果数组 known_y's 在单独一列中，则 known_x's 的每一列被解释为一个独立的变量。
</para>
          <para>
				如果数组 known_y's 在单独一行中，则 known_x's 的每一行被解释为一个独立的变量。
</para>
          <para>
				数组 known_x's 可以包含一组或多组变量。如果只用到一个变量，只要 known_y's 和 known_x's 维数相同，它们就可以是任何形状的区域。如果用到多个变量，则 known_y's 必须为向量（即必须为一行或一列）。
</para>
          <para>
				如果省略 known_x's，则假定该数组为 {1,2,3,...}，其大小与 known_y's 相同。
</para>
          <para>如果 const 为<b>true</b>或被省略，b 将按正常方式计算。 </para>
          <para>如果 const 为<b>false</b>，b 将被设置为 0 并调整 m 值使 y = mx。 </para>
          <para>如果 stats 为<b>truuue</b>， <b>linest 函数</b>返回附加回归统计值，以便返回的数组为 {mn，mn-1，...，m1、 b; 离，离 1，...，se1，seb; r2，sey;F，df; ssreg，ssresid}。 </para>
          <para>如果 stats 为<b>false</b>或被省略， <b>linest 函数</b>返回仅系数 m 和常量 b。 </para>
          <para>附加回归统计值如下：</para>
          <list type="table">
            <item>
              <term>se1，se2，...离</term>
              <description>系数 m1,m2,...,mn 的标准误差值。</description>
            </item>
            <item>
              <term>seb</term>
              <description>常量 b 的标准误差值 (seb = # n/A 当 const 为<b>false</b>)。</description>
            </item>
            <item>
              <term>r2</term>
              <description>确定系数。 比较估计和实际 y 的值，范围为从 0 到 1 值。 如果为 1，则示例好的相关性 — 在估计的 y 值和实际的 y 值之间没有区别。 在另一个极限值，如果确定系数为 0，回归公式不能用来预测的 y 值。 </description>
            </item>
            <item>
              <term>sey</term>
              <description>y 估计值的标准误差。</description>
            </item>
            <item>
              <term>F</term>
              <description>F 统计或 F 观察值。使用 F 统计可以判断因变量和自变量之间是否偶尔发生过可观察到的关系。</description>
            </item>
            <item>
              <term>df</term>
              <description>自由度。 使用自由度可帮助您查找统计表中的 F 临界值。 比较的 F 统计表中查找的值由返回<b>linest 函数</b>来确定可信度级别的模型。 </description>
            </item>
            <item>
              <term>ssreg</term>
              <description>回归平方和。</description>
            </item>
            <item>
              <term>ssresid</term>
              <description>剩余平方和。</description>
            </item>
          </list>
          <para>下面的图示显示了附加回归统计值返回的顺序。</para>
          <para>图 1： 工作表</para>
          <para></para>
          <para></para>
          <para>您可描述任何直线的斜率和 y 轴截距： </para>
          <para>斜率 (m):</para>
          <para>
若要查找的行，通常写作 m，斜率执行两个点在行中，(x1 y1) 和 (x2，y2);斜率等于 (y2-y1) / (x 2-x 1)。</para>
          <para>Y 轴截距 (b):</para>
          <para>
线条，通常为 b，写入 y 轴截距的行和 y 轴相交的位置的点的 y 值。</para>
          <para>直线的计算公式为 y = mx + b。 一旦您知道 m 和 b 的值，您可以通过将插入该公式的 y 或 x 值计算线上的任何点。 您还可以使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" />函数。</para>
          <para>如果您有只有一个自变量 x 时，您可以直接通过使用以下公式来获取得到斜率和 y 轴截距值： </para>
          <para>斜率：</para>
          <para>
=INDEX(LINEST(known_y's,known_x's),1)</para>
          <para>Y 轴截距：</para>
          <para>
=INDEX(LINEST(known_y's,known_x's),2)</para>
          <para>由<b>LineEst</b>计算行的准确性取决于散点图中数据的程度。 更多线性数据、 更准确<b>LineEst</b>模型。 <b>LineEst</b>用于确定最适合数据使用最小平方的方法。 如果您有只有一个自变量 x 时，m 和 b 的计算基于下列公式： </para>
          <para>图 2： 等式</para>
          <para></para>
          <para></para>
          <para>图 3： 等式</para>
          <para></para>
          <para></para>
          <para>其中 x 和 y 是样本平均值，例如 x = AVERAGE(known x's) 和 y = AVERAGE(known_y's)。</para>
          <para>行和曲线适合函数<b>LineEst</b>和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" />可以计算最佳的直线或指数曲线适合您的数据。 但是，您必须决定这两个结果最佳适合您的数据。 您可以计算 TREND(known_y's,known_x's) 直线，或增长 （known_y's，known_x's） 指数曲线。 这些函数，而不使用 new_x's 参数返回预测沿行或位于曲线的实际数据点处的 y 值的数组。 然后可以将替换为实际值的预测的值进行比较。 您可能想要的直观的比较的图表二者。 </para>
          <para>在回归分析，Microsoft Excel 计算每个点估计该点的 y 值和其实际的 y 值的平方的差。 平方和的计算这些称为剩余的平方，ssresid 和。 然后，Microsoft Excel 计算平方，总平方和的总和。 当 const = <b>true</b>或被省略，总平方和是实际的 y 值和 y 值的平均值之间的平方之和。 当 const = <b>false</b>，总平方和是 （不带减去来自每个单独的 y 值的平均 y 值） 的实际 y 值的平方和。 然后可以找到回归平方，ssreg，和从： ssreg = ssresid 总平方和。 剩余的平方和与总平方和的比值越小，更大的值确定，r2 是程度由回归分析产生的计算公式的指示符系数之间的关系变量。 r2 等于 ssreg/总平方和。 </para>
          <para>在某些情况下，一个或多个 X 列 (假定该 Y 和 x 's 位于列) 可能在其他 X 列的任何其他预测值。 换句话说，删除一个或多个 X 列可能导致预测的 Y 值的精度。 在此情况下这些冗余 X 列应从回归模型省略。 这种现象被称为"共线性"，因为任何冗余 X 列可以表示为多个非多余列 X 的总和。 <b>LinEst</b>共线性检查并删除任何冗余 X 回归模型中的列时其标识。 删除 X 列可以识别<b>LinEst</b>输出中，为具有为 0 se 或 0 系数。 如果一个或多个列被删除为冗余，df 受到因为 df 取决于 X 实际用于预测的目的的列的个数。 如果因为更改 df 冗余删除 X 列，sey 值和 F 也会受到影响。 共线性应实际上相对较少。 但是，一种情况下其中很有可能出现时，某些 X 列包含仅 0 和 1 的指示符的实验中的对象是否作为或不是特定组的成员。 如果 const = <b>true</b>或被省略， <b>LinEst</b>有效地插入其他的所有 1 的模型截距的列。 如果您有 1 列的每个主题如果男或 0，如果没有，并且您还可以为每个主题如果女，或 0 1 列如果没有，后者该列，是冗余因为中的条目可以从减去"男指示器"中的条目由<b>LineEst</b>添加列中的所有 1 的其他列中的条目。 </para>
          <para>没有 X 列已从由于共线性模型时，如下所示的计算公式 df： 如果 known_x's 的 k 列和 const = <b>true</b>或被省略，然后 df = n – k – 1。 如果 const = <b>false</b>，则 df = n-k。 在这两种情况下，由于共线性删除一个 X 列增加 df 1。 </para>
          <para>对于返回结果为数组的公式，必须以数组公式的形式输入。 当作为参数输入数组常量如 known_x's，以逗号分隔同一行，用分号分隔行中的值。 分隔符可能不同，具体取决于您在区域和语言选项在控制面板中的区域设置。 </para>
          <para>注意，如果 y 的回归分析预测值超出了用来计算公式的 y 值的范围，它们可能是无效的。 <b>LinEst</b>函数中使用的基础算法是不同的基础算法所用在<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />函数。 确定，并且已共线数据时，这些算法之间的差异可能导致不同的结果。 例如，如果 known_y's 参数的数据点是 0 和 known_x's 参数的数据点，1: </para>
          <para>
            <b>LineEst</b>返回值为 0。 <b>LinEst</b>算法旨在返回共线数据的合理结果，在这种情况下可以找到至少一个答案。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />返回 #DIV/0 ！ 错误。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />算法旨在查找且只有一个回答，并在这种情况下可以有多个答案。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ln">
      <MemberSignature Language="C#" Value="public double Ln (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ln([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ln(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ln (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ln(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16406)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要计算其自然对数的正实数。</param>
        <summary>返回数字的自然对数。自然对数以常数项 e (2.71828182845904) 为底。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Ln 函数</b>是 EXP 函数的反函数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public double Log (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16493)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要计算其对数的正实数。</param>
        <param name="Arg2">Base - 对数的底数。如果省略底数，则假设其值为 10。</param>
        <summary>按所指定的底数，返回一个数的对数。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public double Log10 (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log10([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log10 (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Log10(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16407)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要计算其以 10 为底的对数的正实数。</param>
        <summary>返回以 10 为底的对数。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogEst">
      <MemberSignature Language="C#" Value="public object LogEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LogEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y's - 关系表达式 y=b*m^x 中一组已知的 y 值。</param>
        <param name="Arg2">Known_x's - 关系表达式 y=b*m^x 中一组已知的 x 值，为可选参数。</param>
        <param name="Arg3">Const - 一个逻辑值，用于指定是否强制常量 b 等于 1。</param>
        <param name="Arg4">Stats - 一个逻辑值，指定是否返回附加回归统计值。</param>
        <summary>在回归分析中，计算最符合数据的指数回归拟合曲线，并返回描述该曲线的数值数组。因为此函数返回数值数组，所以必须以数组公式的形式输入。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>此曲线的方程为：</para>
          <para>y = b*m^x 或</para>
          <para>y = (b *(m1 ^ x1)*(m2 ^ x2) * _) （如果有多个 x 值）</para>
          <para>其中相关的 y 值是独立的 x 值的一项功能。 M 值将为每个指数的 x 值，对应的进制数和 b 是以常量值。 请注意 y 和 x m 可以是向量。 <b>函数 LogEst</b>将返回为数组 {mn，mn-1，...、 m1、 b}。</para>
          <para>
				如果数组 known_y's 在单独一列中，则 known_x's 的每一列被解释为一个独立的变量。
</para>
          <para>
				如果数组 known_y's 在单独一行中，则 known_x's 的每一行被解释为一个独立的变量。
</para>
          <para>
				known_x's 数组可以包括一组或多组自变量。如果仅使用一个变量，那么只要 known_x's 和 known_y's 具有相同的维数，则它们可以是任何形状的区域。如果使用多个变量，则 known_y's 必须是向量（即具有一列高度或一行宽度的单元格区域）。
</para>
          <para>
				如果省略 known_x's，则假定该数组为 {1,2,3,...}，其大小与 known_y's 相同。
</para>
          <para>如果 const 为<b>true</b>或被省略，b 将按正常方式计算。</para>
          <para>如果 const 为<b>false</b>，b 将被设置为 1，和 m 值常量 y = m ^ x。</para>
          <para>如果 stats 为<b>true</b>，<b>函数 LogEst</b>将返回附加回归统计值，以便返回的数组为 {mn，mn-1，...，m1、 b; 离，离 1，...，se1，seb; r 2，sey;F，df; ssreg，ssresid}。 </para>
          <para>如果 stats 为<b>false</b>或被省略，<b>函数 LogEst</b>将返回仅系数 m 和常量 b。 </para>
          <para>有关附加回归统计值的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />。</para>
          <para>多个绘图的数据类似于指数曲线、 更好的计算的行适合您的数据。 如<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />，<b>函数 LogEst</b>将返回描述值之间的关系的值的数组，但<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />适合您的数据; 直线<b>LogEst</b>适合指数曲线。 有关详细信息，请参阅 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />。 </para>
          <para>如果您有只有一个自变量 x 时，您可以获取 y 轴截距值 (b) 直接通过使用以下公式： </para>
          <para>Y 轴截距 (b):</para>
          <para>
INDEX(LOGEST(known_y's,known_x's),2)</para>
          <para>您可以使用 y = b * m ^ x 公式预测未来值的 y，但 Microsoft Excel 提供<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />函数执行此操作为您。 有关详细信息，请参阅 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />。</para>
          <para>对于返回结果为数组的公式，必须以数组公式的形式输入。</para>
          <para>当输入一个数组常量（如 known_x's）作为参数时，用逗号来分隔同一行中的值，用分号来分隔不同的行。分隔符可能因“控制面板”中的“区域和语言选项”中区域设置的不同而有所不同。</para>
          <para>应注意的一点是：如果由回归公式所预测的 y 值超出用来计算回归公式的 y 的取值区间，则该值可能无效。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogInv">
      <MemberSignature Language="C#" Value="public double LogInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16675)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">probability - 与对数分布相关的概率。</param>
        <param name="Arg2">mean - ln(x) 的平均值。</param>
        <param name="Arg3">standard_dev - ln(x) 的标准偏差。</param>
        <summary>使用对数分布可分析经过对数变换的数据。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" />方法。</para>
          <para>如果任一参数为非数值型，<b>则 LogInv</b>返回 #VALUE ！。 错误值。 </para>
          <para>如果 probability &lt;= 0 或 probability &gt;= 1，<b>则 LogInv</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 standard_dev &lt;= 0，<b>则 LogInv</b>返回 #NUM ！ 错误值。 </para>
          <para>
				对数分布函数的反函数的计算公式为： </para>
          <para>图 1： 的对数分布函数的反函数值</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Dist">
      <MemberSignature Language="C#" Value="public double LogNorm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16920)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 用于计算函数的值。</param>
        <param name="Arg2">mean - ln(x) 的平均值。</param>
        <param name="Arg3">standard_dev - ln(x) 的标准偏差。</param>
        <param name="Arg4">Cumulative-决定函数的形式一个逻辑值。 如果累积为<b>true</b>，<b>则 lognorm_dist 将</b>返回累积分布函数;如果<b>false</b>，则将返回概率密度函数。</param>
        <summary>返回 x 的对数分布函数，其中 ln(x) 是服从参数 mean 和 standard_dev 的正态分布。使用此函数可以分析经过对数变换的数据。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 lognorm_dist 将</b>返回 #VALUE ！。 错误值。 </para>
          <para>如果 x ≤ 0 或 standard_dev ≤ 0，<b>则 lognorm_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>对数累积分布函数的计算公式为： </para>
          <para>图 1： 对数累积分布的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Inv">
      <MemberSignature Language="C#" Value="public double LogNorm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16921)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">probability - 与对数分布相关的概率。</param>
        <param name="Arg2">mean - ln(x) 的平均值。</param>
        <param name="Arg3">standard_dev - ln(x) 的标准偏差。</param>
        <summary>返回对数累积分布函数的反函数。使用对数分布可分析经过对数变换的数据。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 lognorm_inv 将</b>返回 #VALUE ！。 错误值。 </para>
          <para>如果 probability &lt;= 0 或 probability &gt;= 1，<b>则 lognorm_inv 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 standard_dev &lt;= 0，<b>则 lognorm_inv 将</b>返回 #NUM ！ 错误值。 </para>
          <para>
				对数分布函数的反函数的计算公式为： </para>
          <para>图 1： 的对数分布函数的反函数值</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNormDist">
      <MemberSignature Language="C#" Value="public double LogNormDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNormDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNormDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16674)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 用于计算函数的值。</param>
        <param name="Arg2">mean - ln(x) 的平均值。</param>
        <param name="Arg3">standard_dev - ln(x) 的标准偏差。</param>
        <summary>返回 x 的对数累积分布函数，其中 ln(x) 是服从参数 mean 和 standard_dev 的正态分布。使用此函数可以分析经过对数变换的数据。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />方法。</para>
          <para>如果任一参数为非数值型，<b>则 LogNormDist</b>返回 #VALUE ！。 错误值。 </para>
          <para>如果 x ≤ 0 或 standard_dev ≤ 0，<b>则 LogNormDist</b>返回 #NUM ！ 错误值。 </para>
          <para>对数累积分布函数的计算公式为： </para>
          <para>图 1： 对数累积分布的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public object Lookup (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Lookup([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lookup (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16412)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value-中的第一个向量搜索<b>查阅</b>值。 Lookup_value 可以是数字、 文本、 逻辑值，或名称或引用的值的引用。</param>
        <param name="Arg2">Lookup_vector 或数组 - 在向量形式中，为只包含一行或一列的区域。lookup_vector 中的值可以是文本、数字或逻辑值。在数组形式中，为包含要与 lookup_value 进行比较的文本、数字或逻辑值的单元格区域。</param>
        <param name="Arg3">Result_vector - 只用于向量形式。只包含一行或一列的区域。它必须与 lookup_vector 大小相同。</param>
        <summary>从单行或单列区域或者从一个数组返回值。LOOKUP 函数具有两种语法形式：向量形式和数组形式。</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>在单行区域或单列区域（称为“向量”）中查找值，然后返回第二个单行区域或单列区域中相同位置的值。</term>
              <description>向量形式</description>
              <description>当要查询的值列表较大或者值可能会随时间而改变时，使用该向量形式。</description>
            </item>
            <item>
              <term>在数组的第一行或第一列中查找指定的数值，然后返回数组的最后一行或最后一列中相同位置的数值。</term>
              <description>数组形式</description>
              <description>当值列表较小并且值在一段时间内保持不变时，使用该数组形式。</description>
            </item>
          </list>
          <para>
            <b>注意</b>： 您还可以用作<b>Lookup</b>函数的替代 IF 函数的详尽的测试或测试 7 个以上条件。 请参阅数组形式中的示例。</para>
          <para>向量形式</para>
          <para>向量是只有一行或一列的区域。 <b>查找</b>的向量形式在一行或单列区域 （称为向量） 中查找一个值，并返回从第二个一行或一个列区域中相同位置的值。 您想要指定包含要匹配的值的范围时，请使用这种形式的<b>Lookup</b>函数。 在第一列或行中自动查找其他形式的<b>查找</b>。</para>
          <para>
            <b>重要说明</b>： lookup_vector 中的值必须位于升序:...、-2、-1、 0、 1、 2、 A-Z、 <b>false</b>、 <b>true</b>;否则，<b>查找</b>可能无法提供的正确值。 大写和小写文本是等效的。</para>
          <para>如果 LOOKUP 找不到 lookup_value，则它与 lookup_vector 中小于或等于 lookup_value 的最大值匹配。</para>
          <para>如果 lookup_value 小于 lookup_vector 中的最小值，则<b>查找</b>提供 # n/A 错误值。</para>
          <para>数组形式</para>
          <para>
            <b>查找</b>数组形式查找第一行或数组的指定值的列中，并从最后一行或数组中的列中的相同位置中返回一个值。 您想要匹配的值是在第一行或数组中的列时，请使用这种形式的<b>查找</b>。 您想要指定的行或列位置时，请使用其他形式的<b>查找</b>。</para>
          <para>
            <b>提示</b>： 一般情况下，则最好使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />或<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />而不是数组形式的<b>Lookup</b>函数。 这种形式的<b>查找</b>供与其他电子表格程序兼容性。</para>
          <para>如果<b>Lookup</b>找不到 lookup_value，它会使用中的数组中小于或等于 lookup_value 的最大值。</para>
          <para>如果 lookup_value 小于第一行或 （具体取决于数组维度） 的列中的最小值，<b>查找</b>将返回错误值 # n/A。</para>
          <para>
            <b>查找</b>数组形式非常类似于<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />函数。 区别在于，<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />的第一行中搜索 lookup_value<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />在第一列中，搜索和<b>查找</b>搜索根据数组维度。</para>
          <para>如果数组包含宽度比区域很高 （多个列数多于行数），<b>查找</b>中搜索 lookup_value 的第一行。</para>
          <para>如果数组是正方的或者高度大于范围 （更多的行数多于列数） 的第一列中的<b>查找</b>搜索。</para>
          <para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />，则可以通过索引整行或整，但是<b>Lookup</b>始终选择行或列中的最后一个值。</para>
          <para>
            <b>重要说明</b>： 数组中的值必须位于升序:...、-2、-1、 0、 1、 2、 A-Z、 <b>false</b>、 <b>true</b>;否则，<b>查找</b>可能无法提供的正确值。 大写和小写文本是等效的。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public double Match (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Match([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Match(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16448)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value - 需要在表中查找的值。</param>
        <param name="Arg2">Lookup_array - 可能包含所要查找的值的连续单元格区域。Lookup_array 必须为数组或数组引用。</param>
        <param name="Arg3">Match_type - 数字 -1、0 或 1。Match_type 指明 Microsoft Excel 如何将 lookup_value 与 lookup_array 中的值进行匹配。</param>
        <summary>返回以数组的指定顺序中的指定的值匹配的项的相对位置。 使用<b>匹配</b>，而不是一个的<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" />功能时所需的项目而不是项目自身区域中的位置。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Lookup_value 为需要在 Look_array 中查找的数值。例如，如果要在电话簿中查找某人的电话号码，则应该将姓名作为查找值，但实际上需要的是电话号码。</para>
          <para>Lookup_value 可以为值（数字、文本或逻辑值）或对数字、文本或逻辑值的单元格引用。</para>
          <para>如果类型为 1，则<b>匹配</b>查找小于或等于 lookup_value 的最大值。 必须以升序放置 Lookup_array:...-2、-1、 0、 1、 2、 A-Z、 <b>false</b>、 <b>true</b>。</para>
          <para>如果类型为 0，则<b>匹配</b>查找完全等于 lookup_value 的第一个值。 Lookup_array 可以按任意顺序。</para>
          <para>如果类型为-1，则<b>匹配</b>查找大于或等于 lookup_value 的最小值。 必须按降序顺序放置 Lookup_array: <b>true</b>、 <b>false</b>，Z 到 A...2、 1、 0、-1、-2，...，依此类推。如果 match_type，假定为 1。</para>
          <para>
            <b>匹配</b>返回内 lookup_array 的值匹配的值的位置。 例如，MATCH("b",{"a","b","c"},0) 返回 2，"b"array {"a"、"b"，"c"} 中的相对位置。 </para>
          <para>
            <b>匹配</b>不区分匹配文本值时的大写和小写字母。 </para>
          <para>如果<b>匹配</b>不成功找到匹配项，它将返回错误值 # n/A。 </para>
          <para>如果 match_type 为 0 且 lookup_value 为文本，则可以在 lookup_value 中使用通配符、问号 (?) 和星号 (*)。问号匹配任意单个字符；星号匹配任意字符序列。如果您要查找实际的问号或星号本身，请在该字符前键入波形符 (~)。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public double Max (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Max([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Max (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16391)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 要从中查找最大值的 1 到 30 个数字。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回一组值中的最大值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入参数列表的数字的逻辑值和文本表示也包括在内。</para>
          <para>如果参数为数组或引用，则只使用其中的数值。数组或引用中的空白单元格、逻辑值或文本将被忽略。</para>
          <para>如果参数不包含任何数字，则<b>Max</b>返回 0 （零）。 </para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>如果您想要在引用中包含逻辑值和数字的文本表示作为计算的一部分，使用<see cref="MAXA" />函数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MDeterm">
      <MemberSignature Language="C#" Value="public double MDeterm (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDeterm([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDeterm(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDeterm (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MDeterm(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16547)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - 行数和列数相等的数值数组。</param>
        <summary>返回一个数组的矩阵行列式的值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>可作为一个单元格区域，例如 a1: c3; 提供数组作为数组常量，如 {1 2、 3; 4,5,6; 7,8,9};或任何一种方法的名称。<b>MDeterm</b>返回 #VALUE ！ 错误时： </para>
          <para>Array 中单元格为空或包含文字。</para>
          <para>Array 的行和列的数目不相等。</para>
          <para>数组容量超出了 73 列 × 73 行。</para>
          <para>矩阵的行列式值是由数组中的各元素计算而来的。对一个三行、三列的数组 A1:C3，其行列式的值定义如下：

</para>
          <code>MDETERM(A1:C3)</code>
          <para>等于</para>
          <code>A1*(B2*C3-B3*C2) + A2*(B3*C1-B1*C3) + A3*(B1*C2-B2*C1)</code>
          <para>矩阵的行列式值常被用来求解多元联立方程。</para>
          <para>
            <b>Mdeterm 大约 16 位有效数字，不完整计算时可能会导致小的误差。</b> 例如，单一矩阵的行列式可能不同于 1e-16 零。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MDuration">
      <MemberSignature Language="C#" Value="public double MDuration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDuration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDuration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDuration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16843)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">Coupon - 债券的年息票利率。</param>
        <param name="Arg4">Yld - 债券的年收益。</param>
        <param name="Arg5">Frequency - 每年支付息票的次数。如果按年支付，frequency = 1；如果按半年期支付，frequency = 2；如果按季支付，frequency = 4。</param>
        <param name="Arg6">Basis - 要使用的日计数基准类型。</param>
        <summary>返回假设面值 ￥100 的债券的 Macauley 修正期限。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>成交日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，成交日为 2008 年 7 月 1 日，而到期日是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>Settlement、maturity、frequency 和 basis 将被截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，<b>函数 MDuration</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 yld &lt; 0 或者，如果息票&lt;0，<b>函数 MDuration</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 frequency 不为数字 1、 2 或 4，<b>函数 MDuration</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>函数 MDuration</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 settlement ≥ maturity，<b>函数 MDuration</b>返回 #NUM ！ 错误值。 </para>
          <para>修正期限的计算公式如下：

 </para>
          <para>图 1： 修正持续时间的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Median">
      <MemberSignature Language="C#" Value="public double Median (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Median([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Median (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16611)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 要计算中值的 1 到 30 个数字。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回给定数字集合的中值。中值是处于一组数字中间的数字。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果没有集合中的号码为偶数，然后<b>Median</b>计算中间中两个数字的平均值。 请参阅示例中的第二个公式。</para>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入参数列表的逻辑值和数字的文本表示也包括在内。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>
            <b>注意</b>： <b>Median</b>函数趋，这是一组数统计分布中的中心的位置。 三个趋大多数常用方法是：</para>
          <list type="bullet">
            <item>
              <description>算术平均值，并通过添加一组数，然后除以这些号码数计算的平均值。 例如，2、 3、 3、 5、 7 和 10 的平均值为 30 除以 6，这是 5。 </description>
            </item>
            <item>
              <description>这是一组数; 中间号的中间值即一半的号码的值都大于 median 和半号码的值都小于中间值。 例如，2、 3、 3、 5、 7 和 10 的中间值是 4。</description>
            </item>
            <item>
              <description>这是一组数中的出现频率最多号的模式。 例如，2、 3、 3、 5、 7 和 10 的模式为 3。</description>
            </item>
          </list>
          <para>对于对称分布的一组数字，这三种趋中性衡量方式完全相同。对于偏态分布的一组数字，这些衡量方式可能会不同。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public double Min (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Min([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Min (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16390)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 要从中查找最小值的 1 到 30 个数字。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回一组值中的最小值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入参数列表的数字的逻辑值和文本表示也包括在内。</para>
          <para>如果参数为数组或引用，则只使用其中的数值。数组或引用中的空白单元格、逻辑值或文本将被忽略。</para>
          <para>如果参数不包含任何数字，则<b>Min</b>返回 0。 </para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>如果想在引用中将数字的逻辑值和文本表示作为计算的一部分包括在内，请使用 MINA 函数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MInverse">
      <MemberSignature Language="C#" Value="public object MInverse (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MInverse([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MInverse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MInverse (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MInverse(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16548)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - 行数和列数相等的数值数组。</param>
        <summary>返回数组矩阵的逆距阵。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>数组的大小不得超过 52 列 52 行。 如果是这样，则此函数返回 #VALUE ！ 错误。 </para>
          <para>Array 可以是单元格区域，例如 A1:C3；数组常量，例如 {1,2,3;4,5,6;7,8,9}；或单元格区域和数组常量的名称。</para>
          <para>如果数组中的任何单元格为空或包含文字，<b>则函数 MInverse</b>返回 #VALUE ！ 错误值。 </para>
          <para>
            <b>则函数 MInverse</b>也返回 #VALUE ！ 如果数组不具有相同数量的行和列的错误值。 </para>
          <para>对于返回结果为数组的公式，必须以数组公式的形式输入。</para>
          <para>与求行列式的值一样，求解矩阵的逆常被用于求解多元联立方程组。矩阵和它的逆矩阵相乘为单位矩阵：对角线的值为 1，其他值为 0。</para>
          <para>下面是计算二阶方阵逆的示例。假设 A1:B2 中包含以字母 a、b、c 和 d 表示的四个任意的数，则下表表示矩阵 A1:B2 的逆矩阵：

</para>
          <list type="table">
            <item>
              <term>第一行</term>
              <description>d / (*d-b*c)</description>
              <description>b / (b*c a*d)</description>
            </item>
            <item>
              <term>第二行</term>
              <description>c / (b*c a*d)</description>
              <description>/ (*d-b*c)</description>
            </item>
          </list>
          <para>
            <b>函数 minverse 大约 16 位有效数字，可能会导致小的误差时取消不完整。</b>
          </para>
          <para>某些方形矩阵无法逆选，并将返回 #NUM ！ 矩阵的<b>行列式</b>值。 不能求逆矩阵的行列式值为 0。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MIrr">
      <MemberSignature Language="C#" Value="public double MIrr (object Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MIrr([in]object Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MIrr(System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIrr (Arg1 As Object, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MIrr(System::Object ^ Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16445)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Values - 一个数组或对包含数字的单元格的引用。这些数值代表固定期间的一系列支出（负值）及收入（正值）。</param>
        <param name="Arg2">Finance_rate - 现金流中使用的资金支付的利率。</param>
        <param name="Arg3">Reinvest_rate - 将现金流再投资的收益率。</param>
        <summary>返回某一连续期间内现金流的修正内部收益率。函数 MIRR 同时考虑了投资的成本和现金再投资的收益率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>值必须包含至少一个正值和一个负值，以计算已修改的内部报酬率。 否则， <b>MIrr</b>返回错误值 #DIV/0 ！ 错误值。 </para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>
            <b>MIrr</b>使用值的顺序来解释现金流的顺序。 请确保您希望的顺序正确迹象 （正值的现金，支出的现金的负值） 及输入您的付款和收入值。 </para>
          <para>如果 n 是值中的现金流的次数，finance_rate 为 frate，而 reinvest_rate 为 rrate，<b>函数 mirr 的计算</b>公式为： </para>
          <para>图 1: MIrr 方法的公式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MMult">
      <MemberSignature Language="C#" Value="public object MMult (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MMult([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MMult(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MMult (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MMult(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16549)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1, array2 - 要进行矩阵乘法运算的两个数组。</param>
        <param name="Arg2">Array1, array2 - 要进行矩阵乘法运算的两个数组。</param>
        <summary>返回两数组的矩阵乘积。结果矩阵的行数与 array1 的行数相同，矩阵的列数与 array2 的列数相同。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Array1 的列数必须与 array2 的行数相同，而且两个数组中都只能包含数值。</para>
          <para>Array1 和 array2 可以是单元格区域、数组常量或引用。</para>
          <para>
            <b>MMult</b>返回 #VALUE ！ 错误时： </para>
          <para>任意单元格为空或包含文字。</para>
          <para>array1 的列数与 array2 的行数不相等。</para>
          <para>结果数组的容量等于或大于总计 5,461 个单元格。</para>
          <para>两个数组 b 和 c 的矩阵乘积数组 a 为：

 </para>
          <para>图 1： 矩阵乘积数组的两个数组 b 和 c</para>
          <para></para>
          <para></para>
          <para>其中 i 为行数，j 为列数。</para>
          <para>对于返回结果为数组的公式，必须以数组公式的形式输入。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public double Mode (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16714)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">number1, number2, ... - 要计算其众数的 1 到 30 个参数。也可以不使用这种用逗号分隔参数的形式，而使用一个数组或一个对数组的引用。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回在某一数组或数据区域中出现频率最多的数值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>此功能已替换一个或多个新函数的可能提供提高的准确性，并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />方法。</para>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但包含零值的单元格将被包括在内。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>如果数据集中不包含重复的数据点，则<b>Mode</b>返回错误值 # n/A。</para>
          <para>
            <b>注意</b>：<b>模式</b>函数趋，这是一组数统计分布中的中心的位置。 三个趋大多数常用方法是：</para>
          <list type="bullet">
            <item>
              <description>算术平均值，并通过添加一组数，然后除以这些号码数计算的平均值。 例如，2、 3、 3、 5、 7 和 10 的平均值为 30 除以 6，这是 5。 </description>
            </item>
            <item>
              <description>这是一组数; 中间号的中间值即一半的号码的值都大于 median 和半号码的值都小于中间值。 例如，2、 3、 3、 5、 7 和 10 的中间值是 4。 </description>
            </item>
            <item>
              <description>这是一组数中的出现频率最多号的模式。 例如，2、 3、 3、 5、 7 和 10 的模式为 3。</description>
            </item>
          </list>
          <para>对于对称分布的一组数字，这三种趋中性衡量方式完全相同。对于偏态分布的一组数字，这些衡量方式可能会不同。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Mult">
      <MemberSignature Language="C#" Value="public object Mode_Mult (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Mode_Mult([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Mult (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16881)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1-要为其计算模式的第一个数字参数。</param>
        <param name="Arg2">Number2 - Number30 - 要计算其众数的 2 到 30 个数字参数。也可以不使用这种用逗号分隔参数的形式，而使用一个数组或一个对数组的引用。</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回在某一数组或数据区域中出现频率最多的垂直数组。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但包含零值的单元格将被包括在内。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>如果数据集中不包含重复的数据点，<b>则 mode_mult 将</b>返回错误值 # n/A。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Sngl">
      <MemberSignature Language="C#" Value="public double Mode_Sngl (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode_Sngl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Sngl (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16882)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">number1, number2, ... - 要计算其众数的 1 到 30 个参数。也可以不使用这种用逗号 (,) 分隔参数的形式，而使用一个数组或一个对数组的引用。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回在某一数组或数据区域中出现频率最多的数值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但包含零值的单元格将被包括在内。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>如果数据集中不包含重复的数据点，<b>则 mode_sngl 将</b>返回错误值 # n/A。</para>
          <para>
            <b>注意</b>： <b>Mode_Sngl</b>函数趋，这是一组数统计分布中的中心的位置。 三个趋大多数常用方法是：</para>
          <list type="bullet">
            <item>
              <description>平均算术平均值，和的计算方法添加一组数，然后除以这些数字的个数。 例如，2、 3、 3、 5、 7 和 10 的平均值为 30 除以 6，这是 5。 </description>
            </item>
            <item>
              <description>Median 的一组数; 中间数即一半的号码的值都大于 median 和半号码的值都小于中间值。 例如，2、 3、 3、 5、 7 和 10 的中间值是 4。 </description>
            </item>
            <item>
              <description>模式号码的一组中出现频率最多数量。 例如，2、 3、 3、 5、 7 和 10 的模式为 3。</description>
            </item>
          </list>
          <para>对于对称分布的一组数字，这三种趋中性衡量方式完全相同。对于偏态分布的一组数字，这些衡量方式可能会不同。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MRound">
      <MemberSignature Language="C#" Value="public double MRound (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MRound([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MRound(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MRound (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MRound(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16806)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 是要进行舍入的值。</param>
        <param name="Arg2">Multiple - 用以进行舍入计算的基数。</param>
        <summary>返回参数按指定基数舍入后的数值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>MRound</b>向上舍入，远离零，如果 number 除以基数的余数大于或等于一半的多个值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiNomial">
      <MemberSignature Language="C#" Value="public double MultiNomial (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MultiNomial([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MultiNomial(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MultiNomial (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16858)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1,number2, ... - 用于进行函数 Multinomial 运算的 1 到 29 个数值参数。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回参数和的阶乘与各参数阶乘乘积的比值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>函数 MultiNomial</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果任一参数小于零，<b>函数 MultiNomial</b>返回 #NUM ！ 错误值。 </para>
          <para>函数 MULTINOMIAL 的计算公式为：

 </para>
          <para>图 1： 的 MultiNomial 方法的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Munit">
      <MemberSignature Language="C#" Value="public object Munit (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Munit([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Munit(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Munit (Arg1 As Double) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Munit(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16966)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">指定要返回的单位矩阵的维度的整数。</param>
        <summary>返回指定维度的单位矩阵。</summary>
        <returns>
          <b>VARIANT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinom_Dist">
      <MemberSignature Language="C#" Value="public double NegBinom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16922)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">number_f - 失败的次数。</param>
        <param name="Arg2">number_s - 成功次数阈值。</param>
        <param name="Arg3">probability_s - 成功的概率。</param>
        <param name="Arg4">Cumulative-决定函数的形式一个逻辑值。 如果累积为<b>true</b>时，<b>则 negbinom_dist 将</b>返回累积分布函数;如果<b>false</b>，则将返回概率密度函数。</param>
        <summary>返回负二项式分布。 <b>则 negbinom_dist 将</b>返回的时，会出现 number_f 失败前 number_s th 成功，成功的概率常量是 probability_s 的概率。 此函数类似于二项式分布，只是成功的次数固定的而且试验的次数是变量。 二项式分布，如 trials 假定为独立。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>例如，您需要 10 查找反应敏捷，而且您了解候选具有这种特征的概率为 0.3。 <b>NegBinom_Dist</b>将您将查找所有 10 限定的候选人之前面试一定数量的未限定候选人的概率计算： </para>
          <para>number_f 和 number_s 都将被截尾取整。</para>
          <para>如果任一参数为非数值型，<b>则 negbinom_dist 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 probability_s &lt; 0 或 probability &gt; 1，<b>则 negbinom_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 number_f &lt; 0 或 number_s &lt; 1，<b>则 negbinom_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>负二项式分布的计算公式为： 

 </para>
          <para>图 1： 负二项式分布的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>x 是 number_f，r 是 number_s，，p 是 probability_s。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinomDist">
      <MemberSignature Language="C#" Value="public double NegBinomDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinomDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinomDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16676)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">number_f - 失败的次数。</param>
        <param name="Arg2">number_s - 成功次数阈值。</param>
        <param name="Arg3">probability_s - 成功的概率。</param>
        <summary>返回负二项式分布。 则 NegBinomDist 返回将会出现 number_f 失败前 number_s th 成功，probability_s 常量成功的概率时的概率。 此函数类似于二项式分布，只是成功的次数固定的而且试验的次数是变量。 二项式分布，如 trials 假定为独立。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>此功能已替换一个或多个新函数的可能提供提高的准确性，并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />方法。</para>
          <para>例如，您需要 10 查找反应敏捷，而且您了解候选具有这种特征的概率为 0.3。 <b>则 NegBinomDist</b>计算您将查找所有 10 限定的候选人之前面试一定数量的未限定候选人的概率。 </para>
          <para>number_f 和 number_s 都将被截尾取整。</para>
          <para>如果任一参数为非数值型，<b>则 NegBinomDist</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 probability_s &lt; 0 或 probability &gt; 1，<b>则 NegBinomDist</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 number_f &lt; 0 或 number_s &lt; 1，<b>则 NegBinomDist</b>返回 #NUM ！ 错误值。 </para>
          <para>负二项式分布的计算公式为： 

 </para>
          <para>图 1： 负二项式分布的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>x 是 number_f，r 是 number_s，，p 是 probability_s。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays">
      <MemberSignature Language="C#" Value="public double NetworkDays (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date - 代表开始日期的日期。</param>
        <param name="Arg2">End_date - 代表结束日期的日期。</param>
        <param name="Arg3">Holidays - 可选的区域，包含要从工作日历中排除的一个或多个日期，如各种省/市/自治区和国家/地区的法定假日和非法定假日。该列表可以是包含日期的单元格区域，也可以是由代表日期的序列号所构成的数组常量。</param>
        <summary>返回 start_date 和 end_date 之间的整个工作天数。 工作日排除周末和假日中标识任何日期。 使用计算应计的员工福利<b>则函数 networkdays 将</b>基于特定术语期间有效的天数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>如果任一参数不是有效日期，<b>则函数 networkdays 将</b>返回 #VALUE ！。 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays_Intl">
      <MemberSignature Language="C#" Value="public double NetworkDays_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16904)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date-开始日期为其差异是计算。 或晚于 end_date，start_date 可以是早于、 相同。</param>
        <param name="Arg2">End_date-为其差异是计算的结束日期。 或晚于 end_date，start_date 可以是早于、 相同。</param>
        <param name="Arg3">周末-指示周末和不包括在整个 start_date 和 end_date 之间的工作日数周的天数。 周末是 weekend 数值或周末发生指定的字符串。</param>
        <param name="Arg4">假日的一组可选的一个或多个要排除从日历工作日的日期。 包含日期、 的单元格区域或数组常量串行值表示两个日期的假日。 可以是任意顺序的日期或串行值在假日。</param>
        <summary>返回两个日期之间全天工作日的数量，并使用参数指示哪些日期为周末以及周末的天数。周末以及指定为节假日的任何日期都不被视为工作日。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 start_date 晚于 end_date，则返回值将为负值，量值将是全天工作日的数量。</para>
          <para>如果 start_date 超出了当前日期基值的范围，<b>则 networkdays_intl 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 end_date 超出了当前日期基值的范围，<b>则 networkdays_intl 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 weekend 字符串的长度无效或包含无效字符，<b>则 networkdays_intl 将</b>返回 #VALUE ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nominal">
      <MemberSignature Language="C#" Value="public double Nominal (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Nominal([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Nominal(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Nominal (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Nominal(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16829)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Effect_rate - 实际利率。</param>
        <param name="Arg2">Npery - 每年的复利期数。</param>
        <summary>基于给定的实际利率和年复利期数，返回名义年利率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Npery 将被截尾取整。</para>
          <para>如果任一参数为非数值型，<b>名义</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 effect_rate ≤ 0 或 npery &lt; 1，<b>名义</b>返回 #NUM ！ 错误值。 </para>
          <para>与相关
            <b>名义</b><see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" /> ，如下式所示： </para>
          <para>图 1： 等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Dist">
      <MemberSignature Language="C#" Value="public double Norm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16883)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 需要计算其分布的数值。</param>
        <param name="Arg2">mean - 分布的算术平均值。</param>
        <param name="Arg3">standard_dev - 分布的标准偏差。</param>
        <param name="Arg4">Cumulative-决定函数的形式一个逻辑值。 如果累积为<b>true</b>，<b>则 norm_dist 将</b>返回累积分布函数;如果<b>false</b>，则将返回概率密度函数的。</param>
        <summary>返回指定平均值和标准偏差的正态分布。此函数在统计方面应用范围很广（包括假设检验）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 mean 或 standard_dev 为非数值型，<b>则 norm_dist 将</b>返回 #VALUE ！。 错误值。 </para>
          <para>如果 standard_dev ≤ 0，<b>则 norm_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 mean = 0,standard_dev = 1，且 cumulative = <b>true</b>，<b>则 norm_dist 将</b>返回标准正态分布， <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />。 </para>
          <para>正态密度函数的计算公式 (累积 = <b>false</b>) 是： </para>
          <para>图 1： 的正态密度函数的等式</para>
          <para></para>
          <para></para>
          <para>如果 cumulative = <b>true</b>，该公式将从负无穷大到公式中给定的 x 的积分。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Inv">
      <MemberSignature Language="C#" Value="public double Norm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16884)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">probability - 对应于正态分布的概率。</param>
        <param name="Arg2">mean - 分布的算术平均值。</param>
        <param name="Arg3">standard_dev - 分布的标准偏差。</param>
        <summary>返回指定平均值和标准偏差的正态累积分布函数的反函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 norm_inv 将</b>返回 #VALUE ！。 错误值。 </para>
          <para>如果 probability &lt;= 0 或 probability &gt;= 1，<b>则 norm_inv 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 standard_dev ≤ 0，<b>则 norm_inv 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 mean = 0 且 standard_dev = 1，<b>则 Norm_Inv</b>使用标准正态分布 (请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />)。</para>
          <para>概率给定一个值，<b>则 norm_inv 将</b>搜寻 x 满足该值 （x、 mean 或 standard_dev，TRUE），则 norm_dist 将 = 概率。 因此，<b>则 norm_inv 将</b>精度取决精度<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Dist">
      <MemberSignature Language="C#" Value="public double Norm_S_Dist (double Arg1, bool Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Dist([in]float64 Arg1, [in]bool Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Dist (Arg1 As Double, Arg2 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Dist(double Arg1, bool Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16923)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">z - 要计算其分布的值。</param>
        <param name="Arg2">Cumulative-决定函数的形式一个逻辑值。 如果累积为<b>true</b>时，<b>则 Norm_S_Dist</b>将返回累积分布函数;如果<b>false</b>，则将返回概率密度函数的。</param>
        <summary>返回标准正态累积分布函数，该分布的平均值为 0（零），标准偏差为 1。可以使用此函数代替标准正态曲线面积表。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 z 为非数值型，<b>则 Norm_S_Dist</b>将返回 #VALUE ！ 错误值。 </para>
          <para>标准正态分布密度函数的计算公式为： 

 </para>
          <para>图 1： 的标准正态分布密度函数的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Inv">
      <MemberSignature Language="C#" Value="public double Norm_S_Inv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Inv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Inv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Inv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16924)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">probability - 对应于正态分布的概率。</param>
        <summary>返回标准正态累积分布函数的反函数。该分布的平均值为 0（零），标准偏差为 1。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 probability 为非数值型，<b>则 Norm_S_Inv</b>将返回 #VALUE ！ 错误值。 </para>
          <para>如果 probability &lt; 0 或 probability &gt; 1，<b>则 Norm_S_Inv</b>将返回 #NUM ！ 错误值。</para>
          <para>给定值的概率， <b>Norm_S_Inv</b>搜寻该值 z 此类的 NORM_S_DIST(z) = 概率。 因此，精度<b>Norm_S_Inv</b>取决精度<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />。 <b>Norm_S_Inv</b>使用迭代的搜索技术。 如果搜索不收敛 100 次迭代后，该函数将返回 # n/A 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NormDist">
      <MemberSignature Language="C#" Value="public double NormDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16677)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 需要计算其分布的数值。</param>
        <param name="Arg2">mean - 分布的算术平均值。</param>
        <param name="Arg3">standard_dev - 分布的标准偏差。</param>
        <param name="Arg4">Cumulative-决定函数的形式一个逻辑值。 如果累积为<b>true</b>，<b>则 NormDist</b>返回累积分布函数;如果<b>false</b>，则将返回概率密度函数的。</param>
        <summary>返回指定平均值和标准偏差的正态分布。此函数在统计方面应用范围广泛（包括假设检验）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />方法。</para>
          <para>如果 mean 或 standard_dev 为非数值型，<b>则 NormDist</b>返回 #VALUE ！。 错误值。 </para>
          <para>如果 standard_dev ≤ 0，<b>则 NormDist</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 mean = 0,standard_dev = 1，且 cumulative = <b>true</b>，<b>则 NormDist</b>返回标准正态分布，<b>则 NormDist</b>。 </para>
          <para>正态密度函数的计算公式 (累积 = <b>false</b>) 是： </para>
          <para>图 1： 的正态密度函数的等式</para>
          <para></para>
          <para></para>
          <para>如果 cumulative = <b>true</b>，该公式将从负无穷大到公式中给定的 x 的积分。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NormInv">
      <MemberSignature Language="C#" Value="public double NormInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16679)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">probability - 对应于正态分布的概率。</param>
        <param name="Arg2">mean - 分布的算术平均值。</param>
        <param name="Arg3">standard_dev - 分布的标准偏差。</param>
        <summary>返回指定平均值和标准偏差的正态累积分布函数的反函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" />方法。</para>
          <para>如果任一参数为非数值型，<b>则 NormInv</b>返回 #VALUE ！。 错误值。 </para>
          <para>如果 probability &lt; 0 或 probability &gt; 1，<b>则 NormInv</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 standard_dev ≤ 0，<b>则 NormInv</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 mean = 0 且 standard_dev = 1，<b>则 NormInv</b>使用标准正态分布 (请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" />)。 </para>
          <para>概率给定一个值，<b>则 NormInv</b>搜寻 x 满足该值 （x、 mean 或 standard_dev，TRUE），则 NORMDIST = 概率。 因此，<b>则 NormInv</b>精度取决精度<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" />。 <b>则 NormInv</b>使用迭代的搜索技术。 如果搜索不收敛 100 次迭代后，该函数将返回 # n/A 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSDist">
      <MemberSignature Language="C#" Value="public double NormSDist (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSDist([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSDist (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSDist(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16678)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">z - 要计算其分布的值。</param>
        <summary>返回标准正态累积分布函数，该分布的平均值为 0（零），标准偏差为 1。可以使用此函数代替标准正态曲线面积表。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />方法。</para>
          <para>如果 z 为非数值型，<b>则 NormSDist</b>返回 #VALUE ！ 错误值。 </para>
          <para>标准正态分布密度函数的计算公式为： 

 </para>
          <para>图 1： 的标准正态分布密度函数的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSInv">
      <MemberSignature Language="C#" Value="public double NormSInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16680)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">probability - 对应于正态分布的概率。</param>
        <summary>返回标准正态累积分布函数的反函数。该分布的平均值为 0，标准偏差为 1。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />方法。</para>
          <para>如果 probability 为非数值型，<b>则 NormSInv</b>返回 #VALUE ！。 错误值。 </para>
          <para>如果 probability &lt;= 0 或 probability &gt;= 1，<b>则 NormSInv</b>将返回 #NUM ！ 错误值。</para>
          <para>概率给定一个值，<b>则 NormSInv</b>搜寻该值 z 此类的 NORMSDIST(z) = 概率。 因此，<b>则 NormSInv</b>精度取决精度<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" />。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public double NPer (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NPer([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NPer(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16442)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate - 各期利率。</param>
        <param name="Arg2">Pmt - 各期所应支付的金额，其数值在整个年金期间保持不变。通常，pmt 包括本金和利息，但不包括其他的费用或税款。</param>
        <param name="Arg3">Pv - 现值，或一系列未来付款当前所值的累积和。</param>
        <param name="Arg4">Fv - 未来值，或在最后一次付款后希望得到的现金余额。如果省略 fv，则假定其值为 0（例如，一笔贷款的未来值为 0）。</param>
        <param name="Arg5">Type - 数字 0 或 1，用以指示付款时间。</param>
        <summary>基于固定利率及等额分期付款方式，返回某项投资的总期数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>期末</description>
            </item>
            <item>
              <term>1</term>
              <description>期初</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Npv">
      <MemberSignature Language="C#" Value="public double Npv (double Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Npv([in]float64 Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Npv (Arg1 As Double, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16395)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate - 某一期间的贴现率。</param>
        <param name="Arg2">Value1, value2, ... - 代表支出及收入的 1 到 29 个参数。</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>通过使用贴现率以及一系列未来支出（负值）和收入（正值），计算一项投资的净现值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Value1, value2, ... 在时间上必须具有相等间隔，并且都发生在期末。</para>
          <para>
            <b>Npv</b>使用 value1，value2，...的顺序来解释现金流的顺序。 确保输入您的付款和收入值以正确的顺序。 </para>
          <para>如果参数为数值、空白单元格、逻辑值或数字的文本表达式，则都会计算在内；如果参数是错误值或不能转化为数值的文本，则被忽略。</para>
          <para>如果参数是一个数组或引用，则只计算其中的数字。数组或引用中的空白单元格、逻辑值、文本或错误值将被忽略。</para>
          <para>
            <b>Npv</b>投资 value1 现金流的日期之前的一个期间开始和结束最后一个现金流列表中。 <b>Npv</b>的计算基于未来的现金流。 如果您的第一个现金流出现的第一段的开头，第一个值必须被添加到<b>Npv</b>结果中，不包含在 values 参数。 有关详细信息，请参阅下面的示例。 </para>
          <para>如果 n 是值列表中的现金流的次数， <b>Npv</b>的计算公式为： </para>
          <para>图 1： 公式 Npv 方法</para>
          <para></para>
          <para></para>
          <para>
            <b>Npv</b>是类似于<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />函数 （现值）。 PV 和<b>Npv</b>的主要区别在于<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />允许现金流末尾或段的开头开始。 与变量<b>Npv</b>现金流值，不同<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />现金流值必须是在整个投资常量。 有关年金与财务函数的信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />。 </para>
          <para>
            <b>Npv</b>还与<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />函数 （内部回报率）。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />是为其<b>Npv</b>等于零的速率： NPV(IRR(...)，...) = 0。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberValue">
      <MemberSignature Language="C#" Value="public double NumberValue (string Arg1, string Arg2, string Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NumberValue([in]string Arg1, [in]string Arg2, [in]string Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NumberValue(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function NumberValue (Arg1 As String, Arg2 As String, Arg3 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NumberValue(System::String ^ Arg1, System::String ^ Arg2, System::String ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16969)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">字符串，表示要转换的号码。</param>
        <param name="Arg2">用作字符串中的十进制分隔符的字符。</param>
        <param name="Arg3">用作字符串中的组分隔符的字符。</param>
        <summary>将文本转换为数字，在独立于区域设置的方式。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Bin">
      <MemberSignature Language="C#" Value="public string Oct2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16774)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要转换的八进制数。Number 不能多于 10 个字符。最高有效位为符号位，其余 29 位为数字位。负数用二进制数的补码表示。</param>
        <param name="Arg2">位置-要使用的字符数。 如果省略位置，<b>函数 Oct2Bin</b>将使用的最小所需的字符数。 位置可用于填充带前导 0 （零） 的返回值。</param>
        <summary>将八进制数转换为二进制数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number 为负数，<b>函数 Oct2Bin</b>将忽略 places 并返回一个以 10 个字符二进制数。 </para>
          <para>如果参数 number 为负数，不能小于 7777777000；如果参数 Number 为正数，不能大于 777。</para>
          <para>如果 number 不是有效的八进制数，<b>函数 Oct2Bin</b>返回 #NUM ！ 错误值。 </para>
          <para>如果<b>函数 Oct2Bin</b>需要比 places 指定的字符，则将返回 #NUM ！ 错误值。 </para>
          <para>如果 places 不是整数，则将被截尾取整。</para>
          <para>如果 places 为非数值型，<b>函数 Oct2Bin</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 places 为负数，<b>函数 Oct2Bin</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Dec">
      <MemberSignature Language="C#" Value="public string Oct2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Oct2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16776)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要转换的八进制数。Number 不能多于 10 个八进制字符（30 个二进制位）。最高有效位为符号位，其余 29 位为数字位。负数用二进制数的补码表示。</param>
        <summary>将八进制数转换为十进制数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number 不是有效的八进制数，<b>函数 Oct2Dec</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Hex">
      <MemberSignature Language="C#" Value="public string Oct2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16775)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要转换的八进制数。Number 不能多于 10 个八进制字符（30 个二进制位）。最高有效位为符号位，其余 29 位为数字位。负数用二进制数的补码表示。</param>
        <param name="Arg2">位置-要使用的字符数。 如果省略位置，<b>函数 Oct2Hex</b>将使用的最小所需的字符数。 位置可用于填充带前导 0 （零） 的返回值。</param>
        <summary>将八进制数转换为十六进制数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number 为负数，<b>函数 Oct2Hex</b>将忽略 places 并返回一个以 10 个字符十六进制数。 </para>
          <para>如果 number 不是有效的八进制数，<b>函数 Oct2Hex</b>返回 #NUM ！ 错误值。 </para>
          <para>如果函数<b>Oct2Hex</b>需要比 places 指定的字符，则将返回 #NUM ！ 错误值。 </para>
          <para>如果 places 不是整数，则将被截尾取整。</para>
          <para>如果 places 为非数值型，<b>函数 Oct2Hex</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 places 为负数，<b>函数 Oct2Hex</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Odd">
      <MemberSignature Language="C#" Value="public double Odd (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Odd([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Odd(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Odd (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Odd(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16682)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 是要进行舍入的值。</param>
        <summary>返回数字向上舍入到的最接近的奇数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number 为非数值型，<b>奇数</b>返回 #VALUE ！ 错误值。 </para>
          <para>不论数字符号如何，都按远离零来进行舍入。如果 number 正好是奇数，则不进行任何舍入。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFPrice">
      <MemberSignature Language="C#" Value="public double OddFPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16846)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">Issue - 债券的发行日。</param>
        <param name="Arg4">First_coupon - 债券的首期付息日。</param>
        <param name="Arg5">Rate - 债券的利率。</param>
        <param name="Arg6">Yld - 债券的年收益。</param>
        <param name="Arg7">Redemption - 面值 ￥100 的债券的赎回值。</param>
        <param name="Arg8">Frequency - 每年支付息票的次数。如果按年支付，frequency = 1；如果按半年期支付，frequency = 2；如果按季支付，frequency = 4。</param>
        <param name="Arg9">Basis - 要使用的日计数基准类型。</param>
        <summary>返回首期付息日不固定（长期或短期）的面值 ￥100 的债券价格。</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>成交日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，成交日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>Settlement、maturity、issue、first_coupon 和 basis 将被截尾取整。</para>
          <para>如果 settlement、 maturity、 issue 或 first_coupon 不是有效日期，<b>则 oddfprice 函数</b>返回 #VALUE ！。 错误值。 </para>
          <para>如果速率&lt;0 或者，如果 yld &lt; 0，<b>则 oddfprice 函数</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>则 oddfprice 函数</b>返回 #NUM ！ 错误值。 </para>
          <para>必须满足下列日期条件;否则， <b>oddfprice 函数</b>返回 #NUM ！ 错误值： </para>
          <para>maturity &gt; first_coupon &gt; settlement&gt;问题</para>
          <para></para>
          <para>
            <b>Oddfprice 函数</b>的计算公式如下： 奇数简短的首期付息日：</para>
          <para>图 1： 奇数短首期付息日</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>A = 的从息票期开始到结算日 （应计天） 的天数。</para>
          <para>DSC = 的成交到下一个息票的天数。</para>
          <para>DFC = 的奇数的首期付息日从头到首期付息日的天数。</para>
          <para>E = 中息票期的天数。</para>
          <para>N = 结算日和 redemption 日期之间的付息数。 （如果此号码包含分数，它将引发为下一个整数。）</para>
          <para>奇数债券首次付息：</para>
          <para>图 2： 奇数债券首次付息</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>Ai = 从头开始第 i 个或最后一天、 奇数期内的准息票期数。</para>
          <para>DCi = 从过期的日期 （或问题日期） 到第一个准付息的天数 (我 = 1) 或中准付息的天数 (我 = 2，...，我 = NC)。</para>
          <para>DSC = 成交天至下一个息票的次数。</para>
          <para>E = 中息票期的天数。</para>
          <para>N = 付息的第一个真实付息和 redemption 日期之间的数。 （如果此号码包含分数，它将引发为下一个整数。）</para>
          <para>NC = 付息期内的准息票期数。 （如果此号码包含分数，它将引发为下一个整数。）</para>
          <para>NLi = 完整 i 个或最后一个、 奇数期内的准息票期的天在正常。</para>
          <para>Nq = 结算日和首期付息日之间的整个准息票期数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFYield">
      <MemberSignature Language="C#" Value="public double OddFYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16847)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">Issue - 债券的发行日。</param>
        <param name="Arg4">First_coupon - 债券的首期付息日。</param>
        <param name="Arg5">Rate - 债券的利率。</param>
        <param name="Arg6">Pr - 债券的价格。</param>
        <param name="Arg7">Redemption - 面值 ￥100 的债券的赎回值。</param>
        <param name="Arg8">Frequency - 每年支付息票的次数。如果按年支付，frequency = 1；如果按半年期支付，frequency = 2；如果按季支付，frequency = 4。</param>
        <param name="Arg9">Basis - 要使用的日计数基准类型。</param>
        <summary>返回首期付息日不固定（长期或短期）的债券的收益率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>成交日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，成交日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>Settlement、maturity、issue、first_coupon 和 basis 将被截尾取整。</para>
          <para>如果 settlement、 maturity、 issue 或 first_coupon 不是有效日期，<b>函数 OddFYield</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果速率&lt;0 或如果 pr ≤ 0，<b>函数 OddFYield</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>函数 OddFYield</b>返回 #NUM ！ 错误值。 </para>
          <para>必须满足下列日期条件;否则，<b>函数 OddFYield</b>返回 #NUM ！ 错误值： </para>
          <para>maturity &gt; first_coupon &gt; settlement&gt;问题</para>
          <para>Excel 使用迭代技术来计算<b>函数 OddFYield</b>。 此函数将使用基于函数使用的公式牛顿法<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />。 直到接近价格是估计的价格与给定的收益，通过 100 次迭代更改收益。 请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />的<b>函数 OddFYield</b>使用的公式。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLPrice">
      <MemberSignature Language="C#" Value="public double OddLPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16844)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">Last_interest - 债券的末期付息日。</param>
        <param name="Arg4">Rate - 债券的利率。</param>
        <param name="Arg5">Yld - 债券的年收益。</param>
        <param name="Arg6">Redemption - 面值 ￥100 的债券的赎回值。</param>
        <param name="Arg7">Frequency - 每年支付息票的次数。如果按年支付，frequency = 1；如果按半年期支付，frequency = 2；如果按季支付，frequency = 4。</param>
        <param name="Arg8">Basis - 要使用的日计数基准类型。</param>
        <summary>返回末期付息日不固定（长期或短期）的面值 ￥100 的债券的价格。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>成交日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，成交日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>Settlement、maturity、last_interest 和 basis 将被截尾取整。</para>
          <para>如果 settlement、 maturity 或 last_interest 不是有效日期，<b>函数 OddLPrice</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果速率&lt;0 或者，如果 yld &lt; 0，<b>函数 OddLPrice</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>函数 OddLPrice</b>返回 #NUM ！ 错误值。 </para>
          <para>必须满足下列日期条件;否则，<b>函数 OddLPrice</b>返回 #NUM ！ 错误值： </para>
          <para>maturity &gt; settlement &gt; last_interest</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLYield">
      <MemberSignature Language="C#" Value="public double OddLYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16845)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">Last_interest - 债券的末期付息日。</param>
        <param name="Arg4">Rate - 债券的利率。</param>
        <param name="Arg5">Pr - 债券的价格。</param>
        <param name="Arg6">Redemption - 面值 ￥100 的债券的赎回值。</param>
        <param name="Arg7">Frequency - 每年支付息票的次数。如果按年支付，frequency = 1；如果按半年期支付，frequency = 2；如果按季支付，frequency = 4。</param>
        <param name="Arg8">Basis - 要使用的日计数基准类型。</param>
        <summary>返回末期付息日不固定（长期或短期）的债券的收益率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>成交日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，成交日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>Settlement、maturity、last_interest 和 basis 将被截尾取整。</para>
          <para>如果 settlement、 maturity 或 last_interest 不是有效日期，<b>函数 OddLYield</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果速率&lt;0 或如果 pr ≤ 0，<b>函数 OddLYield</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>函数 OddLYield</b>返回 #NUM ！ 错误值。 </para>
          <para>必须满足下列日期条件;否则，<b>函数 OddLYield</b>返回 #NUM ！ 错误值： </para>
          <para>maturity &gt; settlement &gt; last_interest </para>
          <para>
            <b>函数 OddLYield</b>的计算公式如下： </para>
          <para>图 1： 的 OddLYield 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>Ai = 期间从开始计数转接之前 redemption 的末期付息日的奇数页内的应计天数第 i 个或最后一个，准息票期数。</para>
          <para>DCi = 的分隔实际息票期的时长视为中的第 i 个或最后一个、 准息票期的天数。</para>
          <para>NC = 付息期; 内的准息票期数如果此号码包含一小部分将为下一个整数引发此事件。</para>
          <para>NLi = 第 i 个或最后一个、 付息日不固定息票期内的准息票期的天在正常。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public bool Or (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Or([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Or(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Or (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16421)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Logical1，logical2，...-1 到 30 个条件要测试的可以是<b>true</b>或<b>false</b>。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回<b>true</b>如果任一参数为<b>true</b>;如果所有参数都都为<b>false</b>，则返回<b>false</b> 。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数必须能计算为逻辑值，如<b>true</b>或<b>false</b>，或包含逻辑值的数组或引用。 </para>
          <para>如果数组或引用参数中包含文本或空单元格，则这些值将被忽略。</para>
          <para>如果指定的区域中不包含任何逻辑值，<b>或</b>将返回 #VALUE ！。 错误值。 </para>
          <para>您可以使用<b>或</b>数组公式的值是否在数组中出现。 若要输入数组公式，请按 CTRL + SHIFT + ENTER。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回指定对象的父对象。只读。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PDuration">
      <MemberSignature Language="C#" Value="public double PDuration (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PDuration([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PDuration(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function PDuration (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double PDuration(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16954)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">各期利率。</param>
        <param name="Arg2">投资的当前值。</param>
        <param name="Arg3">所需的投资的未来值。</param>
        <summary>返回某项投资需要到达指定的值的期数。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pearson">
      <MemberSignature Language="C#" Value="public double Pearson (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pearson([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pearson (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pearson(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16696)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 - 一组自变量。</param>
        <param name="Arg2">Array2 - 一组因变量。</param>
        <summary>返回 Pearson（皮尔生）乘积矩相关系数 r，这是一个范围在 -1.0 到 1.0 之间（包括 -1.0 和 1.0 在内）的无量纲指数，反映了两个数据集合之间的线性相关程度。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数可以是数字，或者是包含数字的名称、数组常量或引用。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果 array1 和 array2 为空或其数据点的个数不同，<b>函数 Pearson</b>返回错误值 # n/A。 </para>
          <para>Pearson（皮尔生）乘积矩相关系数 r 的公式为：

 </para>
          <para>图 1: Pearson 积矩法相关系数</para>
          <para></para>
          <para></para>
          <para>其中 x 和 y 是样本平均值 AVERAGE(array1) 和 AVERAGE(array2)。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile">
      <MemberSignature Language="C#" Value="public double Percentile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16712)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">array - 定义相对位置的数组或数据区域。</param>
        <param name="Arg2">k - 0 到 1 之间的百分点值，包括 0 和 1。</param>
        <summary>返回区域中数值的第 k 个百分点的值。可以使用此函数来建立接受阈值。例如，可以确定得分排名在第 90 个百分点之上的检测侯选人。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" />方法。 </para>
          <para>如果 array 为空，<b>函数 Percentile</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 k 为非数值型，<b>函数 Percentile</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 k &lt; 0 或 k &gt; 1，<b>函数 Percentile</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 k 不是 1 的倍数 / (n-1)，<b>函数 Percentile</b>使用插值法来确定第 k 个百分点的值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Exc">
      <MemberSignature Language="C#" Value="public double Percentile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16885)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">array - 定义相对位置的数组或数据区域。</param>
        <param name="Arg2">K-0..1 独占范围中的百分点值。</param>
        <summary>返回区域中数值的第 k 个百分点的值，其中 k 的范围是从 0 到 1（不包括 0 和 1）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 array 为空，<b>则 percentile_exc 将</b>返回 #NUM ！。 错误值 </para>
          <para>如果 k 为非数值型，<b>则 percentile_exc 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 k ≤ 0 或 k ≥ 1，<b>则 percentile_exc 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 k 不是 1 的倍数 / (n-1)，<b>则 percentile_exc 将</b>使用插值法来确定第 k 个百分点的值。 </para>
          <para>当指定个百分点的值位于该数组中的两个值之间时，
            <b>则 percentile_exc 将</b>将插入。 如果它不能插入的百分点值，k 指定，Excel 将返回 #NUM ！ 错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Inc">
      <MemberSignature Language="C#" Value="public double Percentile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16886)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">array - 定义相对位置的数组或数据区域。</param>
        <param name="Arg2">k - 0 到 1 之间的百分点值，包括 0 和 1。</param>
        <summary>返回区域中数值的第 k 个百分点的值。可以使用此函数来建立接受阈值。例如，可以检测得分排名在第 90 个百分点之上的侯选人。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 array 为空，<b>则 percentile_inc 将</b>返回 #NUM ！。 错误值。 </para>
          <para>如果 k 为非数值型，<b>则 percentile_inc 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 k &lt; 0 或 k &gt; 1，<b>则 percentile_inc 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 k 不是 1 的倍数 / (n-1)，<b>则 percentile_inc 将</b>使用插值法来确定第 k 个百分点的值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank">
      <MemberSignature Language="C#" Value="public double PercentRank (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16713)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">array - 所含数值定义相对位置的数组或数据区域。</param>
        <param name="Arg2">x - 想知道其排位的值。</param>
        <param name="Arg3">Significance-可选值，该值标识的有效数字位数返回的百分比值。 如果省略，<b>函数 percentrank 将进行</b>使用三个数字 (0.xxx)。</param>
        <summary>返回值的排名数据集中的数据集的百分比。 此函数可用于评估数据集内的值相对位置。 例如，<b>函数 percentrank 将进行</b>可用于评估之间测试所有分数能力测试分数的位置。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" />方法。</para>
          <para>如果 array 为空，<b>函数 PercentRank</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 significance &lt; 1，<b>函数 PercentRank</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 x 不匹配数组中的值之一，<b>函数 percentrank 将进行</b>插值以返回正确的百分比排位。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Exc">
      <MemberSignature Language="C#" Value="public double PercentRank_Exc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Exc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Exc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16887)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">array - 所含数值定义相对位置的数组或数据区域。</param>
        <param name="Arg2">x - 想知道其排位的值。</param>
        <param name="Arg3">Significance-一个值，标识的有效数字位数返回的百分比值。 如果省略，则<b>PercentRank_Exc</b>将使用三个数字 (0.xxx)。</param>
        <summary>返回特定数值在一个数据集中的百分比（从 0 到 1，不包括 0 和 1）排位。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 array 为空，<b>则 percentrank_exc 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 significance &lt; 1，<b>则 percentrank_exc 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 x 不匹配数组中的值之一，则<b>PercentRank_Exc</b>将进行插值以返回正确的百分比排位。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Inc">
      <MemberSignature Language="C#" Value="public double PercentRank_Inc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Inc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Inc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16888)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">array - 所含数值定义相对位置的数组或数据区域。</param>
        <param name="Arg2">x - 想知道其排位的值。</param>
        <param name="Arg3">Significance-可选值，该值标识的有效数字位数返回的百分比值。 如果省略，则<b>PercentRank_Inc</b>将使用三个数字 (0.xxx)。</param>
        <summary>返回值的排名数据集中的数据集的百分比 (0..1，非独占)。 此函数可用于评估数据集内的值相对位置。 例如，可以使用<b>PercentRank_Inc</b>评估之间测试所有分数能力测试分数的位置。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 array 为空，<b>则 percentrank_inc 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 significance &lt; 1，<b>则 percentrank_inc 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 x 不匹配数组中的值之一，则<b>PercentRank_Inc</b>将进行插值以返回正确的百分比排位。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Permut">
      <MemberSignature Language="C#" Value="public double Permut (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permut([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permut(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permut (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permut(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16683)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 表示对象个数的整数。</param>
        <param name="Arg2">Number_chosen - 表示每个排列中对象个数的整数。</param>
        <summary>返回从给定数目的对象集合中选取的若干对象的排列数。排列为有内部顺序的对象或事件的任意集合或子集。排列与组合不同，组合的内部顺序无意义。此函数可用于彩票抽奖的概率计算。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>两个参数将被截尾取整。</para>
          <para>如果 number 或 number_chosen 为非数值型，<b>函数 Permut</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果号码 ≤ 0 或 number_chosen &lt; 0，<b>函数 Permut</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 number &lt; number_chosen，<b>函数 Permut</b>返回 #NUM ！ 错误值。 </para>
          <para>排列数的计算公式如下：

 </para>
          <para>图 1： 排列数等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Permutationa">
      <MemberSignature Language="C#" Value="public double Permutationa (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permutationa([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permutationa(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permutationa (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permutationa(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16951)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">对象的总数。</param>
        <param name="Arg2">每个排列中对象的数目。</param>
        <summary>返回给定数量 （用重复） 可从总对象中选择的对象的排列数。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phi">
      <MemberSignature Language="C#" Value="public double Phi (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Phi([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phi(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phi (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Phi(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16962)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">要为其标准正态分布密度的号码。</param>
        <summary>返回标准正态分布密度函数的值。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetic">
      <MemberSignature Language="C#" Value="public string Phonetic (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Phonetic([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phonetic(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phonetic (Arg1 As Range) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Phonetic(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16744)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Reference - 文本字符串或对单个单元格或包含 furigana 文本字符串的单元格区域的引用。</param>
        <summary>提取文本字符串中的拼音 (furigana) 字符。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 reference 为单元格区域，则返回区域左上角单元格中的 furigana 文本字符串。 </para>
          <para>如果 reference 为不相邻单元格的区域，将返回错误值 #N/A。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pi">
      <MemberSignature Language="C#" Value="public double Pi ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pi() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pi" />
      <MemberSignature Language="VB.NET" Value="Public Function Pi () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pi();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16403)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回数字 3.14159265358979，即数学常量 pi，精确到 15 位数字。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public double Pmt (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pmt(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16443)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate - 贷款的利率。</param>
        <param name="Arg2">Nper - 该项贷款的付款总次数。</param>
        <param name="Arg3">Pv - 现值，或一系列未来付款的当前值的累积和，也称为本金。</param>
        <param name="Arg4">Fv - 未来值，或在最后一次付款后希望得到的现金余额。如果省略 fv，则假定其值为 0（零），即一笔贷款的未来值为 0。</param>
        <param name="Arg5">Type - 数字 0（零）或 1，用以指定各期的付款时间是在期初还是期末。</param>
        <summary>基于固定利率及等额分期付款方式，计算贷款的每期付款额。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Pmt</b>中参数的详细说明，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />函数。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>期末</description>
            </item>
            <item>
              <term>1</term>
              <description>期初</description>
            </item>
          </list>
          <para>
            <b>Pmt</b>返回的支付款项包括本金和利息，但没有税款、 保留支付或费用某些与贷款。 </para>
          <para>应确保所指定的 rate 和 nper 单位的一致性。例如，同样是四年期年利率为 12% 的贷款，如果按月支付，rate 应为 12%/12，nper 应为 4*12；如果按年支付，rate 应为 12%，nper 为 4。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson">
      <MemberSignature Language="C#" Value="public double Poisson (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16684)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 事件数。</param>
        <param name="Arg2">mean - 期望的数值。</param>
        <param name="Arg3">cumulative - 一个决定所返回的概率分布形式的逻辑值。如果 cumulative 为 TRUE，则函数 POISSON 返回泊松累积分布概率，即，随机事件发生的次数在零到 x 之间（包括零和 x）；如果为 FALSE，则返回泊松概率密度函数，即，随机事件发生的次数正好为 x。</param>
        <summary>返回泊松分布。泊松分布通常用于预测一段时间内事件发生的次数，例如一分钟内通过收费站的轿车的数量。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" />方法。</para>
          <para>如果 x 不是整数，则将被截尾取整。</para>
          <para>如果 x 或 mean 为非数值型，<b>则 Poisson</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 x &lt; 0，<b>则 Poisson</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 mean ≤ 0，<b>则 Poisson</b>返回 #NUM ！ 错误值。 </para>
          <para>
            <b>泊松</b>的计算公式如下。 </para>
          <para>有关累积 = <b>false</b>:</para>
          <para>图 1： 当当累积为 false</para>
          <para></para>
          <para></para>
          <para>有关累积 = <b>true</b>:</para>
          <para>图 2： 当当累积为 true</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson_Dist">
      <MemberSignature Language="C#" Value="public double Poisson_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16889)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 事件数。</param>
        <param name="Arg2">mean - 期望的数值。</param>
        <param name="Arg3">Cumulative-一个逻辑值，确定返回概率分布的窗体。 如果累积为<b>true</b>，<b>则 poisson_dist 将</b>返回随机发生的事件数为 0 （零） 和 x 非独占; 之间的累积泊松概率如果<b>false</b>，则将返回泊松概率密度函数的发生的事件数将完全 x。</param>
        <summary>返回泊松分布。泊松分布通常用于预测特定的一段时间内事件发生的次数，例如一分钟内通过收费站的轿车的数量。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 x 不是整数，则将被截尾取整。</para>
          <para>如果 x 或 mean 为非数值型，<b>则 poisson_dist 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 x &lt; 0，<b>则 poisson_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 mean ≤ 0，<b>则 poisson_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>
            <b>则 poisson_dist 将</b>计算，如下所示。 </para>
          <para>有关累积 = <b>false</b>:</para>
          <para>图 1： 当当累积为 false</para>
          <para></para>
          <para></para>
          <para>有关累积 = <b>true</b>:</para>
          <para>图 2： 当当累积为 true</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public double Power (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Power([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Power(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Power (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Power(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16721)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 底数，可以为任意实数。</param>
        <param name="Arg2">Power - 指数，底数按该指数次幂乘方。</param>
        <summary>返回某数的乘幂结果。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ppmt">
      <MemberSignature Language="C#" Value="public double Ppmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ppmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ppmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ppmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16552)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate - 各期利率。</param>
        <param name="Arg2">Per - 用于计算其本金数额的期数，必须介于 1 到 nper 之间。</param>
        <param name="Arg3">Nper - 年金中的总付款期数。</param>
        <param name="Arg4">Pv - 现值 — 即一系列未来付款当前所值的总额。</param>
        <param name="Arg5">Fv - 未来值，或在最后一次付款后希望得到的现金余额。如果省略 fv，则假定其值为 0（零），即一笔贷款的未来值为 0。</param>
        <param name="Arg6">Type - 数字 0 或 1，用以指示付款时间。</param>
        <summary>基于固定利率及等额分期付款方式，返回投资在某一给定期间内的本金偿还额。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Ppmt</b>中参数的详细说明，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>期末</description>
            </item>
            <item>
              <term>1</term>
              <description>期初</description>
            </item>
          </list>
          <para>应确保所指定的 rate 和 nper 单位的一致性。例如，同样是四年期年利率为 12% 的贷款，如果按月支付，rate 应为 12%/12，nper 应为 4*12；如果按年支付，rate 应为 12%，nper 为 4。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Price">
      <MemberSignature Language="C#" Value="public double Price (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Price([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Price(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Price (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16825)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">Rate - 债券的年息票利率。</param>
        <param name="Arg4">Yld - 债券的年收益。</param>
        <param name="Arg5">Redemption - 面值 ￥100 的债券的赎回值。</param>
        <param name="Arg6">Frequency - 每年支付息票的次数。如果按年支付，frequency = 1；如果按半年期支付，frequency = 2；如果按季支付，frequency = 4。</param>
        <param name="Arg7">Basis - 要使用的日计数基准类型。</param>
        <summary>返回定期付息的面值 ￥100 的债券价格。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>结算日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，结算日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>Settlement、maturity、frequency 和 basis 将被截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，<b>函数 Price</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 yld &lt; 0 或者，如果速率&lt;0，<b>函数 Price</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 redemption ≤ 0，<b>函数 Price</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 frequency 不为数字 1、 2 或 4，<b>函数 Price</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>函数 Price</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 settlement ≥ maturity，<b>函数 Price</b>返回 #NUM ！ 错误值。 <b>函数 Price</b>的计算公式如下： </para>
          <para>图 1： 的 Price 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>DSC = 成交天至下一个息票的次数。</para>
          <para>E = 结算日属于顺序的息票期的天数。</para>
          <para>N = 结算日和 redemption 日期之间的付息数。</para>
          <para>A = 的从息票期开始到结算日的天数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceDisc">
      <MemberSignature Language="C#" Value="public double PriceDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16820)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">Discount - 债券的贴现率。</param>
        <param name="Arg4">Redemption - 面值 ￥100 的债券的赎回值。</param>
        <param name="Arg5">Basis - 要使用的日计数基准类型。</param>
        <summary>返回折价发行的面值 ￥100 的债券的价格。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>结算日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，结算日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>Settlement、maturity 和 basis 将被截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，<b>函数 PriceDisc</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 discount ≤ 0 或 redemption ≤ 0，<b>函数 PriceDisc</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>函数 PriceDisc</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 settlement ≥ maturity，<b>函数 PriceDisc</b>返回 #NUM ！ 错误值。 </para>
          <para>
            <b>函数 PriceDisc</b>的计算公式如下： </para>
          <para>图 1： 的 PriceDisc 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>B = 一年，具体取决于年基准中的天数。</para>
          <para>DSM = 的从结算日与到期日的天数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceMat">
      <MemberSignature Language="C#" Value="public double PriceMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16815)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">Issue - 债券的发行日，以日期序列号表示。</param>
        <param name="Arg4">Rate - 债券在发行日的利率。</param>
        <param name="Arg5">Yld - 债券的年收益。</param>
        <param name="Arg6">Basis - 要使用的日计数基准类型。</param>
        <summary>返回到期付息的面值 ￥100 的债券的价格。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>结算日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，结算日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>Settlement、maturity、issue 和 basis 将被截尾取整。</para>
          <para>如果 settlement、 maturity 或 issue 不是有效日期，<b>函数 PriceMat</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果速率&lt;0 或者，如果 yld &lt; 0，<b>函数 PriceMat</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>函数 PriceMat</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 settlement ≥ maturity，<b>函数 PriceMat</b>返回 #NUM ！ 错误值。 <b>函数 PriceMat</b>的计算公式如下： </para>
          <para>图 1： 的 PriceMat 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>B = 一年，具体取决于年基准中的天数。</para>
          <para>DSM = 的从结算日与到期日的天数。</para>
          <para>DIM = 的日与到期日之中的天数。</para>
          <para>A = 的到结算之中的天数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prob">
      <MemberSignature Language="C#" Value="public double Prob (object Arg1, object Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Prob([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Prob(System.Object,System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prob (Arg1 As Object, Arg2 As Object, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16701)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X_range - 具有各自相应概率值的 x 数值区域。</param>
        <param name="Arg2">Prob_range - 与 x_range 中的值相对应的一组概率值。</param>
        <param name="Arg3">Lower_limit - 用于计算概率的数值下界。</param>
        <param name="Arg4">Upper_limit - 用于计算概率的可选数值上界。</param>
        <summary>返回区域中的数值落在指定区间内的概率。如果没有给出上限 (upper_limit)，则返回区间 x_range 内的值等于下限 lower_limit 的概率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 prob_range ≤ 0 中的任意值，或者如果 prob_range 中的任意值&gt;1，<b>函数 Prob</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 prob_range ¹ 1，<b>函数 Prob</b>中所有值的总和返回 #NUM ！ 错误值。 </para>
          <para>如果省略 upper_limit，<b>函数 Prob</b>返回值等于 lower_limit 时的概率。 </para>
          <para>如果 x_range 和 prob_range 中包含的数据点个数不同，<b>函数 Prob</b>返回错误值 # n/A。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Product">
      <MemberSignature Language="C#" Value="public double Product (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Product([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Product(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Product (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16567)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 要相乘的 1 到 30 个数字。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>将所有以参数形式给出的数字相乘，并返回乘积值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果参数为数字、逻辑值或数字的文本表达式，则这些参数将计算在内；如果参数为错误值或无法转换为数字的文本，则将产生错误。 </para>
          <para>如果参数为数组或引用，只有其中的数字将被计算。数组或引用中的空白单元格、逻辑值、文本或错误值将被忽略。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Proper">
      <MemberSignature Language="C#" Value="public string Proper (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Proper([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Proper(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Proper (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Proper(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16498)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text - 用引号括起来的文本、返回文本的公式或是对包含要进行部分大写转换的文本的单元格引用。</param>
        <summary>将文本字符串的首字母及任何非字母字符之后的首字母转换成大写。将其余的字母转换成小写。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pv">
      <MemberSignature Language="C#" Value="public double Pv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16440)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate - 各期利率。例如，如果按 10% 的年利率借入一笔贷款来购买汽车，并按月偿还贷款，则月利率为 10%/12（即 0.83%）。可以在公式中输入 10%/12、0.83% 或 0.0083 作为 rate 的值。</param>
        <param name="Arg2">Nper - 年金中的总付款期数。例如，对于一笔四年期按月偿还的汽车贷款，共有 4*12（即 48）个偿款期数。可以在公式中输入 48 作为 nper 的值。</param>
        <param name="Arg3">Pmt - 各期所应支付的金额，其数值在整个年金期间保持不变。通常 pmt 包括本金和利息，但不包括其他费用或税款。例如，￥10,000 的年利率为 12% 的四年期汽车贷款的月偿还额为 ￥263.33。可以在公式中输入 -263.33 作为 pmt 的值。如果省略 pmt，则必须包含 fv 参数。</param>
        <param name="Arg4">Fv - 未来值，或在最后一次付款后希望得到的现金余额。如果省略 fv，则假定其值为 0（例如，一笔贷款的未来值为 0）。例如，如果希望通过存款在 18 年后为某一特殊项目支付 ￥50,000，则 ￥50,000 就是未来值。可以根据保守估计的利率来决定每月的存款额。如果省略 fv，则必须包含 pmt 参数。</param>
        <param name="Arg5">Type - 数字 0 或 1，用以指示付款时间。</param>
        <summary>返回投资的现值。现值为一系列未来付款的当前值的累积和。例如，借入方的借入款即为贷出方贷款的现值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>期末</description>
            </item>
            <item>
              <term>1</term>
              <description>期初</description>
            </item>
          </list>
          <para>应确保所指定的 rate 和 nper 单位的一致性。例如，同样是四年期年利率为 12% 的贷款，如果按月支付，rate 应为 12%/12，nper 应为 4*12；如果按年支付，rate 应为 12%，nper 为 4。 </para>
          <para>以下功能应用于年金： </para>
          <list type="table">
            <item>
              <term>CUMIPMT</term>
              <description>PPMT</description>
            </item>
            <item>
              <term>CUMPRINC</term>
              <description>PV</description>
            </item>
            <item>
              <term>FV</term>
              <description>RATE</description>
            </item>
            <item>
              <term>FVSCHEDULE</term>
              <description>XIRR</description>
            </item>
            <item>
              <term>IPMT</term>
              <description>XNPV</description>
            </item>
            <item>
              <term>PMT</term>
              <description />
            </item>
          </list>
          <para>年金是一系列连续时间所做的固定的现金付款。 例如，一笔贷款在汽车或按揭贷款是年金。 有关详细信息，请参阅每个年金函数的说明。 </para>
          <para>在年金函数中，支出的款项，如银行存款，表示为负数；收入的款项，如股息收入，表示为正数。例如，对于储户来说，$1000 银行存款可表示为参数 -1,000，而对于银行来说该参数为 1,000。 </para>
          <para>下面列出的是 Microsoft Excel 进行财务运算的公式，如果 rate 不为 0，则：

 </para>
          <para>图 1： 公式当利率不 0</para>
          <para></para>
          <para></para>
          <para>如果 rate 为 0，然后：</para>
          <para>(pmt * nper) + pv + fv = 0</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile">
      <MemberSignature Language="C#" Value="public double Quartile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16711)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">array - 要计算其四分位数值的数值数组或单元格区域。</param>
        <param name="Arg2">Quart - 指示要返回哪一个值。</param>
        <summary>返回一个数据集的四分位数。 四分位数通常用于销售和调查数据总体进行分组。 例如，您可以使用<b>四分位数</b>总体中查找的收入前的 25%。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" />方法。</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>最小值</description>
            </item>
            <item>
              <term>1</term>
              <description>第一个四分位数（第 25 个百分点值）</description>
            </item>
            <item>
              <term>2</term>
              <description>中值（第 50 个百分点值）</description>
            </item>
            <item>
              <term>3</term>
              <description>第三个四分位数（第 75 个百分点值）</description>
            </item>
            <item>
              <term>4</term>
              <description>最大值</description>
            </item>
          </list>
          <para>如果 array 为空，<b>则 Quartile</b>将返回 #NUM ！ 错误值。 </para>
          <para>如果 quart 不为整数，则将被截尾取整。</para>
          <para>如果 quart &lt; 0 或 quart &gt; 4，<b>则 Quartile</b>将返回 #NUM ！ 错误值。 </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />，和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />当 quart 分别等于 0 （零）、 2 和 4 时，返回与<b>Quartile</b>相同的值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Exc">
      <MemberSignature Language="C#" Value="public double Quartile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16890)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array-要计算其四分位数值的数值数组或单元格区域。</param>
        <param name="Arg2">quart - 要返回的值。</param>
        <summary>基于百分点值（从 0 到 1，不包括 0 和 1）返回数据集的四分位数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 array 为空，<b>则 quartile_exc 将</b>返回 #NUM ！。 错误值。 </para>
          <para>如果 quart 不为整数，则将被截尾取整。</para>
          <para>如果 quart ≤ 0 或 quart ≥ 4，<b>则 quartile_exc 将</b>返回 #NUM ！ 错误值。 </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />，和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />当 quart 分别等于 0 （零）、 2 和 4 时，返回与<b>Quartile_Exc</b>相同的值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Inc">
      <MemberSignature Language="C#" Value="public double Quartile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16891)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">array - 要计算其四分位数值的数值数组或单元格区域。</param>
        <param name="Arg2">quart - 要返回的值。</param>
        <summary>基于百分点值（从 0 到 1，包括 0 和 1）返回数据集的四分位数。四分位数通常用于在销售额和调查数据中对总体进行分组。例如，可以使用 QUARTILE_INC 求得总体中前 25% 的收入值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 array 为空，<b>则 quartile_inc 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 quart 不为整数，则将被截尾取整。</para>
          <para>如果 quart &lt; 0 或 quart &gt; 4，<b>则 quartile_inc 将</b>返回 #NUM ！ 错误值。 </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />，和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />当 quart 分别等于 0 （零）、 2 和 4 时，返回与<b>Quartile_Inc</b>相同的值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Quotient">
      <MemberSignature Language="C#" Value="public double Quotient (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quotient([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quotient(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quotient (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quotient(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16801)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Numerator - 被除数。</param>
        <param name="Arg2">Denominator - 除数。</param>
        <summary>返回商的整数部分，该函数可用于舍掉商的小数部分。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 Quotient</b>将返回 #VALUE ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Radians">
      <MemberSignature Language="C#" Value="public double Radians (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Radians([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Radians(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Radians (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Radians(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16726)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Angle - 以度表示的要转换的角度。</param>
        <summary>将度转换为弧度。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandBetween">
      <MemberSignature Language="C#" Value="public double RandBetween (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RandBetween([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RandBetween(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RandBetween (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RandBetween(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16848)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bottom - RANDBETWEEN 将返回的最小整数。</param>
        <param name="Arg2">Top - RANDBETWEEN 将返回的最大整数。</param>
        <summary>返回介于指定的两个数字之间的一个随机整数。每次计算工作表时都将返回一个新的随机整数。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public double Rank (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16600)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">number - 要查找其排位的数字。</param>
        <param name="Arg2">ref - 数字列表数组或对数字列表的引用。ref 中的非数值型值将被忽略。</param>
        <param name="Arg3">Order - 指定数字的排位方式的数字。</param>
        <summary>返回一个数字在数字列表中的排位。数字的排位是其大小与列表中其他值的比值（如果列表已排过序，则数字的排位就是它当前的位置）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />方法。</para>
          <para>如果 order 为 0（零）或被省略，Microsoft Excel 会按照 ref 为按降序排序的列表对数字排位。</para>
          <para>如果 order 不为零，Microsoft Excel 会按照 ref 为按升序排序的列表对数字排位。</para>
          <para>
            <b>排名</b>提供重复号码相同的等级。 但是，重复的序号状态会影响后续数字的积分。 例如，包含整数的列表中以升序排序，如果数字 10 出现两次，并且有 5，排名，则 11 7 (无号码 6 排名) 的排名。</para>
          <para>某些情况下一个可能想要使用考虑重复的排名的定义。 在上面的示例中，用户可能要 5.5 修订的排名 10 的号码。 这可以通过下列修正因素向<b>排名</b>返回的值。 此修正因素适合和 / 其中按降序顺序计算排位的情况 (顺序 = 0 或省略) 或升序 (顺序 = 非零值)。</para>
          <para>绑定的 ranks=[COUNT(ref) + 1 – 排名 （号码、 ref，0） – 排名 （号码、 ref，1） 修正因素] / 2。</para>
          <para>在以下示例中，RANK(A2,A1:A5,1) 等于 3。 修正因素是 （5 + 1-2-3） / 2 = 0.5 考虑重复的修订的排名是 3 + 0.5 = 3.5。 如果号码只发生一次 ref 中，修正因素将 0，因为<b>排名</b>不需要调整为重复。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Avg">
      <MemberSignature Language="C#" Value="public double Rank_Avg (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Avg([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Avg (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16892)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">number - 要查找其排位的数字。</param>
        <param name="Arg2">ref - 数字列表数组或对数字列表的引用。引用中的非数值型值将被忽略。</param>
        <param name="Arg3">Order-指定数字的排位方式的数字。 如果 order 为 0（零）或被省略，Microsoft Excel 会按照引用为按降序排序的列表对数字排位。 如果 order 为任何非零值，Microsoft Excel 会按照排位号码像引用是按升序排序的列表。</param>
        <summary>返回一个数字在数字列表中的排位；即该数字与列表中其他值的相对大小。如果有多个值的排位相同，则将返回平均排位。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Eq">
      <MemberSignature Language="C#" Value="public double Rank_Eq (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Eq([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Eq (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16893)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">number - 要查找其排位的数字。</param>
        <param name="Arg2">ref - 数字列表数组或对数字列表的引用。引用中的非数值型值将被忽略。</param>
        <param name="Arg3">order - 一个指定数字的排位方式的数字。</param>
        <summary>返回一个数字在数字列表中的排位。数字的排位是其大小与列表中其他值的比值（如果列表已排过序，则数字的排位就是它当前的位置）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 order 为 0（零）或被省略，Microsoft Excel 会按照引用为按降序排序的列表对数字排位。</para>
          <para>如果 order 的值不是零，Microsoft Excel 会按照引用为按升序排序的列表对数字排位。</para>
          <para>
            <b>Rank_Eq</b>提供重复号码相同的等级。 但是，重复的序号状态会影响后续数字的积分。 例如，包含整数的列表中以升序排序，如果数字 10 出现两次，并且有 5，排名，则 11 7 (无号码 6 排名) 的排名。</para>
          <para>为了一些您可能需要使用考虑重复的排名的定义。 在上面的示例中，您可能希望 5.5 修订的排名 10 的号码。 为此，请将下列修正因素添加<b>Rank_Eq</b>返回的值。 此修正因素适合和 / 其中按降序顺序计算排位的情况 (顺序 = 0 或省略) 或升序 (顺序 = 非零值)。</para>
          <para>绑定的 ranks=[COUNT(ref) + 1 – RANK_EQ （号码、 ref，0） – RANK_EQ 修正因素 （数字、 ref，1)]/2.In 下面的示例，RANK_EQ(A2,A1:A5,1) 等于 3。 修正因素是 （5 + 1-2-3） / 2 = 0.5 考虑重复的修订的排名是 3 + 0.5 = 3.5。 如果号码只发生一次 ref 中，修正因素将 0，因为<b>Rank_Eq</b>不需要调整为重复。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public double Rate (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rate([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rate(System.Double,System.Double,System.Double,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16444)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nper - 年金中的总付款期数。</param>
        <param name="Arg2">Pmt - 各期付款额，其数值在年金的整个时间期限内保持不变。通常 pmt 包括本金和利息，但不包括其他费用或税金。如果省略 pmt，则必须包含 fv 参数。</param>
        <param name="Arg3">Pv - 现值 — 即一系列未来付款当前所值的总额。</param>
        <param name="Arg4">Fv - 未来值，或在最后一次付款后希望得到的现金余额。如果省略 fv，则假定其值为 0（例如，一笔贷款的未来值为 0）。</param>
        <param name="Arg5">Type - 数字 0 或 1，用以指示付款时间。</param>
        <param name="Arg6">Guess-猜测将哪些速率。</param>
        <summary>返回年金的各期利率。函数 RATE 通过迭代法计算得出，并且可能无解或有多个解。如果在进行 20 次迭代计算后，函数 RATE 的相邻两次结果没有收敛于 0.0000001，则函数 RATE 将返回错误值 #NUM!。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>有关参数 nper、 pmt、 pv、 fv 和类型，请参阅的完整说明<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>期末</description>
            </item>
            <item>
              <term>1</term>
              <description>期初</description>
            </item>
          </list>
          <para>如果省略 guess，则假定其值为 10%。</para>
          <para>如果未收敛<b>速率</b>，尝试不同的 guess 值。 <b>速率</b>通常汇聚 guess 是否介于 0 到 1 之间。</para>
          <para>应确保所指定的 guess 和 nper 单位的一致性。例如，同样是四年期年利率为 12% 的贷款，如果按月支付，guess 应为 12%/12，nper 应为 4*12；如果按年支付，guess 应为 12%，nper 应为 4。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Received">
      <MemberSignature Language="C#" Value="public double Received (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Received([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Received(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Received (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16818)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">Investment - 债券的投资额。</param>
        <param name="Arg4">Discount - 债券的贴现率。</param>
        <param name="Arg5">Basis - 要使用的日计数基准类型。</param>
        <summary>返回完全投资型债券到期收回的金额。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>结算日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，结算日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>Settlement、maturity 和 basis 将被截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，则<b>Received</b>将返回 #VALUE ！ 错误值。 </para>
          <para>如果 investment ≤ 0 或 discount ≤ 0， <b>Received</b>如果返回 #NUM ！ 错误值。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，则<b>Received</b>将返回 #NUM ！ 错误值。 </para>
          <para>如果 settlement ≥ maturity，则 Received 将返回 #NUM ！ 错误值。 <b>Received</b>的计算公式如下： </para>
          <para>图 1: Received 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>B = 一年，具体取决于年基准中的天数。</para>
          <para>DIM = 的日与到期日之中的天数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Replace([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16503)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">要替换其中某些字符的文本。</param>
        <param name="Arg2">中的字符的位置<paramref name="Arg1" />您想要替换<paramref name="Arg4" />。</param>
        <param name="Arg3">中的字符数<paramref name="Arg1" />所需的<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />方法替换为<paramref name="Arg4" />。</param>
        <param name="Arg4">将替换中的字符的文本<paramref name="Arg1" />。</param>
        <summary>根据指定的字符数，使用其他文本字符串替换某文本字符串的一部分。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceB">
      <MemberSignature Language="C#" Value="public string ReplaceB (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReplaceB([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceB (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReplaceB(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16591)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Old_text - 要替换其中部分字符的文本。</param>
        <param name="Arg2">Start_num - 要用 new_text 替换的 old_text 中字符的位置。</param>
        <param name="Arg3">Num_chars -（要让 REPLACE 用 new_text 替换的）old_text 中的字符的个数。</param>
        <param name="Arg4">New_text - 用于替换 old_text 中的字符的文本。</param>
        <summary>REPLACEB 根据指定的字节数用一个文本字符串替换另一个文本字符串中的部分字符。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>：<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />用于用于使用单字节字符的语言设置 (SBC)，而<b>ReplaceB</b>旨在用于使用双字节字符集 (DBCS) 的语言。 您的计算机上的默认语言设置影响采用以下方式的返回值：</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />无论是单字节还是双字节，作为 1，无论默认语言设置，始终将每个字符，计数。 </para>
          <para>已启用的编辑支持 DBCS 的语言，然后将其设置为默认语言时， 
            <b>ReplaceB</b>作为 2 计算每个双字节字符。 否则， <b>ReplaceB</b>作为 1 计算每个字符。 </para>
          <para>支持 DBCS 的语言包括日语、中文（简体）、中文（繁体）和朝鲜语。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rept">
      <MemberSignature Language="C#" Value="public string Rept (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Rept([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rept(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rept (Arg1 As String, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Rept(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16414)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text - 要重复的文本。</param>
        <param name="Arg2">Number_times - 指定文本重复次数的一个正数。</param>
        <summary>按照给定的次数重复显示文本。可以通过函数 REPT 来不断地重复显示某一文本字符串，对单元格进行填充。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number_times 为 0 （零），<b>则 rept 将</b>返回""（空文本）。 </para>
          <para>
				如果 number_times 不是整数，则将被截尾取整。
</para>
          <para>
            <b>Rept</b>函数的结果不能大于 32,767 个字符，否则<b>rept 将</b>返回 #VALUE ！。 </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Roman">
      <MemberSignature Language="C#" Value="public string Roman (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Roman([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Roman(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Roman (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16738)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要转换的阿拉伯数字。</param>
        <param name="Arg2">Form - 一个数字，指定所需的罗马数字类型。罗马数字的样式范围可以从古典型到简化，随着 form 值的增加将趋于更简明。</param>
        <summary>将阿拉伯数字转换为文本形式的罗马数字。</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>古典型。</description>
            </item>
            <item>
              <term>1</term>
              <description>更简洁。</description>
            </item>
            <item>
              <term>2</term>
              <description>更简洁。</description>
            </item>
            <item>
              <term>3</term>
              <description>更简洁。</description>
            </item>
            <item>
              <term>4</term>
              <description>简化型。</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>古典型。</description>
            </item>
            <item>
              <term>
                <b>false</b>
              </term>
              <description>简化型。</description>
            </item>
          </list>
          <para>如果 number 为负数，则将返回错误值 #VALUE!。</para>
          <para>如果 number 大于 3999，则将返回错误值 #VALUE!。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public double Round (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Round([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Round (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Round(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16411)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要进行舍入的数字。</param>
        <param name="Arg2">Num_digits - 指定要将数字舍入到的位数。</param>
        <summary>将数字舍入到指定位数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 num_digits 大于 0（零），则会将 number 舍入到指定的小数位数。 </para>
          <para>如果 num_digits 为 0，则会将 number 舍入到最接近的整数。 </para>
          <para>如果 num_digits 小于 0，则会将 number 舍入到小数点左侧。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtDown">
      <MemberSignature Language="C#" Value="public double RoundBahtDown (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtDown([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtDown(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtDown (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtDown(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16760)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>仅供内部使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtUp">
      <MemberSignature Language="C#" Value="public double RoundBahtUp (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtUp([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtUp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtUp (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtUp(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16761)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>仅供内部使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundDown">
      <MemberSignature Language="C#" Value="public double RoundDown (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundDown([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundDown(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundDown (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundDown(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16597)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要向下舍入的任何实数。</param>
        <param name="Arg2">Num_digits - 要将数字舍入到的位数。</param>
        <summary>将数字向零的方向向下舍入。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>RoundDown</b>与相似之处<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />，但它始终数字向下舍入。 </para>
          <para>如果 num_digits 大于 0（零），则将 number 向下舍入到指定的小数位数。</para>
          <para>如果 num_digits 为 0，则将 number 向下舍入到最接近的整数。</para>
          <para>如果 num_digits 小于 0，则将 number 向下舍入到小数点左侧。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundUp">
      <MemberSignature Language="C#" Value="public double RoundUp (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundUp([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundUp(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundUp (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundUp(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16596)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 要向上舍入的任何实数。</param>
        <param name="Arg2">Num_digits - 要将数字舍入到的位数。</param>
        <summary>将数字向远离 0（零）的方向向上舍入。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>RoundUp</b>与相似之处<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />，但它总是向上舍入。 </para>
          <para>
				如果 num_digits 大于 0（零），则将 number 向上舍入到指定的小数位数。
</para>
          <para>
				如果 num_digits 为 0，则将 number 向上舍入到最接近的整数。
</para>
          <para>
				如果 num_digits 小于 0，则将 number 向上舍入到小数点左侧。
</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rri">
      <MemberSignature Language="C#" Value="public double Rri (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rri([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rri(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rri (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Rri(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16963)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">投资的期数。</param>
        <param name="Arg2">投资的当前值。</param>
        <param name="Arg3">投资的未来值。</param>
        <summary>返回某项投资的增长等效利率。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RSq">
      <MemberSignature Language="C#" Value="public double RSq (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RSq([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RSq(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSq (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RSq(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16697)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y's - 数据点数组或区域。</param>
        <param name="Arg2">Known_x's - 数据点数组或区域。</param>
        <summary>返回 Pearson 通过数据点的乘积矩相关系数的平方中 known_y's 和 known_x's。 有关详细信息，请参阅 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />。 R 平方值可以被解释为 y 为 x 的方差属性中的方差的比例。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入参数列表的逻辑值和数字的文本表示也包括在内。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>如果 known_y's 和 known_x's 为空或其数据点的个数不同，则<b>RSq</b>将返回错误值 # n/A。 </para>
          <para>如果 known_y's 和 known_x's 包含仅 1 个数据点，<b>则 rsq 将</b>返回 #DIV/0 ！ 错误值。 </para>
          <para>Pearson 积矩法相关系数 r 的计算公式为：

 </para>
          <para>图 1: Pearson 积矩法相关系数</para>
          <para></para>
          <para></para>
          <para>其中 x 和 y 是样本平均值 AVERAGE(known_x's) 和 AVERAGE(known_y's)。</para>
          <para>
            <b>RSq</b>返回 r2，即此相关系数的平方。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RTD">
      <MemberSignature Language="C#" Value="public object RTD (object progID, object server, object topic1, object topic2, object topic3, object topic4, object topic5, object topic6, object topic7, object topic8, object topic9, object topic10, object topic11, object topic12, object topic13, object topic14, object topic15, object topic16, object topic17, object topic18, object topic19, object topic20, object topic21, object topic22, object topic23, object topic24, object topic25, object topic26, object topic27, object topic28);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RTD([in]object progID, [in]object server, [in]object topic1, [in]object topic2, [in]object topic3, [in]object topic4, [in]object topic5, [in]object topic6, [in]object topic7, [in]object topic8, [in]object topic9, [in]object topic10, [in]object topic11, [in]object topic12, [in]object topic13, [in]object topic14, [in]object topic15, [in]object topic16, [in]object topic17, [in]object topic18, [in]object topic19, [in]object topic20, [in]object topic21, [in]object topic22, [in]object topic23, [in]object topic24, [in]object topic25, [in]object topic26, [in]object topic27, [in]object topic28) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RTD(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTD (progID As Object, server As Object, topic1 As Object, Optional topic2 As Object, Optional topic3 As Object, Optional topic4 As Object, Optional topic5 As Object, Optional topic6 As Object, Optional topic7 As Object, Optional topic8 As Object, Optional topic9 As Object, Optional topic10 As Object, Optional topic11 As Object, Optional topic12 As Object, Optional topic13 As Object, Optional topic14 As Object, Optional topic15 As Object, Optional topic16 As Object, Optional topic17 As Object, Optional topic18 As Object, Optional topic19 As Object, Optional topic20 As Object, Optional topic21 As Object, Optional topic22 As Object, Optional topic23 As Object, Optional topic24 As Object, Optional topic25 As Object, Optional topic26 As Object, Optional topic27 As Object, Optional topic28 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16763)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.Object" />
        <Parameter Name="server" Type="System.Object" />
        <Parameter Name="topic1" Type="System.Object" />
        <Parameter Name="topic2" Type="System.Object" />
        <Parameter Name="topic3" Type="System.Object" />
        <Parameter Name="topic4" Type="System.Object" />
        <Parameter Name="topic5" Type="System.Object" />
        <Parameter Name="topic6" Type="System.Object" />
        <Parameter Name="topic7" Type="System.Object" />
        <Parameter Name="topic8" Type="System.Object" />
        <Parameter Name="topic9" Type="System.Object" />
        <Parameter Name="topic10" Type="System.Object" />
        <Parameter Name="topic11" Type="System.Object" />
        <Parameter Name="topic12" Type="System.Object" />
        <Parameter Name="topic13" Type="System.Object" />
        <Parameter Name="topic14" Type="System.Object" />
        <Parameter Name="topic15" Type="System.Object" />
        <Parameter Name="topic16" Type="System.Object" />
        <Parameter Name="topic17" Type="System.Object" />
        <Parameter Name="topic18" Type="System.Object" />
        <Parameter Name="topic19" Type="System.Object" />
        <Parameter Name="topic20" Type="System.Object" />
        <Parameter Name="topic21" Type="System.Object" />
        <Parameter Name="topic22" Type="System.Object" />
        <Parameter Name="topic23" Type="System.Object" />
        <Parameter Name="topic24" Type="System.Object" />
        <Parameter Name="topic25" Type="System.Object" />
        <Parameter Name="topic26" Type="System.Object" />
        <Parameter Name="topic27" Type="System.Object" />
        <Parameter Name="topic28" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="progID">表示实时服务器程序标识符的字符串。</param>
        <param name="server">服务器名称， <b>Null</b>字符串或<b>vbNullString</b>常量。</param>
        <param name="topic1">
          <paramref name="topic1" />–<paramref name="topic28" />表示主题的<b>字符串</b>。</param>
        <param name="topic2">To be added.</param>
        <param name="topic3">To be added.</param>
        <param name="topic4">To be added.</param>
        <param name="topic5">To be added.</param>
        <param name="topic6">To be added.</param>
        <param name="topic7">To be added.</param>
        <param name="topic8">To be added.</param>
        <param name="topic9">To be added.</param>
        <param name="topic10">To be added.</param>
        <param name="topic11">To be added.</param>
        <param name="topic12">To be added.</param>
        <param name="topic13">To be added.</param>
        <param name="topic14">To be added.</param>
        <param name="topic15">To be added.</param>
        <param name="topic16">To be added.</param>
        <param name="topic17">To be added.</param>
        <param name="topic18">To be added.</param>
        <param name="topic19">To be added.</param>
        <param name="topic20">To be added.</param>
        <param name="topic21">To be added.</param>
        <param name="topic22">To be added.</param>
        <param name="topic23">To be added.</param>
        <param name="topic24">To be added.</param>
        <param name="topic25">To be added.</param>
        <param name="topic26">To be added.</param>
        <param name="topic27">To be added.</param>
        <param name="topic28">To be added.</param>
        <summary>本方法与源连接以接收实时数据。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Search">
      <MemberSignature Language="C#" Value="public double Search (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Search([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Search (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16466)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Find_text - 要查找的文本。</param>
        <param name="Arg2">Within_text - 要在其中搜索 find_text 的文本。</param>
        <param name="Arg3">Start_num - 在 within_text 中要从其开始搜索的字符编号。</param>
        <summary>
          <b>搜索</b>和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />找到一个文本字符串中的第二个文本字符串，并从第二个文本字符串的第一个字符返回的第一个文本字符串的起始位置数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>：<b>搜索</b>应以用于使用单字节字符集 (SBC) 的语言，而<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />用于用于使用双字节字符的语言设置 (DBCS)。 您的计算机上的默认语言设置影响采用以下方式的返回值：<b>搜索</b>始终将计算每个字符，无论是单字节还是双字节，作为 1，无论默认语言设置。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />已启用的编辑支持 DBCS 的语言，然后将其设置为默认语言时，每个双字节字符计数为 2。 否则为<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />计算每个字符设为 1。</para>
          <para>支持 DBCS 的语言包括日语、中文（简体）、中文（繁体）和朝鲜语。</para>
          <para>使用<b>搜索</b>和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />，以便您可以使用 MID 和 MIDB 确定字符或文本字符串在另一个文本字符串中的位置或<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" />函数来更改的文本。 </para>
          <para>
            <b>搜索</b>和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />不区分大小写。 如果您想要执行区分大小写的搜索，您可以使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />。 </para>
          <para>可以在 find_text 中使用通配符，包括问号 (?) 和星号 (*)。问号可匹配任意的单个字符；星号可匹配任意一串字符。如果要查找实际的问号或星号，则请在该字符前键入一个波形符 (~)。</para>
          <para>如果找不到 find_text，则返回错误值 #VALUE!。</para>
          <para>如果省略 start_num，则假定其值为 1。</para>
          <para>如果 start_num 不大于 0（零）或大于 within_text 的长度，则返回错误值 #VALUE!。</para>
          <para>使用 start_num 跳过指定的数量的字符。 使用<b>搜索</b>作为示例，假设您正在使用的文本字符串"AYF0093。YoungMensApparel"。 若要查找的文本字符串的说明部分中的第一个"Y"数，将 start_num 设置为 8，因此不搜索文本的序列号部分。 <b>搜索</b>字符 8 开头、 查找 find_text 处的下一个字符，并返回数字 9。 <b>搜索</b>始终返回字符的数从 within_text 中，开始计数如果 start_num 大于 1 则跳过的字符。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchB">
      <MemberSignature Language="C#" Value="public double SearchB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SearchB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16590)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Find_text - 要查找的文本。</param>
        <param name="Arg2">Within_text - 要在其中搜索 find_text 的文本。</param>
        <param name="Arg3">Start_num - 在 within_text 中要从其开始搜索的字符编号。</param>
        <summary>SEARCH 和 SEARCHB 查找一个文本字符串内的另一个文本字符串，并返回一个数字，表示从文本字符串（从中查找另一个文本字符串）的第一个字符起开始查找的第一个文本字符串的起始位置。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>：<b>搜索</b>应以用于使用单字节字符集 (SBC) 的语言，而<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />用于用于使用双字节字符的语言设置 (DBCS)。 您的计算机上的默认语言设置影响采用以下方式的返回值：<b>搜索</b>始终将计算每个字符，无论是单字节还是双字节，作为 1，无论默认语言设置。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />已启用的编辑支持 DBCS 的语言，然后将其设置为默认语言时，每个双字节字符计数为 2。 否则为<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />计算每个字符设为 1。</para>
          <para>支持 DBCS 的语言包括日语、中文（简体）、中文（繁体）和朝鲜语。</para>
          <para>使用<b>搜索</b>和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />，以便您可以使用 MID 和 MIDB 确定字符或文本字符串在另一个文本字符串中的位置或<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" />函数来更改的文本。 </para>
          <para>
            <b>搜索</b>和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />不区分大小写。 如果您想要执行区分大小写的搜索，您可以使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />。 </para>
          <para>可以在 find_text 中使用通配符，包括问号 (?) 和星号 (*)。问号可匹配任意的单个字符；星号可匹配任意一串字符。如果要查找实际的问号或星号，则请在该字符前键入一个波形符 (~)。</para>
          <para>如果找不到 find_text，则返回错误值 #VALUE!。</para>
          <para>如果省略 start_num，则假定其值为 1。</para>
          <para>如果 start_num 不大于 0（零）或大于 within_text 的长度，则返回错误值 #VALUE!。</para>
          <para>使用 start_num 跳过指定的数量的字符。 使用<b>搜索</b>作为示例，假设您正在使用的文本字符串"AYF0093。YoungMensApparel"。 若要查找的文本字符串的说明部分中的第一个"Y"数，将 start_num 设置为 8，因此不搜索文本的序列号部分。 <b>搜索</b>字符 8 开头、 查找 find_text 处的下一个字符，并返回数字 9。 <b>搜索</b>始终返回字符的数从 within_text 中，开始计数如果 start_num 大于 1 则跳过的字符。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sec">
      <MemberSignature Language="C#" Value="public double Sec (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sec([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sec(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sec (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sec(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16938)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">您希望正割弧度角。</param>
        <summary>返回角度的正割。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sech">
      <MemberSignature Language="C#" Value="public double Sech (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sech([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sech(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sech (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sech(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16939)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">要计算其双曲正割弧度角。</param>
        <summary>返回角度的双曲正割。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeriesSum">
      <MemberSignature Language="C#" Value="public double SeriesSum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SeriesSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SeriesSum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SeriesSum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SeriesSum(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16798)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - 幂级数的输入值。</param>
        <param name="Arg2">N - x 的首项乘幂。</param>
        <param name="Arg3">M - 级数中每一项的乘幂 n 的步长增加值。</param>
        <param name="Arg4">Coefficients - 一系列与 x 各级乘幂相乘的系数。coefficients 中值的数目决定了幂级数的项数。例如，如果 coefficients 中有三个值，幂级数中将有三项。</param>
        <summary>返回基于公式的幂级数之和： SERIES(x,n,m,a) = a1xn+a2x(n+m)+a3x(n+2m)+...+aix(n+(i-1)m)</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 SeriesSum</b>返回 #VALUE ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public double Sinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16613)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number 为任意实数。</param>
        <summary>返回某一数字的双曲正弦值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>双曲正弦值的计算公式为：</para>
          <para>图 1： 公式的双曲正弦值</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public double Skew (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16707)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2 ... - 要计算其不对称度的 1 到 30 个参数。也可以不使用这种用逗号分隔参数的形式，而使用一个数组或一个对数组的引用。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回分布的不对称度。不对称度反映以其平均值为中心的分布的不对称程度。不对称度为正表示不对称部分的分布更趋向正值。不对称度为负表示不对称部分的分布更趋向负值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入参数列表的逻辑值和数字的文本表示也包括在内。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>如果有少于三个数据点，或样本标准偏差为零， <b>Skew</b>将返回 #DIV/0 ！。 错误值。 </para>
          <para>不对称度的计算公式定义如下：

 </para>
          <para>图 1： 不对称度的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew_p">
      <MemberSignature Language="C#" Value="public double Skew_p (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew_p([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew_p(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew_p (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16960)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg2">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg3">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg4">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg5">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg6">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg7">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg8">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg9">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg10">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg11">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg12">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg13">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg14">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg15">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg16">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg17">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg18">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg19">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg20">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg21">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg22">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg23">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg24">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg25">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg26">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg27">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg28">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg29">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <param name="Arg30">1 到 254 个数字或名称、 数组或引用包含您希望总体不对称度的数字。</param>
        <summary>返回基于总体的通讯组不对称度： 其平均值的通讯组不对称度的特征。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sln">
      <MemberSignature Language="C#" Value="public double Sln (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sln([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sln(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sln (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sln(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16526)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cost - 资产的初始成本。</param>
        <param name="Arg2">Salvage - 资产在折旧期末的价值（有时也称为资产残值）。</param>
        <param name="Arg3">Life - 资产进行折旧计算的周期数（有时也称作资产的生命周期）。</param>
        <summary>返回某项资产一个周期的直线折旧值。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slope">
      <MemberSignature Language="C#" Value="public double Slope (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Slope([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slope (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Slope(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16699)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y's - 数字型相关数据点的数组或单元格区域。</param>
        <param name="Arg2">Known_x's - 独立数据点的集合。</param>
        <summary>返回根据 known_y's 和 known_x's 中的数据点拟合的线性回归直线的斜率。斜率为直线上任意两点的垂直距离与水平距离的比值，也就是回归直线的变化率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数必须是数字，或是包含数字的名称、数组或引用。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果 known_y's 和 known_x's 为空或其数据点的个数不同，则<b>Slope</b>将返回 # n/A 错误值。 </para>
          <para>回归直线的斜率计算公式为：

 </para>
          <para>回归直线的图 1： 斜率的等式</para>
          <para></para>
          <para></para>
          <para>
            <b>斜率</b>中使用的基础算法和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />功能时使用的基础算法以外的其他<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />函数。 确定，并且已共线数据时，这些算法之间的差异可能导致不同的结果。 例如，如果 known_y's 参数的数据点是 0 和 known_x's 参数的数据点，1: </para>
          <list type="bullet">
            <item>
              <description>
                <b>斜率</b>和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />返回 #DIV/0 ！ 错误。 <b>斜率</b>和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />算法旨在查找且只有一个回答，并在这种情况下可以有多个答案。 </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />返回值为 0。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />算法旨在返回合理数据的结果共线，并在这种情况下可以找到至少一个答案。</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Small">
      <MemberSignature Language="C#" Value="public double Small (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Small([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Small(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Small (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Small(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16710)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - 需要确定第 k 个最小值的数值数据数组或区域。</param>
        <param name="Arg2">K - 要返回的数据在数组或区域中的位置（从最小值开始）。</param>
        <summary>返回数据集中第 k 个最小值。使用此函数可以返回数据集中特定位置上的数值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 array 为空，<b>小型</b>将返回 #NUM ！。 错误值。 </para>
          <para>如果 k ≤ 0 或 k 超过了的数据点，<b>小型</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 n 为数组中数据点的个数，则 SMALL(array,1) 等于最小值，SMALL(array,n) 等于最大值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SqrtPi">
      <MemberSignature Language="C#" Value="public double SqrtPi (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SqrtPi([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SqrtPi(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SqrtPi (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SqrtPi(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16800)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 与 pi 相乘的数字。</param>
        <summary>返回某数与 pi 的乘积的平方根。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 number &lt; 0， <b>SqrtPi</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Standardize">
      <MemberSignature Language="C#" Value="public double Standardize (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Standardize([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Standardize(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Standardize (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Standardize(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16681)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - 要进行正态化的值。</param>
        <param name="Arg2">mean - 分布的算术平均值。</param>
        <param name="Arg3">standard_dev - 分布的标准偏差。</param>
        <summary>返回以 mean 和 standard_dev 表示的分布的正态化数值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 standard_dev ≤ 0，则<b>Standardize</b>返回 #NUM ！ 错误值。 </para>
          <para>正态化数值的计算公式为：

 </para>
          <para>图 1： 规范化值的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev">
      <MemberSignature Language="C#" Value="public double StDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16396)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">number1,number2,... - 对应于总体样本的 1 到 30 个数字参数。也可以不使用这种用逗号分隔参数的形式，而使用一个数组或一个对数组的引用。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>基于样本估算标准偏差。标准偏差反映数值相对于平均值 (mean) 的离散程度。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />方法。</para>
          <para>
            <b>StDev</b>假设其参数是的样本。 如果您的数据代表作为整个总体，计算使用<b>StDev</b>标准偏差。 </para>
          <para>标准偏差的计算使用“无偏差”或“n-1”方法。</para>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入到参数列表中的逻辑值和数字的文本表示形式也计算在内。</para>
          <para>如果参数是一个数组或引用，则只计算该数组或引用中的数字。数组或引用中的空单元格、逻辑值、文本或错误值将被忽略。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>
            <b>Stdev 的计算公式如下：</b>
          </para>
          <para>图 1: StDev 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中 x 为样本平均值 AVERAGE(number1,number2,...)，n 是样本大小。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_P">
      <MemberSignature Language="C#" Value="public double StDev_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16895)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">number1, number2, ... - 对应于总体的 1 到 30 个数字参数。也可以不使用这种用逗号 (,) 分隔参数的形式，而使用一个数组或一个对数组的引用。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>基于以参数形式给出的整个样本总体计算标准偏差。标准偏差反映数值相对于平均值 (mean) 的离散程度。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>StDev_P</b>假设其参数是作为整个总体。 如果您的数据表示的样本，则计算使用<b>StDev_P</b>的标准偏差。 </para>
          <para>对于较大的样本大小，<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />和<b>StDev_P</b>的返回值大致相等。 </para>
          <para>此处标准偏差的计算使用“有偏差”或“n”方法。</para>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入到参数列表中的逻辑值和数字的文本表示形式也计算在内。</para>
          <para>如果参数是一个数组或引用，则只计算该数组或引用中的数字。数组或引用中的空单元格、逻辑值、文本或错误值将被忽略。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>
            <b>Stdev_p 的计算公式如下：</b>
          </para>
          <para>图 1： 的 StDev_P 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中 x 为样本平均值 AVERAGE(number1,number2,...)，n 是样本大小。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_S">
      <MemberSignature Language="C#" Value="public double StDev_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16894)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">number1,number2,... - 对应于总体样本的 1 到 30 个数字参数。也可以不使用这种用逗号分隔参数的形式，而使用一个数组或一个对数组的引用。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>基于样本估算标准偏差。标准偏差反映数值相对于平均值 (mean) 的离散程度。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>StDev_S</b>假设其参数是的样本。 如果您的数据代表作为整个总体，计算标准偏差使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />。 </para>
          <para>标准偏差的计算使用“无偏差”或“n-1”方法。</para>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入到参数列表中的逻辑值和数字的文本表示形式也计算在内。</para>
          <para>如果参数是一个数组或引用，则只计算该数组或引用中的数字。数组或引用中的空单元格、逻辑值、文本或错误值将被忽略。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>
            <b>Stdev_s 的计算公式如下：</b>
          </para>
          <para>图 1： 的 StDev_S 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中 x 为样本平均值 AVERAGE(number1,number2,...)，n 是样本大小。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StDevP">
      <MemberSignature Language="C#" Value="public double StDevP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDevP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDevP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDevP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16577)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">number1,number2,... - 对应于总体样本的 1 到 30 个数字参数。也可以不使用这种用逗号分隔参数的形式，而使用一个数组或一个对数组的引用。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>基于以参数形式给出的整个样本总体计算标准偏差。标准偏差反映数值相对于平均值 (mean) 的离散程度。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />方法。</para>
          <para>
            <b>StDevP</b>假设其参数是作为整个总体。 如果您的数据表示的样本，则计算标准偏差使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />。 </para>
          <para>对于较大的样本大小，<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />和<b>StDevP</b>的返回值大致相等。 </para>
          <para>此处标准偏差的计算使用“有偏差”或“n”方法。 参数可以是数字，也可以是包含数字的名称、数组或引用。 </para>
          <para>直接键入到参数列表中的逻辑值和数字的文本表示形式也计算在内。</para>
          <para>如果参数是一个数组或引用，则只计算该数组或引用中的数字。数组或引用中的空单元格、逻辑值、文本或错误值将被忽略。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。 <b>Stdevp 的计算公式如下：</b></para>
          <para>图 1: StDevP 方法的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StEyx">
      <MemberSignature Language="C#" Value="public double StEyx (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StEyx([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StEyx(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StEyx (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double StEyx(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16698)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y's - 相关数据点的数组或区域。</param>
        <param name="Arg2">Known_x's - 独立数据点的数组或区域。</param>
        <summary>返回通过线性回归法计算每个 x 的 y 预测值时所产生的标准误差。标准误差用来度量根据单个 x 变量计算出的 y 预测值的误差量。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入参数列表的逻辑值和数字的文本表示也包括在内。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>如果 known_y's 和 known_x's 的数据点个数不同， <b>steyx 将</b>返回错误值 # n/A。 </para>
          <para>如果 known_y's 和 known_x's 为空或其数据点少于三， <b>steyx 将</b>返回 #DIV/0 ！ 错误值。 </para>
          <para>y 值（预测的）的标准误差的计算公式为：

 </para>
          <para>纵坐标的图 1： 标准误差的等式</para>
          <para></para>
          <para></para>
          <para>其中 x 和 y 是样本平均值 AVERAGE(known_x's) 和 AVERAGE(known_y's)，n 是样本大小。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Substitute">
      <MemberSignature Language="C#" Value="public string Substitute (string Arg1, string Arg2, string Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Substitute([in]string Arg1, [in]string Arg2, [in]string Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Substitute(System.String,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substitute (Arg1 As String, Arg2 As String, Arg3 As String, Optional Arg4 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text - 要替换其中字符的文本，或对含有要替换其中字符的文本的单元格的引用。</param>
        <param name="Arg2">old_text - 要替换的文本。</param>
        <param name="Arg3">New_text - 要用于替换 old_text 的文本。</param>
        <param name="Arg4">Instance_num - 指定要用 new_text 替换 old_text 的第几个匹配项。如果指定了 instance_num，则只有 old_text 的该实例被替换；否则将用 new_text 替换 text 中出现的所有 old_text 的匹配项。</param>
        <summary>在文本字符串中用 new_text 替代 old_text。如果需要在某一文本字符串中替换指定的文本，请使用函数 SUBSTITUTE；如果需要在某一文本字符串中替换指定位置处的任意文本，请使用函数 REPLACE。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtotal">
      <MemberSignature Language="C#" Value="public double Subtotal (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Subtotal([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Subtotal(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtotal (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16728)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">一个数字，表示要由该方法使用的聚合函数。</param>
        <param name="Arg2">第一个<see cref="T:Microsoft.Office.Interop.Excel.Range" />旨在为其计算分类汇总的对象。</param>
        <param name="Arg3">
          <paramref name="Arg3" />–<paramref name="Arg30" />随后<see cref="T:Microsoft.Office.Interop.Excel.Range" />旨在为其计算分类汇总的对象。</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>创建分类汇总。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public double Sum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16388)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 要对其求和的 1 到 30 个参数。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>对某单元格区域中的所有数字求和。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>直接键入参数列表的数字、逻辑值和数字的文本表示也包括在内。 </para>
          <para>如果数组或引用参数，该数组或引用中的唯一号码在内。 空单元格、 逻辑值或数组或引用中的文本将被忽略。 </para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIf">
      <MemberSignature Language="C#" Value="public double SumIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16729)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Range-要根据条件进行计算的单元格区域。</param>
        <param name="Arg2">条件的数字、 表达式或定义将添加哪些单元格的文本的窗体中的条件。 例如，条件可表达为 32，"32"，"&gt;32" 或"apples"。</param>
        <param name="Arg3">Sum_range - 要相加的实际单元格（如果 range 中对应的单元格符合条件）。如果省略 sum_range，则将根据条件对 range 中的单元格进行计算，并在符合条件的情况下对它们相加求和。</param>
        <summary>根据给定条件对指定单元格求和。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Sum_range 的大小和形状不必与 range 相同。实际进行相加求和的单元格确定方法如下：将 sum_range 中左上角的单元格作为开始单元格，然后将与 range 的大小和形状对应的单元格包含到其中。例如：</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>可以在 criteria 中使用通配符，包括问号 (?) 和星号 (*)。问号可匹配任意的单个字符；星号可匹配任意一串字符。如果要查找实际的问号或星号，则请在该字符前键入一个波形符 (~)。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIfs">
      <MemberSignature Language="C#" Value="public double SumIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16866)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Sum_range - 要求和的区域。</param>
        <param name="Arg2">Criteria_range1, criteria_range2, ... - 一个或多个区域，要在其中计算相关的条件。</param>
        <param name="Arg3">Criteria1，criteria2... -一个或多个条件的数字、 表达式、 单元格引用或文本形式的定义将添加哪些单元格。 例如，条件可表达为 32，"32"，"&gt;32"、"apples"或 B4。</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>对区域中满足多个条件的单元格求和。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>只有每个单元格对应的所有指定条件都为 True，才会对 sum_range 中的每个单元格求和。</para>
          <para>Sum_range 中包含<b>true</b>的单元格作为 1; 计算sum_range 中包含<b>false</b>的单元格作为 0 （零） 计算。 </para>
          <para>可以在 criteria 中使用通配符，包括问号 (?) 和星号 (*)。问号可匹配任意的单个字符；星号可匹配任意一串字符。如果要查找实际的问号或星号，则请在该字符前键入一个波形符 (~)。</para>
          <para>每个 criteria_range 的大小和形状不必与 sum_range 相同。实际进行求和的单元格按以下方法确定：将 criteria_range 的左上角单元格作为开始单元格，然后将与 sum_range 的大小和形状对应的所有单元格包含到其中。例如：</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumProduct">
      <MemberSignature Language="C#" Value="public double SumProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16612)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1, array2, array3, ... - 2 到 30 个数组，其相应元素需要相乘并求和。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>在给定的数组中，将数组中对应的元素相乘，并返回乘积之和。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>数组参数必须具有相同尺寸。 如果未显示，请<b>SumProduct</b>返回 #VALUE ！。 错误值。 </para>
          <para>
            <b>SumProduct</b>将不是数字，就像零的数组项。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumSq">
      <MemberSignature Language="C#" Value="public double SumSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16705)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 1 到 30 个需要求平方和的参数。也可以不使用这种用逗号分隔参数的形式，而使用一个数组或一个对数组的引用。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>返回参数的平方之和。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。 </para>
          <para>直接键入参数列表的数字、逻辑值和数字的文本表示也包括在内。 </para>
          <para>如果参数为数组或引用，则只有该数组或引用中的数字将被计算在内。数组或引用中的空单元格、逻辑值、文本或错误值将被忽略。 </para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。 </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2MY2">
      <MemberSignature Language="C#" Value="public double SumX2MY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2MY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2MY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2MY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2MY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16688)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x - 第一个数值数组或区域。</param>
        <param name="Arg2">Array_y - 第二个数值数组或区域。</param>
        <summary>返回两个数组中对应值的平方差之和。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数应为数字，或者是包含数字的名称、数组或引用。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果 array_x 和 array_y 个数不同的值， <b>SumX2MY2returns</b> # n/A 错误值。 </para>
          <para>平方差之和的计算公式为：

 </para>
          <para>图 1： 的平方差总和的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2PY2">
      <MemberSignature Language="C#" Value="public double SumX2PY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2PY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2PY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2PY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2PY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16689)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x - 第一个数值数组或区域。</param>
        <param name="Arg2">Array_y - 第二个数值数组或区域。</param>
        <summary>返回两数组中对应数值的平方和之和，平方和之和在统计计算中经常使用。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数应为数字，或者是包含数字的名称、数组或引用。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果 array_x 和 array_y 值的数目不同，<b>则 sumx2py2 将</b>返回错误值 # n/A。 </para>
          <para>平方和之和的计算公式为：

 </para>
          <para>图 1： 的平方和总和的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumXMY2">
      <MemberSignature Language="C#" Value="public double SumXMY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumXMY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumXMY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumXMY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumXMY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16687)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x - 第一个数值数组或区域。</param>
        <param name="Arg2">Array_y - 第二个数值数组或区域。</param>
        <summary>返回两个数组中对应值之差的平方和。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>参数应为数字，或者是包含数字的名称、数组或引用。</para>
          <para>如果数组或引用参数包含文本、逻辑值或空单元格，则这些值将被忽略；但含有零值的单元格包括在内。</para>
          <para>如果 array_x 和 array_y 值的数目不同，<b>则 sumxmy2 将</b>返回错误值 # n/A。 </para>
          <para>差的平方和的计算公式为：

 </para>
          <para>图 1： 的平方差总和的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Syd">
      <MemberSignature Language="C#" Value="public double Syd (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Syd([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Syd(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Syd (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Syd(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16527)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cost - 资产的初始成本。</param>
        <param name="Arg2">Salvage - 资产在折旧期末的价值（有时也称为资产残值）。</param>
        <param name="Arg3">Life - 资产进行折旧计算的周期数（有时也称作资产的生命周期）。</param>
        <param name="Arg4">Per - 期间，其单位必须与 life 相同。</param>
        <summary>返回某项资产按年限总和折旧法计算的指定期间的折旧值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Syd</b>的计算公式如下：</para>
          <para>图 1: Syd 方法的等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist">
      <MemberSignature Language="C#" Value="public double T_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16896)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 用于计算分布的值。</param>
        <param name="Arg2">Deg_freedom-表示自由度数的整数。</param>
        <param name="Arg3">Cumulative-决定函数的形式一个逻辑值。 如果累积为<b>true</b>时，<b>则 t_dist 将</b>返回累积分布函数;如果<b>false</b>，则将返回概率密度函数。</param>
        <summary>返回学生的 t 分布，其中数值 (x) 是 t 的计算值（将计算其百分点）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 t_dist 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 deg_freedom &lt; 1，<b>则 t_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 x &lt; 0，则<b>T_Dist</b>将返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_2T">
      <MemberSignature Language="C#" Value="public double T_Dist_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16897)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 用于计算分布的值。</param>
        <param name="Arg2">Deg_freedom-表示自由度数的整数。</param>
        <summary>返回学生的双尾 t 分布。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 t_dist_2t 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 deg_freedom &lt; 1，<b>则 t_dist_2t 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 x &lt; 0，则<b>T_Dist_2T</b>将返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_RT">
      <MemberSignature Language="C#" Value="public double T_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16898)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 用于计算分布的值。</param>
        <param name="Arg2">degrees_freedom - 表示自由度数的整数。</param>
        <summary>返回学生的右尾 t 分布，其中数值 (x) 是 t 的计算值（将计算其百分点）。t 分布用于小样本数据集的假设检验。使用此函数可以代替 t 分布的临界值表。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 t_dist_rt 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 degrees_freedom &lt; 1，<b>则 t_dist_rt 将</b>返回 #NUM ！ 错误值。 </para>
          <para>参数 degrees_freedom 和 tails 将被截尾取整。</para>
          <para>如果 tails 不为 1 或 2，<b>则 t_dist_rt 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 x &lt; 0，则<b>T_Dist_RT</b>将返回 #NUM ！ 错误值。 </para>
          <para>如果 tails = 1，<b>则 t_dist_rt 将</b>的计算公式为 T_DIST_RT = P (X&gt;x)，其中 X 为下面 t 分布的随机变量。 如果 tails = 2，<b>则 t_dist_rt 将</b>的计算公式为 T_DIST_RT = P (|X |&gt; x) = P (X &gt; x &lt; -x)。 </para>
          <para>因为 x &lt; 0 不允许，用于<b>T_Dist_RT</b>时 x &lt; 0，注意该 T_DIST_RT(-x,df) = 1 – T_DIST_RT(x,df) = P (X &gt; -x) 和 T_DIST_2T(-x,df) = T_DIST_2T(x df) = P (|X |&gt; x)。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv">
      <MemberSignature Language="C#" Value="public double T_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16899)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probability-与学生 t 分布相关的概率。</param>
        <param name="Arg2">Deg_freedom-用于代表分布的自由度数。</param>
        <summary>返回学生 t 分布的左尾概率的反函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 t_inv 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 probability &lt; 0 或 probability &gt; 1，<b>则 t_inv 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 deg_freedom 不是整数，则将被截尾取整。</para>
          <para>如果 deg_freedom &lt; 1，<b>则 t_inv 将</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv_2T">
      <MemberSignature Language="C#" Value="public double T_Inv_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16900)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">probability - 与双尾学生 t 分布相关的概率。</param>
        <param name="Arg2">degrees_freedom - 代表分布的自由度数。</param>
        <summary>返回作为概率和自由度函数的学生 t 分布的 t 值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果任一参数为非数值型，<b>则 t_inv_2t 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 probability &lt; 0 或 probability &gt; 1，<b>则 t_inv_2t 将</b>返回 #NUM ！ 错误值。 如果 degrees_freedom 不是整数，则将被截尾取整。 </para>
          <para>如果 degrees_freedom &lt; 1，<b>则 t_inv_2t 将</b>返回 #NUM ！ 错误值。 </para>
          <para>
            <b>则 t_inv_2t 将</b>返回该值 t，因此 P (|X |&gt; t) = 的概率其中 X 是遵循的 t 分布和 P 随机变量 (|X |&gt; t) = P (X &lt; -t 或 X &gt; t)。 </para>
          <para>可以由概率替换 2*概率返回单尾 t 值。对于 0.05 的概率和自由度为 10，则双尾值被计算 T_INV_2T(0.05,10)，它返回 2.28139。可以使用计算相同的概率和自由度数的单尾值 T_INV_2T(2*0.05,10)，其返回 1.812462。 </para>
          <para>
            <b>注意</b>： 在某些表格中，概率被描述为 (1-p)。</para>
          <para>概率<b>T_Inv_2T</b>搜寻该值 x 满足给定值 （x，degrees_freedom，2），则 t_dist_rt 将 = 概率。 因此，<b>则 t_inv_2t 将</b>精度取决精度<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />。 <b>则 t_inv_2t 将</b>使用的迭代搜索方法。 如果搜索不收敛 100 次迭代后，该函数将返回 # n/A 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Test">
      <MemberSignature Language="C#" Value="public double T_Test (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Test([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Test (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Test(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16925)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">array1 - 第一个数据集。</param>
        <param name="Arg2">array2 - 第二个数据集。</param>
        <param name="Arg3">Tails-指定的分布函数。 如果 tails = 1，<b>则 t_test 将</b>使用单尾分布。 如果 tails = 2，<b>则 t_test 将</b>使用双尾分布。</param>
        <param name="Arg4">type - 要执行的 t 检验的种类。</param>
        <summary>返回与学生 t 检验相关的概率。可以使用 T_TEST 判断两个样本是否可能来自两个具有相同平均值的基础总体。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 array1 和 array2 的数据点，并键入不同数量 = 1 （成对），<b>则 t_test 将</b>返回错误值 # n/A。 </para>
          <para>参数 tails 和 type 将被截尾取整。</para>
          <para>如果 tails 或 type 为非数值型，<b>则 t_test 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 tails 不为 1 或 2，<b>则 t_test 将</b>返回 #NUM ！ 错误值。 </para>
          <para>
            <b>则 t_test 将</b>使用 array1 和 array2 中的数据计算非负 t-统计。 如果 tails = 1，<b>则 t_test 将</b>返回 array1 和 array2 都取自具有相同的平均值的示例假定 t 统计更高的值的概率。 <b>则 t_test 将</b>返回的值时 tails = 2 是双精度值，当 tails = 1，并对应于"总体平均值相同"假设 t 统计较高绝对值的概率。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public double Tanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Tanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Tanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Tanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16615)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - 任意实数。</param>
        <summary>返回某一数字的双曲正切值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>双曲正切值的计算公式为：</para>
          <para>图 1： 公式的双曲正切值</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillEq">
      <MemberSignature Language="C#" Value="public double TBillEq (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillEq([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillEq(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillEq (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16822)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 国库券的结算日。债券结算日是发行日之后国库券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 国库券的到期日。到期日是国库券有效期截止时的日期。</param>
        <param name="Arg3">通过使用 DATE 函数，或作为其他公式或函数的结果应输入 ImportantDates。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。Discount-国库券的贴现率。</param>
        <summary>返回国库券的等价债券收益。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>Settlement 和 maturity 将截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，<b>则 tbilleq 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 discount ≤ 0，<b>则 tbilleq 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 settlement &gt; maturity 或 maturity 在 settlement 之后超过一年，<b>则 tbilleq 将</b>返回 #NUM ！ 错误值。 </para>
          <para>
            <b>TBillEq</b>的计算公式为 TBILLEQ = （365 x 比率） / （360-x DSM)），其中 DSM 是的 settlement 与 maturity 计算根据的 360 天每年基准数之间的天数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillPrice">
      <MemberSignature Language="C#" Value="public double TBillPrice (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillPrice([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillPrice(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillPrice (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16823)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 国库券的结算日。债券结算日是发行日之后国库券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 国库券的到期日。到期日是国库券有效期截止时的日期。</param>
        <param name="Arg3">Discount - 国库券的贴现率。</param>
        <summary>返回面值 ￥100 的国库券的价格。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>Settlement 和 maturity 将截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，<b>则 tbillprice 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 discount ≤ 0，<b>则 tbillprice 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 settlement &gt; maturity 或 maturity 在 settlement 之后超过一年，<b>则 tbillprice 将</b>返回 #NUM ！ 错误值。 </para>
          <para>
            <b>TBillPrice</b>的计算公式如下： </para>
          <para>图 1： 的 TBillPrice 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>DSM = 的从结算日与到期日，不包括任何结算日之后的多个日历年的到期日的天数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillYield">
      <MemberSignature Language="C#" Value="public double TBillYield (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillYield([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillYield(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillYield (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16824)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 国库券的结算日。债券结算日是发行日之后国库券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 国库券的到期日。到期日是国库券有效期截止时的日期。</param>
        <param name="Arg3">Pr - 面值 ￥100 的国库券的价格。</param>
        <summary>返回国库券的收益。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>Settlement 和 maturity 将截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，<b>则 tbillyield 将</b>返回 #VALUE ！。 错误值。 </para>
          <para>如果 pr ≤ 0，<b>则 tbillyield 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 settlement ≥ maturity 或 maturity 在 settlement 之后超过一年，<b>则 tbillyield 将</b>返回 #NUM ！ 错误值。 </para>
          <para>
            <b>TBillYield</b>的计算公式如下： </para>
          <para>图 1： 的 TBillYield 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>DSM = 的从结算日与到期日，不包括任何结算日之后的多个日历年的到期日的天数。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TDist">
      <MemberSignature Language="C#" Value="public double TDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16685)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 用于计算分布的值。</param>
        <param name="Arg2">Degrees_freedom - 表示自由度数的整数。</param>
        <param name="Arg3">Tails - 指定要返回的分布的尾数。如果 tails = 1，则 TDIST 将返回单尾分布。如果 tails = 2，则 TDIST 将返回双尾分布。</param>
        <summary>返回学生 t 分布的百分点（概率），其中数值 (x) 是 t 的计算值（将计算其百分点）。t 分布用于小样本数据集的假设检验。使用此函数可以代替 t 分布的临界值表。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />， <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" />，和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" />方法。</para>
          <para>如果任一参数为非数值型，<b>则 tdist 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 degrees_freedom &lt; 1，<b>则 tdist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>参数 degrees_freedom 和 tails 将被截尾取整。</para>
          <para>如果 tails 不为 1 或 2，<b>则 tdist 将</b>返回 #NUM ！。 错误值。 </para>
          <para>如果 x &lt; 0，<b>则 tdist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 tails = 1，<b>则 tdist 将</b>的计算公式为则 tdist 将 = P (X&gt;x)，其中 X 为下面 t 分布的随机变量。 如果 tails = 2，<b>则 tdist 将</b>的计算公式为则 tdist 将 = P (|X |&gt; x) = P (X &gt; x &lt; -x)。 </para>
          <para>因为 x &lt; 0 不允许，用于<b>则 tdist 将</b>时 x &lt; 0，注意该 TDIST(-x,df,1) = 1 – TDIST(x,df,1) = P (X &gt; -x) 和 TDIST(-x,df,2) = 则 tdist 将 (x df，2) = P (|X |&gt; x)。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text (object Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Text([in]object Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Text(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Text (Arg1 As Object, Arg2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Text(System::Object ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16432)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">数值、计算数值的公式或对数值所在单元格的引用。</param>
        <param name="Arg2">文本分类中的数字格式，该分类位于“单元格格式”对话框的“数字”选项卡上的“分类”框中。</param>
        <summary>将数值转换为按指定数字格式表示的文本。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDayOfWeek">
      <MemberSignature Language="C#" Value="public string ThaiDayOfWeek (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDayOfWeek([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDayOfWeek(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDayOfWeek (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDayOfWeek(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16753)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>仅供内部使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDigit">
      <MemberSignature Language="C#" Value="public string ThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDigit (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16754)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>仅供内部使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiMonthOfYear">
      <MemberSignature Language="C#" Value="public string ThaiMonthOfYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiMonthOfYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiMonthOfYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiMonthOfYear (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiMonthOfYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16755)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>仅供内部使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumSound">
      <MemberSignature Language="C#" Value="public string ThaiNumSound (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumSound([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumSound(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumSound (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumSound(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16756)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>仅供内部使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumString">
      <MemberSignature Language="C#" Value="public string ThaiNumString (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumString([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumString(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumString (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumString(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16757)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>仅供内部使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiStringLength">
      <MemberSignature Language="C#" Value="public double ThaiStringLength (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiStringLength([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiStringLength(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiStringLength (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiStringLength(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16758)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>仅供内部使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiYear">
      <MemberSignature Language="C#" Value="public double ThaiYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiYear (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16762)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>仅供内部使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TInv">
      <MemberSignature Language="C#" Value="public double TInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16716)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probability - 与双尾学生 t 分布关联的概率。</param>
        <param name="Arg2">degrees_freedom - 代表分布的自由度数。</param>
        <summary>返回作为概率和自由度函数的学生 t 分布的 t 值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" />方法。</para>
          <para>如果任一参数为非数值型，<b>则 tinv 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 probability &lt; 0 或 probability &gt; 1，<b>则 tinv 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 degrees_freedom 不是整数，则将被截尾取整。</para>
          <para>如果 degrees_freedom &lt; 1，<b>则 tinv 将</b>返回 #NUM ！ 错误值。 </para>
          <para>
            <b>则 tinv 将</b>返回该值 t，因此 P (|X |&gt; t) = 的概率其中 X 是遵循的 t 分布和 P 随机变量 (|X |&gt; t) = P (X &lt; -t 或 X &gt; t)。 </para>
          <para>可以由概率替换 2*概率返回单尾 t 值。对于 0.05 的概率和自由度为 10，则双尾值被计算 TINV(0.05,10)，它返回 2.28139。可以使用计算相同的概率和自由度数的单尾值 TINV(2*0.05,10)，其返回 1.812462。 </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public object Transpose (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Transpose([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Transpose(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transpose (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Transpose(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16467)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - 要进行转置的工作表中的单元格数组或区域。所谓数组的转置就是，将数组的第一行作为新数组的第一列，将数组的第二行作为新数组的第二列，依此类推。</param>
        <summary>返回转置单元格区域，即将一行单元格区域转置成一列单元格区域，反之亦然。在行列数分别与数组的行列数相同的区域中，必须将 TRANSPOSE 输入为数组公式。使用 TRANSPOSE 可在工作表中转置数组的垂直和水平方向。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trend">
      <MemberSignature Language="C#" Value="public object Trend (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Trend([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trend (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16434)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y's - 关系表达式 y = mx + b 中已知的 y 值集合。</param>
        <param name="Arg2">Known_x's - 关系表达式 y = mx + b 中可能已知的可选 x 值集合。</param>
        <param name="Arg3">New_x's - 想让 TREND 为其返回对应 y 值的新 x 值。</param>
        <param name="Arg4">Const - 一个逻辑值，用于指定是否强制常量 b 等于 0。</param>
        <summary>返回一条线性回归拟合线的一组纵坐标值（y 值）。即找到适合给定的数组 known_y's 和 known_x's 的直线（用最小二乘法），并返回指定数组 new_x's 值在直线上对应的 y 值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
				如果数组 known_y's 在单独一列中，则 known_x's 的每一列被解释为一个独立的变量。
</para>
          <para>
				如果数组 known_y's 在单独一行中，则 known_x's 的每一行被解释为一个独立的变量。
</para>
          <para>
				数组 known_x's 可以包含一组或多组变量。如果只用到一个变量，只要 known_y's 和 known_x's 维数相同，它们就可以是任何形状的区域。如果用到多个变量，则 known_y's 必须为向量（即必须为一行或一列）。
</para>
          <para>
				如果省略 known_x's，则假定该数组为 {1,2,3,...}，其大小与 known_y's 相同。
</para>
          <para>
				New_x's 与 known_x's 一样，每个独立变量必须为单独的一列（或一行）。因此，如果 known_y's 是单列的，known_x's 和 new_x's 就必须有同样的列数。如果 known_y's 是单行的，known_x's 和 new_x's 就必须有同样的行数。
</para>
          <para>
				如果省略 new_x's，则将假定它和 known_x's 一样。
</para>
          <para>
				如果 known_x's 和 new_x's 都省略，则将假定它们为数组 {1,2,3,...}，大小与 known_y's 相同。
</para>
          <para>如果 const 为<b>true</b>或被省略，b 将按正常方式计算。 </para>
          <para>如果 const 为<b>false</b>，b 将被设置为 0 （零），并 m 值进行调整，以使 y = mx。 </para>
          <para>有关 Microsoft Excel 如何对数据行的信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />。 </para>
          <para>回归针对不同乘方的同一变量值来多项式曲线，可以使用<b>趋势</b>。 例如，假设列包含 y 值和 B 列包含 x 值。 您可以输入 x ^2 中列 C，x ^3 列 D、 和等等，然后进行回归计算列 B 通过 D 针对 A 列。 </para>
          <para>对于返回结果为数组的公式，必须以数组公式的形式输入。</para>
          <para>当为参数（如 known_x's）输入数组常量时，应当使用逗号分隔同一行中的各个值，用分号分隔不同行中的值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Trim([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16502)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text - 要从中删除空格的文本。</param>
        <summary>删除文本中的所有空格（除了单词之间的单个空格外）。对于从其他应用程序中获取带有不规则空格的文本，可以使用 TRIM。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： <b>Trim</b>函数旨在修整从文本 7 位 ASCII 空格字符 （值 32）。 在 Unicode 字符集，没有称为 160 的十进制值不间断空格字符其他空格字符。 此字符作为 HTML 实体，通常用于在网页中<b>&amp;– 文本</b>。 <b>Trim</b>函数本身不删除此不间断空格字符。</para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimMean">
      <MemberSignature Language="C#" Value="public double TrimMean (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TrimMean([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TrimMean(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimMean (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TrimMean(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16715)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - 要进行剪裁并求平均值的数值数组或区域。</param>
        <param name="Arg2">Percent - 计算时所要排除的数据点所占的比例，例如，如果 percent = 0.2，在 20 个数据点的集合中，就要除去 4 个数据点 (20 x 0.2)：头部除去 2 个，尾部除去 2 个。</param>
        <summary>返回数据集的内部平均值。函数 TRIMMEAN 先从数据集的头部和尾部除去一定百分比的数据点，然后再求平均值。当希望在分析中剔除一部分数据的计算时，可以使用此函数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 percent &lt; 0 或 % &gt; 1，<b>则 trimmean 将</b>返回 #NUM ！ 错误值。 </para>
          <para>
            <b>TrimMean</b>舍入到最接近 2 的倍数的排除的数据点的个数。 如果 percent = 0.1，10%的 30 数据点等于 3 磅。 对称，<b>则 trimmean 将</b>从顶部和底部的数据集的排除单个值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TTest">
      <MemberSignature Language="C#" Value="public double TTest (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TTest([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TTest(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTest (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TTest(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16700)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">array1 - 第一个数据集。</param>
        <param name="Arg2">array2 - 第二个数据集。</param>
        <param name="Arg3">tails - 指定分布的尾数。如果 tails = 1，则 TTEST 将使用单尾分布。如果 tails = 2，则 TTEST 将使用双尾分布。</param>
        <param name="Arg4">type - 要执行的 t 检验的种类。</param>
        <summary>返回与学生 t 检验相关的概率。可以使用函数 TTEST 判断两个样本是否可能来自两个具有相同平均值的总体。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" />方法。</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>成对</description>
            </item>
            <item>
              <term>2</term>
              <description>双样本等方差（同方差）</description>
            </item>
            <item>
              <term>3</term>
              <description>双样本不等方差（异方差）</description>
            </item>
          </list>
          <para>如果 array1 和 array2 的数据点，并键入不同数量 = 1 （成对），<b>则 ttest 将</b>返回错误值 # n/A。 </para>
          <para>参数 tails 和 type 将被截尾取整。</para>
          <para>如果 tails 或 type 为非数值型，<b>则 ttest 将</b>返回 #VALUE ！。 错误值。 </para>
          <para>如果 tails 不为 1 或 2，<b>则 ttest 将</b>返回 #NUM ！。 错误值。 </para>
          <para>
            <b>则 ttest 将</b>使用 array1 和 array2 中的数据计算非负 t-统计。 如果 tails = 1，<b>则 ttest 将</b>返回 array1 和 array2 都取自具有相同的平均值的示例假定 t 统计更高的值的概率。 <b>则 ttest 将</b>返回的值时 tails = 2 是双精度值，当 tails = 1，并对应于"总体平均值相同"假设 t 统计较高绝对值的概率。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unichar">
      <MemberSignature Language="C#" Value="public string Unichar (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Unichar([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unichar(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unichar (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Unichar(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16964)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Unicode 表示字符数。</param>
        <summary>返回给定数值引用的 Unicode 字符。</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unicode">
      <MemberSignature Language="C#" Value="public double Unicode (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Unicode([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unicode (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Unicode(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16965)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">所需的 Unicode 值的字符。</param>
        <summary>返回对应于文本的第一个字符的号码 （代码数据点）。</summary>
        <returns>
          <b>双</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="USDollar">
      <MemberSignature Language="C#" Value="public string USDollar (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string USDollar([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.USDollar(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function USDollar (Arg1 As Double, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ USDollar(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16588)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">对包含数字的单元格的引用，或求值结果为数值的公式。</param>
        <param name="Arg2">小数点右边的位数。如果 Arg2 为负数，则数字向小数点的左边舍入。如果省略小数，则假定其值为 2。</param>
        <summary>将数字转换为文本格式并应用货币符号。方法的名称（及其应用的货币符号）取决于语言设置。
</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>USDollar</b>方法将数字转换为使用舍入到指定位置的小数的货币格式的文本。 使用的格式是 $# # # 0.00_);($#,##0.00)。</para>
          <para>包含单元格格式命令带数字的单元格和格式的号码直接与的主要区别<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />方法是，<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />将其结果转换为文本。 使用单元格格式命令设置格式的数字仍是一个数字。 您可以继续使用的数字格式以<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />中公式，因为 Excel 转换到号码输入作为文本值，则在计算的号码。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Var">
      <MemberSignature Language="C#" Value="public double Var (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16430)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">number1,number2,... - 对应于总体样本的 1 到 30 个数字参数。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>估算基于样本的方差。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Var</b>假设其参数是的样本。 如果您的数据表示作为整个总体，然后计算方差使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />。 </para>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入到参数列表中的逻辑值和数字的文本表示形式也计算在内。</para>
          <para>如果参数是一个数组或引用，则只计算该数组或引用中的数字。数组或引用中的空单元格、逻辑值、文本或错误值将被忽略。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>
            <b>Var 的计算公式如下：</b>
          </para>
          <para>图 1: Var 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中 x 为样本平均值 AVERAGE(number1,number2,...)，n 是样本大小。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_P">
      <MemberSignature Language="C#" Value="public double Var_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16902)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">number1, number2, ... - 对应于总体的 1 到 30 个数字参数。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>计算基于整个总体的方差。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Var_P</b>假设其参数是作为整个总体。 如果您的数据表示的样本，然后计算方差使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />。 </para>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入到参数列表中的逻辑值和数字的文本表示形式也计算在内。</para>
          <para>如果参数是一个数组或引用，则只计算该数组或引用中的数字。数组或引用中的空单元格、逻辑值、文本或错误值将被忽略。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>
            <b>Var_P</b>的计算公式为： </para>
          <para>图 1： 的 Var_P 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中 x 为样本平均值 AVERAGE(number1,number2,...)，n 是样本大小。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_S">
      <MemberSignature Language="C#" Value="public double Var_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16901)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">number1,number2,... - 对应于总体样本的 1 到 30 个数字参数。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>估算基于样本的方差。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Var_S</b>假设其参数是的样本。 如果您的数据表示作为整个总体，然后计算方差使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />。 </para>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入到参数列表中的逻辑值和数字的文本表示形式也计算在内。</para>
          <para>如果参数是一个数组或引用，则只计算该数组或引用中的数字。数组或引用中的空单元格、逻辑值、文本或错误值将被忽略。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>
            <b>Var_s 的计算公式如下：</b>
          </para>
          <para>图 1： 的 Var_S 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中 x 为样本平均值 AVERAGE(number1,number2,...)，n 是样本大小。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VarP">
      <MemberSignature Language="C#" Value="public double VarP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 VarP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16578)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">number1, number2, ... - 对应于总体的 1 到 30 个数字参数。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>计算基于整个总体的方差。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />方法。</para>
          <para>
            <b>VarP</b>假设其参数是作为整个总体。 如果您的数据表示的样本，然后计算方差使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />。 </para>
          <para>参数可以是数字，也可以是包含数字的名称、数组或引用。</para>
          <para>直接键入到参数列表中的逻辑值和数字的文本表示形式也计算在内。</para>
          <para>如果参数是一个数组或引用，则只计算该数组或引用中的数字。数组或引用中的空单元格、逻辑值、文本或错误值将被忽略。</para>
          <para>如果参数为错误值或不能转换为数字的文本，则将导致错误。</para>
          <para>
            <b>VarP</b>的计算公式为： </para>
          <para>图 1: VarP 方法的等式</para>
          <para></para>
          <para></para>
          <para>其中 x 为样本平均值 AVERAGE(number1,number2,...)，n 是样本大小。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Vdb">
      <MemberSignature Language="C#" Value="public double Vdb (double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Vdb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]float64 Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Vdb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Double, Optional Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16606)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Double" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cost - 资产的初始成本。</param>
        <param name="Arg2">Salvage - 资产在折旧期末的价值（有时也称为资产残值）。此值可为 0。</param>
        <param name="Arg3">Life - 资产进行折旧计算的周期数（有时也称作资产的生命周期）。</param>
        <param name="Arg4">Start_period - 要为其进行折旧计算的起始期间。Start_period 必须与 life 使用相同的单位。</param>
        <param name="Arg5">End_period - 要为其进行折旧计算的截止期间。End_period 必须与 life 使用相同的单位。</param>
        <param name="Arg6">系数-余额递减频率的速率。 如果省略因素，则假定为 2 （双倍余额递减法）。 如果不想使用双倍余额递减法，则请改变 factor 的值。 双倍余额递减法的说明，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" />。</param>
        <param name="Arg7">No_switch - 一个逻辑值，指定当折旧值大于余额递减计算值时，是否转用直线折旧法。</param>
        <summary>使用双倍余额递减法或其他指定的方法，返回指定的任何期间内（包括部分期间）的资产折旧值。函数 VDB 代表可变余额递减法。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 no_switch 为<b>true</b>，Microsoft Excel 也不转用直线折旧法即使折旧值大于余额递减计算。 </para>
          <para>如果 no_switch 为<b>false</b>或被省略，Excel 就会转用直线折旧法，当折旧值大于余额递减计算。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VLookup">
      <MemberSignature Language="C#" Value="public object VLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object VLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16486)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value - 要在表格数组第一列中搜索的值。Lookup_value 可以为值或引用。如果 lookup_value 小于 table_array 第一列中的最小值，则 VLOOKUP 将返回错误值 #N/A。</param>
        <param name="Arg2">Table_array - 两列或更多列数据。可以使用对区域或区域名称的引用。table_array 第一列中的值是由 lookup_value 搜索的值。这些值可以是文本、数字或逻辑值。不区分大小写。</param>
        <param name="Arg3">Col_index_num - table_array 中待返回的匹配值的列号。col_index_num 为 1 时，返回 table_array 第一列中的值；col_index_num 为 2 时，返回 table_array 第二列中的值，依此类推。</param>
        <param name="Arg4">Range_lookup-一个逻辑值，指定是否希望<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />方法，以查找完全匹配或近似匹配：</param>
        <summary>在表格数组的首列查找值，并由此返回表格数组当前行中其他列的值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>在<b>VLookup</b> V 代表垂直。 使用<b>VLookup</b>方法而不是<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />方法时要查找的数据的左侧列中位于比较值。</para>
          <para>如果 Col_index_num 小于 1，则<b>VLookup</b>方法将生成一个错误。 </para>
          <para>如果 Col_index_num 大于 table_array 中的列数，则<b>VLookup</b>方法将生成一个错误。</para>
          <para>如果 Range_lookup 为<b>true</b>或被省略，则返回的确切或近似匹配。 如果找不到完全匹配，则返回下一个小于 lookup_value 的最大值。 </para>
          <para>Table_array 第一列中的值必须位于升序排序;否则，则<b>VLookup</b>方法可能无法提供的正确值。</para>
          <para>如果 Range_lookup 为<b>false</b>，则<b>VLookup</b>方法将只查找完全匹配。 在这种情况下，table_array 第一列中的值不需要进行排序。 如果有两个或多个值 table_array 第一列中的符合 lookup_value，则使用找到的第一个值。 如果找不到完全匹配，则生成错误。</para>
          <para>搜索时文本值 table_array 第一列中，确保 table_array 第一列中的数据不具有前导空格，尾随空格，不一致使用表情的 (或") 和花 (或") 引号或非打印字符。 在这些情况下，则<b>VLookup</b>方法可能会给不正确或意外的值。 有关如何进行清理或修整值的信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" />和<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" />方法。 搜索时数字或日期值，确保 table_array 第一列中的数据，不存储为文本值。 在这种情况下，则<b>VLookup</b>方法可能会给不正确或意外的值。 </para>
          <para>如果 range_lookup 为<b>false</b> ，并且 lookup_value 是文本，您可以使用通配符，问号 (?) 和 lookup_value 中的星号 （*）。 问号匹配任意单个字符;星号匹配任意字符的序列。 如果您想要查找实际问号或星号，键入该字符前波形符 （~）。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WebService">
      <MemberSignature Language="C#" Value="public object WebService (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object WebService([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WebService(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WebService (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ WebService(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16980)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">发出 HTTP GET 请求到 web 服务的 URL。</param>
        <summary>基础函数的异步调用 web 服务使用 HTTP GET 请求，并返回的响应。</summary>
        <returns>
          <b>VARIANT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public double Weekday (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weekday([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weekday(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16454)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Serial_number - 一个序列号，代表尝试查找的那一天的日期。日期应使用 DATE 函数输入，或者作为其他公式或函数的结果输入。例如，使用 DATE(2008,5,23) 输入 2008 年 5 月 23 日。如果日期以文本形式输入，将会出现问题。</param>
        <param name="Arg2">Return_type - 确定返回值类型的数字。</param>
        <summary>返回与日期对应的一周中的某一天。默认情况下，其值为 1（星期日）到 7（星期六）之间的整数。</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>1 或省略</term>
              <description>数字 1（星期日）到数字 7（星期六），同 Microsoft Excel 早期版本。</description>
            </item>
            <item>
              <term>2</term>
              <description>数字 1（星期一）到 7（星期日）。</description>
            </item>
            <item>
              <term>3</term>
              <description>数字 0（星期一）到 6（星期日）。</description>
            </item>
            <item>
              <term>11</term>
              <description>数字 1（星期一）到 7（星期日）。</description>
            </item>
            <item>
              <term>12</term>
              <description>数字 1（星期二）到 7（星期一）</description>
            </item>
            <item>
              <term>13</term>
              <description>数字 1（星期三）到 7（星期二）</description>
            </item>
            <item>
              <term>14</term>
              <description>数字 1（星期四）到 7（星期三）</description>
            </item>
            <item>
              <term>15</term>
              <description>数字 1（星期五）到 7（星期四）</description>
            </item>
            <item>
              <term>16</term>
              <description>数字 1（星期六）到 7（星期五）</description>
            </item>
            <item>
              <term>17</term>
              <description>数字 1（星期日）到 7（星期六）</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeekNum">
      <MemberSignature Language="C#" Value="public double WeekNum (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WeekNum([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WeekNum(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekNum (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16849)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Serial_num - 一周中的日期。日期应使用 DATE 函数输入，或者作为其他公式或函数的结果输入。例如，使用 DATE(2008,5,23) 输入 2008 年 5 月 23 日。如果日期以文本形式输入，将会出现问题。</param>
        <param name="Arg2">Return_type - 一个数字，确定一个星期从哪一天开始。默认值为 1。</param>
        <summary>返回一个数字，指示一年中的第几周。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： <b>WeekNum</b>函数认为包含月 1 日为一年的第一周的周。 但是，没有定义的第一周为一天的大部分 （四个或更多） 中新的一年欧洲标准。 这意味着，有年顺序为三天或更少年 1 月的第一周， <b>WeekNum</b>函数返回的周数是根据欧洲标准不正确。</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>星期从星期日开始。星期内的天数从 1 到 7 记数。</description>
            </item>
            <item>
              <term>2</term>
              <description>星期从星期一开始。星期内的天数从 1 到 7 记数。</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull">
      <MemberSignature Language="C#" Value="public double Weibull (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16686)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 用于计算函数的值。</param>
        <param name="Arg2">alpha - 分布参数。</param>
        <param name="Arg3">beta - 分布参数。</param>
        <param name="Arg4">cumulative - 决定函数的形式。</param>
        <summary>返回韦伯分布。使用此分布可以进行可靠性分析，例如计算设备失效的平均时间。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" />方法。</para>
          <para>如果，x、 alpha 或 beta 为非数值型，<b>则 Weibull</b>将返回 #VALUE ！ 错误值。 如果 x &lt; 0，<b>则 Weibull</b>将返回 #NUM ！ 错误值。 </para>
          <para>如果 alpha ≤ 0 或 beta ≤ 0，<b>则 Weibull</b>返回 #NUM ！ 错误值。 </para>
          <para>韦伯累积分布函数的计算公式为： 

 </para>
          <para>图 1： 韦伯累积分布的等式</para>
          <para></para>
          <para></para>
          <para>韦伯概率密度函数的计算公式为： 

</para>
          <para>图 2： 的 Weibull 概率密度的等式</para>
          <para></para>
          <para></para>
          <para>当 alpha = 1，<b>则 Weibull</b>将返回指数分布：</para>
          <para>图 3： 等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull_Dist">
      <MemberSignature Language="C#" Value="public double Weibull_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16903)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - 用于计算函数的值。</param>
        <param name="Arg2">alpha - 分布参数。</param>
        <param name="Arg3">beta - 分布参数。</param>
        <param name="Arg4">cumulative - 决定函数的形式。</param>
        <summary>返回韦伯分布。使用此分布可以进行可靠性分析，例如计算设备出现故障的平均时间。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果，x、 alpha 或 beta 为非数值型，<b>则 weibull_dist 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 x &lt; 0，<b>则 weibull_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 alpha ≤ 0 或 beta ≤ 0，<b>则 weibull_dist 将</b>返回 #NUM ！ 错误值。 </para>
          <para>韦伯累积分布函数的计算公式为： 

 </para>
          <para>图 1： 韦伯累积分布的等式</para>
          <para></para>
          <para></para>
          <para>韦伯概率密度函数的计算公式为： 

</para>
          <para>图 2： 的 Weibull 概率密度的等式</para>
          <para></para>
          <para></para>
          <para>当 alpha = 1，<b>则 weibull_dist 将</b>以下公式返回指数分布：</para>
          <para>图 3： 等式</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay">
      <MemberSignature Language="C#" Value="public double WorkDay (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date - 代表开始日期的日期。</param>
        <param name="Arg2">Days - Start_date 之前或之后不含周末及节假日的天数。Days 为正值将产生未来日期；为负值将产生过去日期。</param>
        <param name="Arg3">Holidays - 可选的列表，包含要从工作日历中排除的一个或多个日期，如各种省/市/自治区和国家/地区的法定假日和非法定假日。该列表可以是包含日期的单元格区域，也可以是由代表日期的序列号所构成的数组常量。</param>
        <summary>返回某日期（起始日期）之前或之后相隔指定工作日的某一日期的日期值。工作日不包括周末和节假日。在计算发票到期日、预期交货时间或工作天数时，可以使用函数 WORKDAY 来扣除周末或节假日。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>如果任一参数不是有效日期，<b>则 WorkDay</b>将返回 #VALUE ！ 错误值。 </para>
          <para>如果 start_date 加 days 产生无效日期，<b>则 WorkDay</b>将返回 #NUM ！ 错误值。 </para>
          <para>如果 days 不是整数，则将被截尾取整。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay_Intl">
      <MemberSignature Language="C#" Value="public double WorkDay_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16905)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date-开始日期，截断成整数。</param>
        <param name="Arg2">天-之前或之后 start_date 的工作日数。 正值生成将来;负值生成过去的日期;0 （零） 的值生成 start_date。 日期偏移量被截断为一个整数值。</param>
        <param name="Arg3">周末-指示星期几的为周末并且不会考虑工作日。 周末是 weekend 数值或周末发生指定的字符串。</param>
        <param name="Arg4">假日的一组可选的一个或多个要排除从日历工作日的日期。 包含日期、 的单元格区域或数组常量串行值表示两个日期的假日。 可以是任意顺序的日期或串行值在假日。</param>
        <summary>使用自定义周末参数返回指定数量的工作日之前或之后的日期的序列号。周末参数指示哪些日期为周末以及周末的天数。周末以及指定为节假日的任何日期都不被视为工作日。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 start_date 超出了当前日期基值的范围，<b>则 workday_intl 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 holidays 中的任何日期超出了当前日期基值的范围，<b>则 workday_intl 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 start_date 加日期偏移量产生无效日期，<b>则 workday_intl 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 weekend 字符串的长度无效或包含无效字符，<b>则 workday_intl 将</b>返回 #VALUE ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xirr">
      <MemberSignature Language="C#" Value="public double Xirr (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xirr([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xirr(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xirr (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16813)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Values - 与 dates 中的付款计划对应的一系列现金流。第一个付款是可选的，与投资开始时的成本或付款对应。第一个值如果是成本或付款，就必须是负值。所有后续付款都基于 365 天/年贴现。这一系列值中必须至少包含一个正值和一个负值。</param>
        <param name="Arg2">Dates - 与现金流付款对应的付款日期计划。第一个付款日期表示付款计划的开始。所有其他日期都必须晚于此日期，但相互顺序是任意的。日期应使用 DATE 函数输入，或者作为其他公式或函数的结果输入。例如，使用 DATE(2008,5,23) 输入 2008 年 5 月 23 日。如果日期以文本形式输入，将会出现问题。</param>
        <param name="Arg3">Guess-一个据您推测是接近<b>Xirr</b>结果的数字。</param>
        <summary>返回一组现金流的内部收益率，这些现金流不一定定期发生。若要计算一组定期现金流的内部收益率，请使用函数 IRR。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>dates 中的数字将被截尾取整。</para>
          <para>
            <b>Xirr</b>要求至少一个正现金流和一个负现金流;否则， <b>xirr 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 dates 中的任何数字不是有效日期， <b>xirr 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 dates 中的任何数字之前的开始日期， <b>xirr 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 values 和 dates 值的数目不同， <b>xirr 将</b>返回 #NUM ！ 错误值。 </para>
          <para>在大多数情况下不需要提供 guess， <b>xirr 将</b>计算结果。 如果省略，则假定 guess 为 0.1 （10%)。 </para>
          <para>
            <b>Xirr 将</b>与紧密相关<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" />、 净现值函数。 <b>Xirr 将</b>通过计算的回报率是对应于 XNPV 利率 = 0。 </para>
          <para>Excel 计算<b>xirr 将</b>使用的迭代的方法。 使用 （从 guess 开始） 不断变化率， <b>xirr 将</b>进行循环计算，直到结果 0.000001%。 如果<b>Xirr</b>找不到适用于后的结果 100 次，#NUM ！。 将返回错误值。 直到更改率： </para>
          <para>图 1： 等式</para>
          <para></para>
          <para></para>
          <para>其中：</para>
          <para>di = 第 i 个或最后一个、 付款日期。</para>
          <para>d1 = 第 0 个付款日期。</para>
          <para>Pi = 第 i 个或最后一个、 付款。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xnpv">
      <MemberSignature Language="C#" Value="public double Xnpv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xnpv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xnpv (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Xnpv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16814)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">与 dates 中的付款计划相对应的一系列现金流。首期付款是可选的，并与投资开始时的成本或付款相对应。</param>
        <param name="Arg2">与现金流付款相对应的付款日期表。第一个付款日期代表付款计划的开始日期。所有其他日期必须迟于该日期，但可按任何顺序排列。
</param>
        <summary>返回不一定是定期计划的现金流的净现值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： <b>Xnpv</b>方法不提供对应于 （= XNPV （率、 值、 日期）） 的速率参数所需的相应 XNPV 函数的参数。 若要解决此限制在 VBA 代码中，而不是使用<b>Xpnv</b>方法，调用 XNPV 函数使用<see cref="M:Microsoft.Office.Interop.Excel._Application.Evaluate(System.Object)" />方法。</para>
          <para>若要计算组定期现金流的净现值，使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />方法。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public bool Xor (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Xor([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xor (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16953)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg2">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg3">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg4">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg5">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg6">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg7">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg8">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg9">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg10">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg11">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg12">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg13">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg14">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg15">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg16">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg17">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg18">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg19">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg20">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg21">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg22">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg23">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg24">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg25">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg26">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg27">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg28">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg29">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <param name="Arg30">要测试的 1 到 254 个条件可以是<b>TRUE</b>或<b>FALSE</b> ，并且可以是逻辑值、 数组或引用。</param>
        <summary>返回所有参数的逻辑异或。</summary>
        <returns>
          <b>BOOL</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="YearFrac">
      <MemberSignature Language="C#" Value="public double YearFrac (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YearFrac([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YearFrac(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YearFrac (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16835)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date - 代表开始日期的日期。</param>
        <param name="Arg2">End_date - 代表结束日期的日期。</param>
        <param name="Arg3">Basis - 要使用的日计数基准类型。</param>
        <summary>返回 start_date 和 end_date 之间的天数占全年天数的百分比。使用 YEARFRAC 工作表函数可判别某一特定条件下全年效益或债务的比例。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>所有参数都将被截尾取整。</para>
          <para>如果 start_date 或 end_date 不是有效日期，<b>则 yearfrac 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>则 yearfrac 将</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldDisc">
      <MemberSignature Language="C#" Value="public double YieldDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16821)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">Pr - 面值 ￥100 的债券的现价。</param>
        <param name="Arg4">Redemption - 面值 ￥100 的债券的赎回值。</param>
        <param name="Arg5">Basis - 要使用的日计数基准类型。</param>
        <summary>返回已贴现债券的年收益。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>结算日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，结算日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>Settlement、maturity 和 basis 将被截尾取整。</para>
          <para>如果 settlement 或 maturity 不是有效日期，<b>则 yielddisc 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果 pr ≤ 0 或 redemption ≤ 0，<b>则 yielddisc 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>则 yielddisc 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 settlement ≥ maturity，<b>则 yielddisc 将</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldMat">
      <MemberSignature Language="C#" Value="public double YieldMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16816)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Settlement - 债券的结算日。债券的结算日是在发行日之后债券卖给购买者的日期。</param>
        <param name="Arg2">Maturity - 债券的到期日。到期日是债券有效期截止时的日期。</param>
        <param name="Arg3">Issue - 债券的发行日，以日期序列号表示。</param>
        <param name="Arg4">Rate - 债券在发行日的利率。</param>
        <param name="Arg5">Pr - 面值 ￥100 的债券的现价。</param>
        <param name="Arg6">Basis - 要使用的日计数基准类型。</param>
        <summary>返回到期付息的债券的年收益。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要提示</b>： 通过使用 DATE 函数，或作为其他公式或函数的结果应输入日期。 例如，2008 年 5 月 23 日使用 DATE(2008,5,23)。 如果以文本形式输入的日期，则会出现问题。</para>
          <list type="table">
            <item>
              <term>0 或省略</term>
              <description>美国（美国证券交易商协会）30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>实际天数/实际天数</description>
            </item>
            <item>
              <term>2</term>
              <description>实际天数/360</description>
            </item>
            <item>
              <term>3</term>
              <description>实际天数/365</description>
            </item>
            <item>
              <term>4</term>
              <description>欧洲 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel 以序数形式存储日期以使其可用于计算。默认情况下，1900 年 1 月 1 日的序数是 1；2008 年 1 月 1 日的序数是 39448，因为该日期距 1900 年 1 月 1 日有 39,448 天。Microsoft Excel for the Macintosh 使用另外一个默认日期系统。</para>
          <para>结算日是购买者买入息票（如债券）的日期。到期日是息票有效期截止时的日期。例如，在 2008 年 1 月 1 日发行的 30 年期债券，六个月后被购买者买走。则发行日为 2008 年 1 月 1 日，结算日为 2008 年 7 月 1 日，而到期日则是在发行日 2008 年 1 月 1 日的 30 年后，即 2038 年 1 月 1 日。</para>
          <para>Settlement、maturity、issue 和 basis 将被截尾取整。</para>
          <para>如果 settlement、 maturity 或 issue 不是有效日期，<b>则 yieldmat 将</b>返回 #VALUE ！ 错误值。 </para>
          <para>如果速率&lt;0 或如果 pr ≤ 0，<b>则 yieldmat 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 basis &lt; 0 或者，如果基础&gt;4，<b>则 yieldmat 将</b>返回 #NUM ！ 错误值。 </para>
          <para>如果 settlement ≥ maturity，<b>则 yieldmat 将</b>返回 #NUM ！ 错误值。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Z_Test">
      <MemberSignature Language="C#" Value="public double Z_Test (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Z_Test([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Z_Test (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16926)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">array 为要针对其检验假设总体平均值的数组和数据区域。</param>
        <param name="Arg2">要检验的值。</param>
        <param name="Arg3">sigma - 总体（已知）标准偏差。如果省略，则使用样本标准偏差。</param>
        <summary>返回 z 检验的单尾概率值。对于给定的假设总体平均值，Z_TEST 返回样本平均值大于数据集（数组）中观察平均值（即观察样本平均值）的概率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>如果 array 为空，<b>则 Z_Test</b>将返回错误值 # n/A。 </para>
          <para>未省略西格玛时， 
            <b>Z_Test</b>的如下所示计算： </para>
          <para>图 1： 未省略西格玛时的 Z_Test 等式</para>
          <para></para>
          <para></para>
          <para>省略 sigma 时，其计算公式如下：</para>
          <para>图 2： 省略西格玛时的 Z_Test 等式</para>
          <para></para>
          <para></para>
          <para>其中，x 为样本平均值 AVERAGE(array)；s 为样本标准偏差 STDEV_S(array)；n 为样本中的观察值个数 COUNT(array)。</para>
          <para>
            <b>Z_Test</b>表示当基础总体平均值为 μ0，将导致样本平均值大于观察值 average （array）。 对称的正态分布，如果 average （array) &lt; μ0， <b>Z_Test</b>的返回值将大于 0.5。</para>
          <para>可以使用以下 Excel 公式来计算双尾概率样本平均值 average （array），比 μ0 （在两个方向） 从当基础总体平均值为 μ0:</para>
          <para>= 2 * MIN(Z_TEST(array,μ0,sigma)，1-Z_TEST(array,μ0,sigma))。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ZTest">
      <MemberSignature Language="C#" Value="public double ZTest (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ZTest([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ZTest(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ZTest (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16708)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">array 为要针对其检验假设总体平均值的数组和数据区域。</param>
        <param name="Arg2">要检验的值。</param>
        <param name="Arg3">sigma - 总体（已知）的标准偏差。如果省略，则使用样本标准偏差。</param>
        <summary>返回 z 检验的单尾概率值。对于给定的假设总体平均值，ZTEST 返回样本平均值大于数据集（数组）中观察平均值（即观察样本平均值）的概率。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>重要说明</b>： 此功能已替换为一个或多个新函数的可能提供提高的准确性并将其姓名更好地反映其使用情况。 此函数是与早期版本的 Excel 的兼容性仍可用。 但是，如果不需要向后兼容性，则您应考虑使用的新功能从现在起，因为它们更准确地描述其功能。 有关新函数的详细信息，请参阅<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" />方法。</para>
          <para>如果 array 为空，<b>则 ZTest</b>将返回错误值 # n/A。 </para>
          <para>未省略西格玛时， 
            <b>ZTest</b>的如下所示计算： </para>
          <para>图 1： 未省略西格玛时的 ZTest 等式</para>
          <para></para>
          <para></para>
          <para>省略 sigma 时，其计算公式如下：</para>
          <para>图 2： 省略西格玛时的 ZTest 等式</para>
          <para></para>
          <para></para>
          <para>其中，x 为样本平均值 AVERAGE(array)；s 为样本标准偏差 STDEV(array)；n 为样本中的观察值个数 COUNT(array)。</para>
          <para>
            <b>ZTest</b>表示当基础总体平均值为 μ0，将导致样本平均值大于观察值 average （array）。 对称的正态分布，如果 average （array) &lt; μ0，ZTEST 的返回值将大于 0.5。</para>
          <para>可以使用以下 Excel 公式来计算双尾概率样本平均值 average （array），比 μ0 （在两个方向） 从当基础总体平均值为 μ0: = 2 * MIN(ZTEST(array,μ0,sigma)，1-ZTEST （数组，μ0，西格玛））。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>